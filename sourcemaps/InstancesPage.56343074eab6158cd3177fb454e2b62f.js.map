{"version":3,"file":"js/InstancesPage.1651633121965.f6f7c65362ac3a10c1d7.js","mappings":"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","sources":["webpack:///./src/components/BreadcrumbItemLink.js","webpack:///./src/hooks/apis/useInstance.js","webpack:///./src/routes/InstanceDetailsPage/InstanceDetailsPage.js","webpack:///./src/hooks/apis/useInstances.js","webpack:///./src/utils/queryString.js","webpack:///./src/hooks/apis/useCreateInstance.js","webpack:///./src/hooks/apis/useDeleteInstance.js","webpack:///./src/components/SelectSingle.js","webpack:///./src/routes/InstancesPage/CreateInstanceModal.js","webpack:///./src/routes/InstancesPage/DeleteInstanceModal.js","webpack:///./src/utils/date.js","webpack:///./src/routes/InstancesPage/InstanceDetailsDrawer.js","webpack:///./src/components/Status.js","webpack:///./src/routes/InstancesPage/InstancesPage.js","webpack:///./src/hooks/usePagination.js","webpack:///./src/services/apiRequest.js"],"sourcesContent":["/* eslint-disable react/jsx-props-no-spreading */\n/* eslint-disable react/prop-types */\nimport React from 'react';\nimport { BreadcrumbItem } from '@patternfly/react-core';\nimport { Link } from 'react-router-dom';\n\nfunction BreadcrumbItemLink({ children, to, ...rest }) {\n  function render({ className, ariaCurrent }) {\n    return (\n      <Link className={className} aria-current={ariaCurrent} to={to}>\n        {children}\n      </Link>\n    );\n  }\n  return <BreadcrumbItem {...rest} render={render} />;\n}\n\nexport default BreadcrumbItemLink;\n","import { useQuery } from 'react-query';\n\nimport apiRequest from '../../services/apiRequest';\n\nconst getInstanceById = async (instanceId) => {\n  const { data } = await apiRequest.get(\n    `/api/dinosaurs_mgmt/v1/dinosaurs/${instanceId}`\n  );\n  return data;\n};\n\nexport default function useInstance(instanceId) {\n  return useQuery(['instance', instanceId], () => getInstanceById(instanceId));\n}\n","import React from 'react';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { useParams } from 'react-router-dom';\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  Bullseye,\n  Flex,\n  FlexItem,\n  Spinner,\n} from '@patternfly/react-core';\nimport BreadcrumbItemLink from '../../components/BreadcrumbItemLink';\nimport useInstance from '../../hooks/apis/useInstance';\n\nfunction InstanceDetailsPage() {\n  const { instanceId } = useParams();\n  const { data: instance, isFetching } = useInstance(instanceId);\n\n  if (isFetching) {\n    return (\n      <Bullseye>\n        <Spinner />\n      </Bullseye>\n    );\n  }\n\n  return (\n    <div>\n      <PageHeader>\n        <Flex direction={{ default: 'column' }}>\n          <FlexItem>\n            <Breadcrumb>\n              <BreadcrumbItemLink to=\"/instances\">\n                ACS instances\n              </BreadcrumbItemLink>\n              <BreadcrumbItem isActive>{instance.name}</BreadcrumbItem>\n            </Breadcrumb>\n          </FlexItem>\n          <FlexItem>\n            <PageHeaderTitle title={instance.name} />\n          </FlexItem>\n        </Flex>\n      </PageHeader>\n      <Main />\n    </div>\n  );\n}\n\nexport default InstanceDetailsPage;\n","import { useQuery } from 'react-query';\n\nimport apiRequest from '../../services/apiRequest';\nimport { getQueryString } from '../../utils/queryString';\n\nconst getInstances = async ({ query }) => {\n  const queryString = getQueryString(query);\n  const { data } = await apiRequest.get(\n    `/api/dinosaurs_mgmt/v1/dinosaurs?${queryString}`\n  );\n  return data;\n};\n\nexport default function useInstances(options) {\n  return useQuery(['instances', options], () => getInstances(options));\n}\n","import qs from 'qs';\n\nexport function getQueryObject(search) {\n  return qs.parse(search, { ignoreQueryPrefix: true });\n}\n\nexport function getQueryString(searchObject) {\n  return qs.stringify(searchObject, { encode: false });\n}\n","import { useMutation, useQueryClient } from 'react-query';\n\nimport apiRequest from '../../services/apiRequest';\n\nconst postInstance = async (postData) => {\n  const { data } = await apiRequest.post(\n    '/api/dinosaurs_mgmt/v1/dinosaurs?async=true',\n    postData\n  );\n  return data;\n};\n\nexport default function useCreateInstance() {\n  const queryClient = useQueryClient();\n  return useMutation(postInstance, {\n    onSuccess: () => {\n      // Invalidate and refetch\n      queryClient.invalidateQueries('instances');\n    },\n  });\n}\n","import { useMutation, useQueryClient } from 'react-query';\n\nimport apiRequest from '../../services/apiRequest';\n\nconst deleteInstance = async (instanceID) => {\n  const { data } = await apiRequest.delete(\n    `/api/dinosaurs_mgmt/v1/dinosaurs/${instanceID}`\n  );\n  return data;\n};\n\nexport default function useDeleteInstance() {\n  const queryClient = useQueryClient();\n  return useMutation(deleteInstance, {\n    onSuccess: () => {\n      // Invalidate and refetch\n      queryClient.invalidateQueries('instances');\n    },\n  });\n}\n","/* eslint-disable react/prop-types */\nimport React, { useState } from 'react';\nimport { Select, SelectVariant } from '@patternfly/react-core';\n\nfunction SelectSingle({\n  toggleIcon,\n  id,\n  value,\n  handleSelect,\n  isDisabled = false,\n  children,\n  direction = 'down',\n  isCreatable = false,\n  variant = null,\n  placeholderText = '',\n}) {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const isTypeahead =\n    variant === 'typeahead' ? SelectVariant.typeahead : SelectVariant.single;\n\n  function onSelect(_event, selection) {\n    // The mouse event is not useful.\n    setIsOpen(false);\n    handleSelect(id, selection);\n  }\n\n  return (\n    <Select\n      variant={isTypeahead}\n      toggleIcon={toggleIcon}\n      id={id}\n      isDisabled={isDisabled}\n      isOpen={isOpen}\n      onSelect={onSelect}\n      onToggle={setIsOpen}\n      selections={value}\n      direction={direction}\n      isCreatable={isCreatable}\n      placeholderText={placeholderText}\n      toggleId={id}\n    >\n      {children}\n    </Select>\n  );\n}\n\nexport default SelectSingle;\n","/* eslint-disable react/prop-types */\nimport {\n  Alert,\n  Button,\n  Form,\n  FormGroup,\n  Modal,\n  ModalVariant,\n  SelectOption,\n  TextInput,\n  Tile,\n  ToggleGroup,\n  ToggleGroupItem,\n} from '@patternfly/react-core';\nimport React, { useState } from 'react';\nimport SelectSingle from '../../components/SelectSingle';\n\nconst defaultFormValues = {\n  name: '',\n  cloud_provider: 'aws',\n  region: 'us-east-1',\n  availabilityZones: 'multi',\n};\n\nfunction CreateInstanceModal({ isOpen, onClose, onRequestCreate }) {\n  const [error, setError] = useState(null);\n  const [formValues, setFormValues] = useState(defaultFormValues);\n  const [isRequestingCreate, setIsRequestingCreate] = useState(false);\n\n  function onChangeAvailabilityZones(isSelected, event) {\n    const { id } = event.currentTarget;\n    setFormValues((prevFormValues) => ({\n      ...prevFormValues,\n      availabilityZones: id,\n    }));\n  }\n\n  function onCloudRegionSelect(id, selection) {\n    setFormValues((prevFormValues) => ({\n      ...prevFormValues,\n      region: selection,\n    }));\n  }\n\n  function onInputChange(value) {\n    setFormValues((prevFormValues) => ({\n      ...prevFormValues,\n      name: value,\n    }));\n  }\n\n  async function onRequestCreateHandler() {\n    setIsRequestingCreate(true);\n    const result = await onRequestCreate(formValues);\n    setIsRequestingCreate(false);\n    if (result instanceof Error) {\n      setError(result);\n    } else {\n      setFormValues(defaultFormValues);\n      onClose();\n    }\n  }\n\n  return (\n    <Modal\n      variant={ModalVariant.small}\n      title=\"Create ACS instance\"\n      isOpen={isOpen}\n      onClose={onClose}\n      actions={[\n        <Button\n          key=\"createInstance\"\n          variant=\"primary\"\n          onClick={onRequestCreateHandler}\n          isLoading={isRequestingCreate}\n          isDisabled={isRequestingCreate || !formValues?.name}\n        >\n          Create instance\n        </Button>,\n        <Button\n          key=\"cancel\"\n          variant=\"link\"\n          onClick={onClose}\n          isDisabled={isRequestingCreate}\n        >\n          Cancel\n        </Button>,\n      ]}\n    >\n      {error && (\n        <div className=\"pf-u-mb-md\">\n          <Alert variant=\"danger\" title={error.message} />\n        </div>\n      )}\n      <Form>\n        <FormGroup\n          label=\"Name\"\n          isRequired\n          fieldId=\"name\"\n          helperText=\"Must start with a letter and end with a letter or number. Valid characters include lowercase letters from a to z, numbers from 0 to 9, and hyphens ( - ).\"\n        >\n          <TextInput\n            isRequired\n            type=\"text\"\n            id=\"name\"\n            name=\"name\"\n            value={formValues.name}\n            onChange={onInputChange}\n          />\n        </FormGroup>\n        <FormGroup label=\"Cloud provider\" isRequired fieldId=\"cloud_provider\">\n          <Tile\n            title=\"Amazon Web Services\"\n            isSelected={formValues.cloud_provider === 'aws'}\n          />\n        </FormGroup>\n        <FormGroup label=\"Cloud region\" isRequired fieldId=\"region\">\n          <SelectSingle\n            id=\"region\"\n            value={formValues.region}\n            handleSelect={onCloudRegionSelect}\n          >\n            <SelectOption value=\"us-east-1\">US-East, N. Virginia</SelectOption>\n            <SelectOption value=\"eu-west-1\">EU-Ireland</SelectOption>\n          </SelectSingle>\n        </FormGroup>\n        <FormGroup\n          label=\"Availability zones\"\n          isRequired\n          fieldId=\"availabilityZones\"\n        >\n          <ToggleGroup aria-label=\"Availability Zones\">\n            <ToggleGroupItem\n              text=\"Single\"\n              buttonId=\"single\"\n              isSelected={formValues.availabilityZones === 'single'}\n              onChange={onChangeAvailabilityZones}\n              isDisabled\n            />\n            <ToggleGroupItem\n              text=\"Multi\"\n              buttonId=\"multi\"\n              isSelected={formValues.availabilityZones === 'multi'}\n              onChange={onChangeAvailabilityZones}\n            />\n          </ToggleGroup>\n        </FormGroup>\n      </Form>\n    </Modal>\n  );\n}\n\nexport default CreateInstanceModal;\n","/* eslint-disable react/prop-types */\nimport {\n  Button,\n  Form,\n  FormGroup,\n  HelperText,\n  HelperTextItem,\n  Modal,\n  ModalVariant,\n  TextInput,\n} from '@patternfly/react-core';\nimport React, { useState } from 'react';\n\nfunction DeleteInstanceModal({ isOpen, instance, onRequestDelete, onClose }) {\n  const [inputValue, setInputValue] = useState('');\n  const [isRequestingDelete, setIsRequestingDelete] = useState(false);\n\n  async function onRequestDeleteHandler() {\n    setIsRequestingDelete(true);\n    const result = await onRequestDelete(instance.id);\n    setIsRequestingDelete(false);\n    if (result.error) {\n      // Do something\n    } else {\n      setInputValue('');\n      onClose();\n    }\n  }\n\n  if (!instance) return null;\n\n  return (\n    <Modal\n      variant={ModalVariant.small}\n      title=\"Delete instance?\"\n      isOpen={isOpen}\n      onClose={onClose}\n      actions={[\n        <Button\n          key=\"createInstance\"\n          variant=\"danger\"\n          onClick={onRequestDeleteHandler}\n          isLoading={isRequestingDelete}\n          isDisabled={isRequestingDelete || instance.name !== inputValue}\n        >\n          Delete instance\n        </Button>,\n        <Button\n          key=\"cancel\"\n          variant=\"link\"\n          onClick={onClose}\n          isDisabled={isRequestingDelete}\n        >\n          Cancel\n        </Button>,\n      ]}\n    >\n      <div className=\"pf-u-pb-md\">\n        <div>\n          This will permanently delete{' '}\n          <span className=\"pf-u-font-weight-bold\">{instance.name}</span>.\n        </div>\n        <div>This action cannot be undone.</div>\n      </div>\n      <Form>\n        <FormGroup\n          label=\"Confirmation\"\n          isRequired\n          fieldId=\"confirmationInstanceName\"\n        >\n          <TextInput\n            isRequired\n            type=\"text\"\n            id=\"confirmationInstanceName\"\n            name=\"confirmationInstanceName\"\n            value={inputValue}\n            onChange={setInputValue}\n          />\n        </FormGroup>\n        <HelperText>\n          <HelperTextItem>\n            Type <span className=\"pf-u-font-weight-bold\">{instance.name}</span>{' '}\n            to confirm.\n          </HelperTextItem>\n        </HelperText>\n      </Form>\n    </Modal>\n  );\n}\n\nexport default DeleteInstanceModal;\n","import { format, parseISO } from 'date-fns';\n\nconst dateTimeFormat = 'MM/dd/yyyy | h:mm:ss a';\n\nexport function getDateTime(timestamp) {\n  return format(parseISO(timestamp), dateTimeFormat);\n}\n","/* eslint-disable react/prop-types */\nimport {\n  DescriptionList,\n  DescriptionListDescription,\n  DescriptionListGroup,\n  DescriptionListTerm,\n  Divider,\n  Drawer,\n  DrawerActions,\n  DrawerCloseButton,\n  DrawerContent,\n  DrawerContentBody,\n  DrawerHead,\n  DrawerPanelContent,\n  Text,\n  TextContent,\n  TextVariants,\n} from '@patternfly/react-core';\nimport React from 'react';\n\nimport { getDateTime } from '../../utils/date';\n\nfunction InstanceDetailsDrawer({ isExpanded, onClose, instance, children }) {\n  return (\n    <Drawer isExpanded={isExpanded}>\n      <DrawerContent\n        panelContent={\n          <DrawerPanelContent>\n            <DrawerHead>\n              <div>\n                <TextContent>\n                  <Text component={TextVariants.small}>Name</Text>\n                </TextContent>\n                <TextContent>\n                  <Text component={TextVariants.h1}>{instance?.name}</Text>\n                </TextContent>\n              </div>\n              <DrawerActions>\n                <DrawerCloseButton onClick={onClose} />\n              </DrawerActions>\n            </DrawerHead>\n            <Divider component=\"div\" />\n            <DrawerContentBody>\n              {instance && (\n                <DescriptionList isHorizontal>\n                  <DescriptionListGroup>\n                    <DescriptionListTerm>Cloud provider</DescriptionListTerm>\n                    <DescriptionListDescription>\n                      {instance.cloud_provider}\n                    </DescriptionListDescription>\n                  </DescriptionListGroup>\n                  <DescriptionListGroup>\n                    <DescriptionListTerm>Region</DescriptionListTerm>\n                    <DescriptionListDescription>\n                      {instance.region}\n                    </DescriptionListDescription>\n                  </DescriptionListGroup>\n                  <DescriptionListGroup>\n                    <DescriptionListTerm>ID</DescriptionListTerm>\n                    <DescriptionListDescription>\n                      {instance.id}\n                    </DescriptionListDescription>\n                  </DescriptionListGroup>\n                  <DescriptionListGroup>\n                    <DescriptionListTerm>Owner</DescriptionListTerm>\n                    <DescriptionListDescription>\n                      {instance.owner}\n                    </DescriptionListDescription>\n                  </DescriptionListGroup>\n                  <DescriptionListGroup>\n                    <DescriptionListTerm>Created</DescriptionListTerm>\n                    <DescriptionListDescription>\n                      {getDateTime(instance.created_at)}\n                    </DescriptionListDescription>\n                  </DescriptionListGroup>\n                  <DescriptionListGroup>\n                    <DescriptionListTerm>Updated</DescriptionListTerm>\n                    <DescriptionListDescription>\n                      {getDateTime(instance.updated_at)}\n                    </DescriptionListDescription>\n                  </DescriptionListGroup>\n                </DescriptionList>\n              )}\n            </DrawerContentBody>\n          </DrawerPanelContent>\n        }\n      >\n        {children}\n      </DrawerContent>\n    </Drawer>\n  );\n}\n\nexport default InstanceDetailsDrawer;\n","/* eslint-disable react/prop-types */\nimport React from 'react';\nimport { CheckCircleIcon } from '@patternfly/react-icons';\nimport { Flex, FlexItem } from '@patternfly/react-core';\n\nfunction Status({ status }) {\n  switch (status) {\n    case 'ready':\n      return (\n        <Flex>\n          <FlexItem>\n            <CheckCircleIcon className=\"pf-u-success-color-100\" />\n          </FlexItem>\n          <FlexItem>Ready</FlexItem>\n        </Flex>\n      );\n    default:\n      return 'N/A';\n  }\n}\n\nexport default Status;\n","import React, { useEffect, useState } from 'react';\nimport { Link, withRouter, useHistory } from 'react-router-dom';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport {\n  EmptyState,\n  EmptyStateIcon,\n  Title,\n  EmptyStateBody,\n  EmptyStatePrimary,\n  Button,\n  Card,\n  Toolbar,\n  ToolbarContent,\n  ToolbarItem,\n  Pagination,\n  Bullseye,\n  Spinner,\n} from '@patternfly/react-core';\nimport {\n  ActionsColumn,\n  TableComposable,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from '@patternfly/react-table';\nimport { CubesIcon } from '@patternfly/react-icons';\n\nimport usePagination from '../../hooks/usePagination';\nimport useInstances from '../../hooks/apis/useInstances';\nimport useCreateInstance from '../../hooks/apis/useCreateInstance';\nimport useDeleteInstance from '../../hooks/apis/useDeleteInstance';\n\nimport CreateInstanceModal from './CreateInstanceModal';\nimport DeleteInstanceModal from './DeleteInstanceModal';\nimport InstanceDetailsDrawer from './InstanceDetailsDrawer';\nimport { getDateTime } from '../../utils/date';\nimport Status from '../../components/Status';\n\n/**\n * A smart component that handles all the api calls and data needed by the dumb components.\n * Smart components are usually classes.\n *\n * https://reactjs.org/docs/components-and-props.html\n * https://medium.com/@thejasonfile/dumb-components-and-smart-components-e7b33a698d43\n */\nfunction InstancesPage() {\n  const history = useHistory();\n  const { page, perPage, onSetPage, onPerPageSelect } = usePagination();\n  const { data, isFetching } = useInstances({ query: { page, size: perPage } });\n  const createInstance = useCreateInstance();\n  const deleteInstance = useDeleteInstance();\n  const [creatingInstance, setCreatingInstance] = useState(null);\n  const [deletingInstance, setDeletingInstance] = useState(null);\n  const [viewingInstance, setViewingInstance] = useState(null);\n\n  const instances = data?.items || [];\n\n  useEffect(() => {\n    insights?.chrome?.appAction?.('sample-page');\n  }, []);\n\n  function onRequestCreate(values) {\n    const response = createInstance.mutateAsync({\n      region: values.region,\n      cloud_provider: values.cloud_provider,\n      name: values.name,\n      multi_az: values.availabilityZones === 'multi',\n    });\n    return response.catch((error) => {\n      return error;\n    });\n  }\n\n  function closeCreateInstanceModal() {\n    setCreatingInstance(null);\n  }\n\n  function onRequestDelete(instanceID) {\n    const response = deleteInstance.mutateAsync(instanceID);\n    return response.catch((error) => {\n      return error;\n    });\n  }\n\n  function closeDeleteInstanceModal() {\n    setDeletingInstance(null);\n  }\n\n  function closeInstanceDetailsDrawer() {\n    setViewingInstance(null);\n  }\n\n  if (isFetching) {\n    return (\n      <Bullseye>\n        <Spinner />\n      </Bullseye>\n    );\n  }\n\n  return (\n    <InstanceDetailsDrawer\n      isExpanded={!!viewingInstance}\n      instance={viewingInstance}\n      onClose={closeInstanceDetailsDrawer}\n    >\n      <PageHeader>\n        <PageHeaderTitle title=\"ACS Instances\" />\n      </PageHeader>\n      <Main>\n        <Card>\n          {instances?.length === 0 ? (\n            <EmptyState>\n              <EmptyStateIcon icon={CubesIcon} />\n              <Title size=\"lg\" headingLevel=\"h4\">\n                No ACS instances.\n              </Title>\n              <EmptyStateBody>Create one to get started.</EmptyStateBody>\n              <EmptyStatePrimary>\n                <Button\n                  variant=\"primary\"\n                  onClick={() => setCreatingInstance({})}\n                >\n                  Create ACS instance\n                </Button>\n              </EmptyStatePrimary>\n            </EmptyState>\n          ) : (\n            <>\n              <Toolbar>\n                <ToolbarContent>\n                  <ToolbarItem>\n                    <Button\n                      variant=\"primary\"\n                      onClick={() => setCreatingInstance({})}\n                    >\n                      Create ACS instance\n                    </Button>\n                  </ToolbarItem>\n                  <ToolbarItem\n                    variant=\"pagination\"\n                    align={{ default: 'alignRight' }}\n                  >\n                    <Pagination\n                      itemCount={instances.length}\n                      perPage={perPage}\n                      page={page}\n                      onSetPage={onSetPage}\n                      widgetId=\"acs-instances-top-pagination\"\n                      onPerPageSelect={onPerPageSelect}\n                      isCompact\n                    />\n                  </ToolbarItem>\n                </ToolbarContent>\n              </Toolbar>\n              <TableComposable aria-label=\"ACS instances table\">\n                <Thead>\n                  <Tr>\n                    <Th>Name</Th>\n                    <Th>Cloud Provider</Th>\n                    <Th>Region</Th>\n                    <Th>Owner</Th>\n                    <Th>Status</Th>\n                    <Th>Time Created</Th>\n                    <Th />\n                  </Tr>\n                </Thead>\n                <Tbody>\n                  {instances.map((instance) => (\n                    <Tr\n                      key={instance.name}\n                      onRowClick={(event) => {\n                        if (event.target.getAttribute('type') !== 'button') {\n                          setViewingInstance(instance);\n                        }\n                      }}\n                      isRowSelected={viewingInstance?.name === instance?.name}\n                    >\n                      <Td dataLabel=\"Name\">\n                        <Link to={`/instances/instance/${instance.id}`}>\n                          {instance.name}\n                        </Link>\n                      </Td>\n                      <Td dataLabel=\"Cloud Provider\">\n                        {instance.cloud_provider}\n                      </Td>\n                      <Td dataLabel=\"Region\">{instance.region}</Td>\n                      <Td dataLabel=\"Owner\">{instance.owner}</Td>\n                      <Td dataLabel=\"Status\">\n                        <Status status={instance.status} />\n                      </Td>\n                      <Td dataLabel=\"Time Created<\">\n                        {getDateTime(instance.created_at)}\n                      </Td>\n                      <Td isActionCell>\n                        <ActionsColumn\n                          items={[\n                            {\n                              title: 'Details',\n                              onClick: (event) => {\n                                event.preventDefault();\n                                history.push(\n                                  `/instances/instance/${instance.id}`\n                                );\n                              },\n                            },\n                            {\n                              title: 'Delete',\n                              onClick: (event) => {\n                                event.preventDefault();\n                                setDeletingInstance(instance);\n                              },\n                            },\n                          ]}\n                        />\n                      </Td>\n                    </Tr>\n                  ))}\n                </Tbody>\n              </TableComposable>\n              <Toolbar>\n                <ToolbarContent>\n                  <ToolbarItem\n                    variant=\"pagination\"\n                    align={{ default: 'alignRight' }}\n                  >\n                    <Pagination\n                      itemCount={instances.length}\n                      perPage={perPage}\n                      page={page}\n                      onSetPage={onSetPage}\n                      widgetId=\"acs-instances-top-pagination\"\n                      onPerPageSelect={onPerPageSelect}\n                    />\n                  </ToolbarItem>\n                </ToolbarContent>\n              </Toolbar>\n            </>\n          )}\n        </Card>\n        <CreateInstanceModal\n          isOpen={!!creatingInstance}\n          onClose={closeCreateInstanceModal}\n          onRequestCreate={onRequestCreate}\n        />\n        <DeleteInstanceModal\n          instance={deletingInstance}\n          isOpen={!!deletingInstance}\n          onClose={closeDeleteInstanceModal}\n          onRequestDelete={onRequestDelete}\n        />\n      </Main>\n    </InstanceDetailsDrawer>\n  );\n}\n\nexport default withRouter(InstancesPage);\n","import { useState } from 'react';\n\nfunction usePagination() {\n  const [page, setPage] = useState(1);\n  const [perPage, setPerPage] = useState(20);\n\n  function onSetPage(_, newPage) {\n    setPage(newPage);\n  }\n\n  function onPerPageSelect(_, newPerPage) {\n    setPerPage(newPerPage);\n  }\n\n  return {\n    page,\n    perPage,\n    onSetPage,\n    onPerPageSelect,\n  };\n}\n\nexport default usePagination;\n","import axios from 'axios';\n\nexport const authInterceptor = (client) => {\n  client.interceptors.request.use(async (cfg) => {\n    await insights.chrome.auth.getUser();\n    const token = await insights.chrome.auth.getToken();\n    const BASE_URL = cfg.baseURL || '';\n    const updatedCfg = { ...cfg, url: `${BASE_URL}${cfg.url}` };\n    if (token) {\n      updatedCfg.headers = {\n        ...updatedCfg.headers,\n        Authorization: `Bearer ${token}`,\n      };\n    }\n    delete updatedCfg.customHost;\n    return updatedCfg;\n  });\n  return client;\n};\n\nconst apiRequest = authInterceptor(axios.create());\n\nexport default apiRequest;\n"],"names":["children","to","rest","BreadcrumbItem","render","className","ariaCurrent","Link","getInstanceById","instanceId","apiRequest","data","useParams","useQuery","instance","isFetching","Bullseye","Spinner","PageHeader","Flex","direction","default","FlexItem","Breadcrumb","isActive","name","PageHeaderTitle","title","Main","getInstances","searchObject","query","queryString","qs","encode","postInstance","postData","deleteInstance","instanceID","useDeleteInstance","queryClient","useQueryClient","useMutation","onSuccess","invalidateQueries","toggleIcon","id","value","handleSelect","isDisabled","isCreatable","variant","placeholderText","useState","isOpen","setIsOpen","isTypeahead","SelectVariant","Select","onSelect","_event","selection","onToggle","selections","toggleId","defaultFormValues","cloud_provider","region","availabilityZones","onClose","onRequestCreate","error","setError","formValues","setFormValues","isRequestingCreate","setIsRequestingCreate","onChangeAvailabilityZones","isSelected","event","currentTarget","prevFormValues","result","Error","Modal","ModalVariant","actions","Button","key","onClick","isLoading","Alert","message","Form","FormGroup","label","isRequired","fieldId","helperText","TextInput","type","onChange","Tile","SelectOption","ToggleGroup","ToggleGroupItem","text","buttonId","onRequestDelete","inputValue","setInputValue","isRequestingDelete","setIsRequestingDelete","HelperText","HelperTextItem","getDateTime","timestamp","format","parseISO","isExpanded","Drawer","DrawerContent","panelContent","DrawerPanelContent","DrawerHead","TextContent","Text","component","TextVariants","DrawerActions","DrawerCloseButton","Divider","DrawerContentBody","DescriptionList","isHorizontal","DescriptionListGroup","DescriptionListTerm","DescriptionListDescription","owner","created_at","updated_at","status","withRouter","options","history","useHistory","page","setPage","perPage","setPerPage","onSetPage","_","newPage","onPerPageSelect","newPerPage","usePagination","size","createInstance","creatingInstance","setCreatingInstance","deletingInstance","setDeletingInstance","viewingInstance","setViewingInstance","instances","items","useEffect","insights","chrome","appAction","Card","length","EmptyState","EmptyStateIcon","icon","CubesIcon","Title","headingLevel","EmptyStateBody","EmptyStatePrimary","Toolbar","ToolbarContent","ToolbarItem","align","Pagination","itemCount","widgetId","isCompact","TableComposable","Thead","Tr","Th","Tbody","map","onRowClick","target","getAttribute","isRowSelected","Td","dataLabel","isActionCell","ActionsColumn","preventDefault","push","values","mutateAsync","multi_az","client","axios","interceptors","request","use","cfg","auth","getUser","getToken","token","BASE_URL","baseURL","updatedCfg","url","headers","Authorization","customHost"],"sourceRoot":""}