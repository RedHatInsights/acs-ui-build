{"version":3,"file":"js/495.69f0bf3ae95e0b601660.js","mappings":"qMAwCA,QA5BY,WACJ,OAA0C,SAAxCA,EAAmB,sBAAEC,EAAc,iBAe3C,OAbA,IAAAC,YAAU,YAKS,UACRC,SAAS,CAAEC,cAAe,OAEnCJ,EAAoB,MACtB,GAAG,IAIiB,UAFAC,IAGX,kBAAC,IAAW,MAGjB,kBAAC,EAAAI,SAAQ,KACP,kBAAC,KAAmB,MACpB,kBAAC,IAAM,MAIf,C,+HC/BMC,EAAc,IAAI,EAAAC,YAcxB,QAZiB,WAAM,OACrB,kBAAC,KAAQ,CACPC,MAAO,eAAK,EAC6C,IACvDC,YAEF,kBAAC,EAAAC,oBAAmB,CAACC,OAAQL,GAC3B,kBAAC,IAAG,OAPa,C,4FCHjBM,GAAW,IAAAC,OACf,WAAM,yCAEFC,GAAoB,IAAAD,OACxB,WACE,yCAIEE,GAAgB,IAAAF,OACpB,WACE,iEAIEG,GAAsB,IAAAH,OAC1B,WACE,iEAIEI,GAAe,IAAAJ,OACnB,WACE,yCAKEK,GAAqB,IAAAL,OACzB,WACE,yCAKSM,EAAS,WAAM,OAC1B,kBAAC,EAAAC,SAAQ,CACPC,SACE,kBAAC,EAAAC,SAAQ,KACP,kBAAC,EAAAC,QAAO,QAIZ,kBAAC,SAAY,KACX,kBAAC,EAAAC,MAAK,CAACC,KAAK,iBAAiBC,QAAS,kBAACZ,EAAiB,QACxD,kBAAC,EAAAU,MAAK,CAACC,KAAK,OAAOC,QAAS,kBAACd,EAAQ,QACrC,kBAAC,EAAAY,MAAK,CACJC,KAAK,kCACLC,QAAS,kBAACV,EAAmB,QAE/B,kBAAC,EAAAQ,MAAK,CAACC,KAAK,aAAaC,QAAS,kBAACX,EAAa,QAChD,kBAAC,EAAAS,MAAK,CAACC,KAAK,YAAYC,QAAS,kBAACT,EAAY,QAC9C,kBAAC,EAAAO,MAAK,CAACC,KAAK,mBAAmBC,QAAS,kBAACR,EAAkB,QAE3D,kBAAC,EAAAM,MAAK,CACJC,KAAK,IACLC,QACE,kBAAC,EAAAC,SAAQ,CAACC,IAAI,OAAgB,YAAa,KAAeC,SAAO,OAtB/C,C,mRCjCrB,SAASC,I,IAAK,sDAMnB,OALW,QAAY,CAAC,EAAG,EAAF,CACvB,KACA,QAAwB,CAAEC,oBAAqB,CAAC,SAAU,YACvDC,GAAU,GAGjB,C,+PCbaC,EAAe,4BACfC,EAAkB,SAACN,EAAQO,GACtC,MAAkB,iBAAPP,EAEF,UAAGO,EAAQ,YAAIP,GAAKC,QAAQ,WAAIM,EAAQ,MAAM,KAGhD,EAAP,KACKP,GAAE,CACLQ,SAAU,UAAGD,EAAQ,YAAIP,EAAGQ,UAAWP,QAAQ,WAAIM,EAAQ,MAAM,MAErE,C","sources":["webpack:///./src/App.tsx","webpack:///./src/AppEntry.tsx","webpack:///./src/Routes.tsx","webpack:///./src/store/index.ts","webpack:///./src/utils/paths.ts"],"sourcesContent":["import React, { Fragment, useEffect } from 'react';\nimport { Reducer } from 'redux';\n\nimport { Routes } from './Routes';\nimport './App.scss';\n\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport NotificationsPortal from '@redhat-cloud-services/frontend-components-notifications/NotificationPortal';\nimport { notificationsReducer } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\nimport { Unavailable } from '@redhat-cloud-services/frontend-components/Unavailable';\n\nconst App = () => {\n  const { updateDocumentTitle, getEnvironment } = useChrome();\n\n  useEffect(() => {\n    if (process.env.NODE_ENV === 'development') {\n      localStorage.setItem('chrome:analytics:dev', 'true');\n    }\n\n    const registry = getRegistry();\n    registry.register({ notifications: notificationsReducer as Reducer });\n\n    updateDocumentTitle('acs');\n  }, []);\n\n  const environment = getEnvironment();\n\n  if (environment === 'stage') {\n    return <Unavailable />;\n  } else {\n    return (\n      <Fragment>\n        <NotificationsPortal />\n        <Routes />\n      </Fragment>\n    );\n  }\n};\n\nexport default App;\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { init } from './store';\nimport App from './App';\nimport logger from 'redux-logger';\nimport { QueryClient, QueryClientProvider } from 'react-query';\n\nconst queryClient = new QueryClient();\n\nconst AppEntry = () => (\n  <Provider\n    store={init(\n      ...(process.env.NODE_ENV !== 'production' ? [logger] : [])\n    ).getStore()}\n  >\n    <QueryClientProvider client={queryClient}>\n      <App />\n    </QueryClientProvider>\n  </Provider>\n);\n\nexport default AppEntry;\n","import React, { Suspense, lazy } from 'react';\nimport { Navigate, Route, Routes as RouterRoutes } from 'react-router-dom';\nimport { linkBasename, mergeToBasename } from './utils/paths';\n\nimport { Bullseye, Spinner } from '@patternfly/react-core';\n\nconst OopsPage = lazy(\n  () => import(/* webpackChunkName: \"OopsPage\" */ './routes/OopsPage/OopsPage')\n);\nconst NoPermissionsPage = lazy(\n  () =>\n    import(\n      /* webpackChunkName: \"NoPermissionsPage\" */ './routes/NoPermissionsPage/NoPermissionsPage'\n    )\n);\nconst InstancesPage = lazy(\n  () =>\n    import(\n      /* webpackChunkName: \"InstancesPage\" */ './routes/InstancesPage/InstancesPage'\n    )\n);\nconst InstanceDetailsPage = lazy(\n  () =>\n    import(\n      /* webpackChunkName: \"InstanceDetailsPage\" */ './routes/InstanceDetailsPage/InstanceDetailsPage'\n    )\n);\nconst OverviewPage = lazy(\n  () =>\n    import(\n      /* webpackChunkName: \"OverviewPage\" */ './routes/OverviewPage/OverviewPage'\n    )\n);\n\nconst GettingStartedPage = lazy(\n  () =>\n    import(\n      /* webpackChunkName: \"GettingStartedPage\" */ './routes/GettingStartedPage/GettingStartedPage'\n    )\n);\n\nexport const Routes = () => (\n  <Suspense\n    fallback={\n      <Bullseye>\n        <Spinner />\n      </Bullseye>\n    }\n  >\n    <RouterRoutes>\n      <Route path=\"no-permissions\" element={<NoPermissionsPage />} />\n      <Route path=\"oops\" element={<OopsPage />} />\n      <Route\n        path=\"/instances/instance/:instanceId\"\n        element={<InstanceDetailsPage />}\n      />\n      <Route path=\"/instances\" element={<InstancesPage />} />\n      <Route path=\"/overview\" element={<OverviewPage />} />\n      <Route path=\"/getting-started\" element={<GettingStartedPage />} />\n      {/* Finally, catch all unmatched routes */}\n      <Route\n        path=\"*\"\n        element={\n          <Navigate to={mergeToBasename('/overview', linkBasename)} replace />\n        }\n      />\n    </RouterRoutes>\n  </Suspense>\n);\n","import { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport notificationsMiddleware from '@redhat-cloud-services/frontend-components-notifications/notificationsMiddleware';\nimport ReducerRegistry from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { Middleware, Reducer } from 'redux';\n\nexport let registry: ReducerRegistry<Reducer>;\n\nexport function init(...middleware: Middleware[]) {\n  registry = getRegistry({}, [\n    promiseMiddleware,\n    notificationsMiddleware({ errorDescriptionKey: ['detail', 'stack'] }),\n    ...middleware,\n  ]);\n  return registry;\n}\n","import { To } from 'react-router-dom';\n\nexport const linkBasename = '/application-services/acs';\nexport const mergeToBasename = (to: To, basename: string): To => {\n  if (typeof to === 'string') {\n    // replace possible \"//\" after basename\n    return `${basename}/${to}`.replace(`^${basename}//`, '/');\n  }\n\n  return {\n    ...to,\n    pathname: `${basename}/${to.pathname}`.replace(`^${basename}//`, '/'),\n  };\n};\n"],"names":["updateDocumentTitle","getEnvironment","useEffect","register","notifications","Fragment","queryClient","QueryClient","store","getStore","QueryClientProvider","client","OopsPage","lazy","NoPermissionsPage","InstancesPage","InstanceDetailsPage","OverviewPage","GettingStartedPage","Routes","Suspense","fallback","Bullseye","Spinner","Route","path","element","Navigate","to","replace","init","errorDescriptionKey","middleware","linkBasename","mergeToBasename","basename","pathname"],"sourceRoot":""}