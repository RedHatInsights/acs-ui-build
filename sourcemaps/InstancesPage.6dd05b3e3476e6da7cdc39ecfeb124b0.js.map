{"version":3,"file":"js/InstancesPage.cb71be70b0f345eb8a44.js","mappings":"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","sources":["webpack:///./src/components/InstanceDetailsList.js","webpack:///./src/hooks/apis/useInstances.js","webpack:///./src/utils/queryString.js","webpack:///./src/hooks/apis/useCreateInstance.js","webpack:///./src/hooks/apis/useDeleteInstance.js","webpack:///./src/hooks/apis/useCloudAccounts.js","webpack:///./src/hooks/useAnalytics.js","webpack:///./src/components/SelectSingle.js","webpack:///./src/routes/InstancesPage/CreateInstanceModal.js","webpack:///./src/routes/InstancesPage/DeleteInstanceModal.js","webpack:///./src/routes/InstancesPage/InstanceDetailsDrawer.js","webpack:///./src/utils/status.js","webpack:///./src/components/Status.js","webpack:///./src/routes/InstancesPage/InstancesToolbarSearchFilter.js","webpack:///./src/utils/searchQuery.js","webpack:///./src/routes/InstancesPage/InstancesPage.js","webpack:///./src/hooks/usePagination.js","webpack:///./src/hooks/useTableSort.js","webpack:///./src/services/apiRequest.js","webpack:///./src/utils/cloudProvider.js","webpack:///./src/utils/date.js","webpack:///./src/utils/region.js"],"sourcesContent":["/* eslint-disable react/prop-types */\nimport React from 'react';\nimport {\n  DescriptionList,\n  DescriptionListDescription,\n  DescriptionListGroup,\n  DescriptionListTerm,\n} from '@patternfly/react-core';\n\nimport { getDateTime } from '../utils/date';\nimport { cloudProviderValueToLabel } from '../utils/cloudProvider';\nimport { regionValueToLabel } from '../utils/region';\n\nfunction InstanceDetailsList({ instance }) {\n  return (\n    <DescriptionList isHorizontal>\n      <DescriptionListGroup>\n        <DescriptionListTerm>Cloud provider</DescriptionListTerm>\n        <DescriptionListDescription>\n          {cloudProviderValueToLabel(instance.cloud_provider)}\n        </DescriptionListDescription>\n      </DescriptionListGroup>\n      <DescriptionListGroup>\n        <DescriptionListTerm>Region</DescriptionListTerm>\n        <DescriptionListDescription>\n          {regionValueToLabel(instance.region)}\n        </DescriptionListDescription>\n      </DescriptionListGroup>\n      <DescriptionListGroup>\n        <DescriptionListTerm>ID</DescriptionListTerm>\n        <DescriptionListDescription>{instance.id}</DescriptionListDescription>\n      </DescriptionListGroup>\n      <DescriptionListGroup>\n        <DescriptionListTerm>Owner</DescriptionListTerm>\n        <DescriptionListDescription>\n          {instance.owner}\n        </DescriptionListDescription>\n      </DescriptionListGroup>\n      <DescriptionListGroup>\n        <DescriptionListTerm>Time created</DescriptionListTerm>\n        <DescriptionListDescription>\n          {getDateTime(instance.created_at)}\n        </DescriptionListDescription>\n      </DescriptionListGroup>\n      <DescriptionListGroup>\n        <DescriptionListTerm>Time updated</DescriptionListTerm>\n        <DescriptionListDescription>\n          {getDateTime(instance.updated_at)}\n        </DescriptionListDescription>\n      </DescriptionListGroup>\n      <DescriptionListGroup>\n        <DescriptionListTerm>\n          Central API endpoint (Sensor mTLS)\n        </DescriptionListTerm>\n        <DescriptionListDescription>\n          {instance.centralDataURL || '-'}\n        </DescriptionListDescription>\n      </DescriptionListGroup>\n      <DescriptionListGroup>\n        <DescriptionListTerm>Central instance (UI, roxctl)</DescriptionListTerm>\n        <DescriptionListDescription>\n          {instance.centralUIURL || '-'}\n        </DescriptionListDescription>\n      </DescriptionListGroup>\n    </DescriptionList>\n  );\n}\n\nexport default InstanceDetailsList;\n","import { useQuery } from 'react-query';\n\nimport apiRequest from '../../services/apiRequest';\nimport { getQueryString } from '../../utils/queryString';\n\nconst getInstances = async ({ query }) => {\n  const queryString = getQueryString(query);\n  const { data } = await apiRequest.get(\n    `/api/rhacs/v1/centrals?${queryString}`\n  );\n  return data;\n};\n\nexport default function useInstances(options) {\n  const { refetchInterval } = options;\n  return useQuery(['instances', options], () => getInstances(options), {\n    refetchInterval,\n  });\n}\n","import qs from 'qs';\n\nexport function getQueryObject(search) {\n  return qs.parse(search, { ignoreQueryPrefix: true });\n}\n\nexport function getQueryString(searchObject) {\n  return qs.stringify(searchObject, { encode: false });\n}\n","import { useMutation, useQueryClient } from 'react-query';\n\nimport apiRequest from '../../services/apiRequest';\n\nconst postInstance = async (postData) => {\n  const { data } = await apiRequest.post(\n    '/api/rhacs/v1/centrals?async=true',\n    postData\n  );\n  return data;\n};\n\nexport default function useCreateInstance() {\n  const queryClient = useQueryClient();\n  return useMutation(postInstance, {\n    onSuccess: () => {\n      // Invalidate and refetch\n      queryClient.invalidateQueries('instances');\n    },\n  });\n}\n","import { useMutation, useQueryClient } from 'react-query';\n\nimport apiRequest from '../../services/apiRequest';\n\nconst deleteInstance = async (instanceID) => {\n  const { data } = await apiRequest.delete(\n    `/api/rhacs/v1/centrals/${instanceID}?async=true`\n  );\n  return data;\n};\n\nexport default function useDeleteInstance() {\n  const queryClient = useQueryClient();\n  return useMutation(deleteInstance, {\n    onSuccess: () => {\n      // Invalidate and refetch\n      queryClient.invalidateQueries('instances');\n    },\n  });\n}\n","import { useQuery } from 'react-query';\n\nimport apiRequest from '../../services/apiRequest';\n\nexport const queryKey = 'cloud_accounts';\n\nconst getCloudAccounts = async () => {\n  const { data } = await apiRequest.get(`/api/rhacs/v1/cloud_accounts`);\n  return data;\n};\n\nexport default function useCloudAccounts() {\n  return useQuery([queryKey], () => getCloudAccounts());\n}\n","import useChrome from '@redhat-cloud-services/frontend-components/useChrome';\n\n// the chrome hook assumes we're in a prod env because local development points\n// to prod.foo.redhat.com and uses the wrong write key when initializing segment.\n// to avoid this we can set chrome:analytics:dev to true in local storage\n// to initialize segment with the correct write key and test events in dev\n\n// one caveat to note is we cant prevent sending the initial page/group/identity events\n// to the wrong segment environment when segment is initialized before the key is set\n\nfunction useAnalytics() {\n  const { analytics } = useChrome();\n\n  function analyticsTrack(event) {\n    const isProdEnv = process.env.NODE_ENV === 'production';\n    const isDevEnv = process.env.NODE_ENV === 'development';\n    const analyticsDevKeySet =\n      localStorage.getItem('chrome:analytics:dev') === 'true';\n\n    if (isProdEnv || (isDevEnv && analyticsDevKeySet)) {\n      analytics.track(event);\n    }\n  }\n\n  return {\n    analyticsTrack,\n  };\n}\n\nexport default useAnalytics;\n","/* eslint-disable react/prop-types */\nimport React, { useState } from 'react';\nimport { Select, SelectVariant } from '@patternfly/react-core';\n\nfunction SelectSingle({\n  toggleIcon,\n  id,\n  value,\n  handleSelect,\n  isDisabled = false,\n  children,\n  direction = 'down',\n  isCreatable = false,\n  variant = null,\n  placeholderText = '',\n  menuAppendTo = undefined,\n}) {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const isTypeahead =\n    variant === 'typeahead' ? SelectVariant.typeahead : SelectVariant.single;\n\n  function onSelect(_event, selection) {\n    // The mouse event is not useful.\n    setIsOpen(false);\n    handleSelect(id, selection);\n  }\n\n  return (\n    <Select\n      variant={isTypeahead}\n      toggleIcon={toggleIcon}\n      id={id}\n      isDisabled={isDisabled}\n      isOpen={isOpen}\n      onSelect={onSelect}\n      onToggle={setIsOpen}\n      selections={value}\n      direction={direction}\n      isCreatable={isCreatable}\n      placeholderText={placeholderText}\n      toggleId={id}\n      menuAppendTo={menuAppendTo}\n    >\n      {children}\n    </Select>\n  );\n}\n\nexport default SelectSingle;\n","/* eslint-disable react/prop-types */\nimport React, { useEffect, useState } from 'react';\nimport {\n  Alert,\n  Button,\n  Form,\n  FormGroup,\n  Modal,\n  ModalVariant,\n  SelectOption,\n  TextInput,\n  Tile,\n  ToggleGroup,\n  ToggleGroupItem,\n} from '@patternfly/react-core';\n\nimport { regionOptions } from '../../utils/region';\nimport SelectSingle from '../../components/SelectSingle';\nimport useAnalytics from '../../hooks/useAnalytics';\n\nconst defaultFormValues = {\n  name: '',\n  cloud_provider: 'aws',\n  region: 'us-east-1',\n  availabilityZones: 'multi',\n  cloud_account_id: '',\n};\n\nfunction CreateInstanceModal({\n  isOpen,\n  onClose,\n  onRequestCreate,\n  cloudAccountIds,\n}) {\n  const [errorMessage, setErrorMessage] = useState(null);\n  const [formValues, setFormValues] = useState(defaultFormValues);\n  const [isRequestingCreate, setIsRequestingCreate] = useState(false);\n  const { analyticsTrack } = useAnalytics();\n\n  // default select a cloud account if there is only one available\n  // @TODO: Make a test for this\n  useEffect(() => {\n    if (formValues.cloud_account_id === '' && cloudAccountIds.length === 1) {\n      setFormValues((prevValues) => {\n        return { ...prevValues, cloud_account_id: cloudAccountIds[0] };\n      });\n    }\n  }, [cloudAccountIds]);\n\n  function onCloseHandler() {\n    // clear all state before closing\n    setErrorMessage(null);\n    setFormValues(defaultFormValues);\n    setIsRequestingCreate(false);\n    onClose();\n  }\n\n  async function onRequestCreateHandler() {\n    analyticsTrack('create-instance-form-submitted');\n    setIsRequestingCreate(true);\n    const result = await onRequestCreate(formValues);\n    setIsRequestingCreate(false);\n    if (result instanceof Error) {\n      const errorMessage = result.response.data.reason;\n      setErrorMessage(errorMessage);\n    } else {\n      setFormValues(defaultFormValues);\n      onClose();\n    }\n  }\n\n  function onChangeAvailabilityZones(isSelected, event) {\n    const { id } = event.currentTarget;\n    setFormValues((prevFormValues) => ({\n      ...prevFormValues,\n      availabilityZones: id,\n    }));\n  }\n\n  function onCloudRegionSelect(id, selection) {\n    setFormValues((prevFormValues) => ({\n      ...prevFormValues,\n      region: selection,\n    }));\n  }\n\n  function onChangeAWSAccountNumber(id, selection) {\n    setFormValues((prevFormValues) => ({\n      ...prevFormValues,\n      cloud_account_id: selection,\n    }));\n  }\n\n  function onNameChange(value) {\n    setFormValues((prevFormValues) => ({\n      ...prevFormValues,\n      name: value,\n    }));\n  }\n\n  return (\n    <Modal\n      variant={ModalVariant.small}\n      title=\"Create ACS instance\"\n      isOpen={isOpen}\n      onClose={onCloseHandler}\n      actions={[\n        <Button\n          key=\"createInstance\"\n          variant=\"primary\"\n          onClick={onRequestCreateHandler}\n          isLoading={isRequestingCreate}\n          isDisabled={isRequestingCreate || !formValues?.name}\n        >\n          Create instance\n        </Button>,\n        <Button\n          key=\"cancel\"\n          variant=\"link\"\n          onClick={onCloseHandler}\n          isDisabled={isRequestingCreate}\n        >\n          Cancel\n        </Button>,\n      ]}\n    >\n      {errorMessage && (\n        <div className=\"pf-u-mb-md\">\n          <Alert variant=\"danger\" title={errorMessage} />\n        </div>\n      )}\n      <Form>\n        <FormGroup\n          label=\"Name\"\n          isRequired\n          fieldId=\"name\"\n          helperText=\"Must start with a letter and end with a letter or number. Valid characters include lowercase letters from a to z, numbers from 0 to 9, and hyphens ( - ).\"\n        >\n          <TextInput\n            isRequired\n            type=\"text\"\n            id=\"name\"\n            name=\"name\"\n            value={formValues.name}\n            onChange={onNameChange}\n          />\n        </FormGroup>\n        <FormGroup label=\"Cloud provider\" isRequired fieldId=\"cloud_provider\">\n          <Tile\n            title=\"Amazon Web Services\"\n            isSelected={formValues.cloud_provider === 'aws'}\n          />\n        </FormGroup>\n        {cloudAccountIds.length > 1 && (\n          <FormGroup label=\"AWS account number\" fieldId=\"cloud_account_id\">\n            <SelectSingle\n              id=\"cloud_account_id\"\n              value={formValues.cloud_account_id}\n              handleSelect={onChangeAWSAccountNumber}\n              placeholderText=\"Select an AWS Account\"\n              menuAppendTo=\"parent\"\n            >\n              {cloudAccountIds.map((cloudAccountId) => {\n                return (\n                  <SelectOption key={cloudAccountId} value={cloudAccountId}>\n                    {cloudAccountId}\n                  </SelectOption>\n                );\n              })}\n            </SelectSingle>\n          </FormGroup>\n        )}\n        <FormGroup label=\"Cloud region\" isRequired fieldId=\"region\">\n          <SelectSingle\n            id=\"region\"\n            value={formValues.region}\n            handleSelect={onCloudRegionSelect}\n          >\n            {regionOptions.map((region) => {\n              return (\n                <SelectOption key={region.value} value={region.value}>\n                  {region.label}\n                </SelectOption>\n              );\n            })}\n          </SelectSingle>\n        </FormGroup>\n        <FormGroup\n          label=\"Availability zones\"\n          isRequired\n          fieldId=\"availabilityZones\"\n        >\n          <ToggleGroup aria-label=\"Availability Zones\">\n            <ToggleGroupItem\n              text=\"Single\"\n              buttonId=\"single\"\n              isSelected={formValues.availabilityZones === 'single'}\n              onChange={onChangeAvailabilityZones}\n              isDisabled\n            />\n            <ToggleGroupItem\n              text=\"Multi\"\n              buttonId=\"multi\"\n              isSelected={formValues.availabilityZones === 'multi'}\n              onChange={onChangeAvailabilityZones}\n            />\n          </ToggleGroup>\n        </FormGroup>\n      </Form>\n    </Modal>\n  );\n}\n\nexport default CreateInstanceModal;\n","/* eslint-disable react/prop-types */\nimport {\n  Alert,\n  AlertVariant,\n  Button,\n  Form,\n  FormGroup,\n  HelperText,\n  HelperTextItem,\n  Modal,\n  ModalVariant,\n  TextInput,\n} from '@patternfly/react-core';\nimport React, { useState } from 'react';\n\nimport useAnalytics from '../../hooks/useAnalytics';\n\nfunction DeleteInstanceModal({ isOpen, instance, onRequestDelete, onClose }) {\n  const [inputValue, setInputValue] = useState('');\n  const [isRequestingDelete, setIsRequestingDelete] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n  const { analyticsTrack } = useAnalytics();\n\n  async function onRequestDeleteHandler() {\n    setIsRequestingDelete(true);\n    setErrorMessage('');\n    analyticsTrack('delete-instance-form-submitted');\n    const result = await onRequestDelete(instance.id);\n    setIsRequestingDelete(false);\n    if (result.isAxiosError) {\n      setErrorMessage(\n        result.message ||\n          'An unanticapted error occurred. Please try again. If this error persists, please contact support.'\n      );\n    } else {\n      setInputValue('');\n      onClose();\n    }\n  }\n\n  function deleteInstanceOnSubmit(e) {\n    e.preventDefault();\n    if (inputMatchesInstanceName()) {\n      onRequestDeleteHandler();\n    }\n  }\n\n  function inputMatchesInstanceName() {\n    return instance.name === inputValue;\n  }\n\n  if (!instance) return null;\n\n  return (\n    <Modal\n      variant={ModalVariant.small}\n      title=\"Delete instance?\"\n      isOpen={isOpen}\n      onClose={onClose}\n      actions={[\n        <Button\n          key=\"createInstance\"\n          variant=\"danger\"\n          onClick={onRequestDeleteHandler}\n          isLoading={isRequestingDelete}\n          isDisabled={isRequestingDelete || !inputMatchesInstanceName()}\n        >\n          Delete instance\n        </Button>,\n        <Button\n          key=\"cancel\"\n          variant=\"link\"\n          onClick={onClose}\n          isDisabled={isRequestingDelete}\n        >\n          Cancel\n        </Button>,\n      ]}\n    >\n      <div className=\"pf-u-pb-md\">\n        <div>\n          This will permanently delete{' '}\n          <span className=\"pf-u-font-weight-bold\">{instance.name}</span>.\n        </div>\n        <div>This action cannot be undone.</div>\n      </div>\n      <Form onSubmit={deleteInstanceOnSubmit}>\n        <FormGroup\n          label=\"Confirmation\"\n          isRequired\n          fieldId=\"confirmationInstanceName\"\n        >\n          <TextInput\n            isRequired\n            type=\"text\"\n            id=\"confirmationInstanceName\"\n            name=\"confirmationInstanceName\"\n            value={inputValue}\n            onChange={setInputValue}\n          />\n        </FormGroup>\n        <HelperText>\n          <HelperTextItem>\n            Type <span className=\"pf-u-font-weight-bold\">{instance.name}</span>{' '}\n            to confirm.\n          </HelperTextItem>\n        </HelperText>\n        {errorMessage.length > 0 && (\n          <Alert isInline variant={AlertVariant.danger} title={errorMessage} />\n        )}\n      </Form>\n    </Modal>\n  );\n}\n\nexport default DeleteInstanceModal;\n","/* eslint-disable react/prop-types */\nimport {\n  Divider,\n  Drawer,\n  DrawerActions,\n  DrawerCloseButton,\n  DrawerContent,\n  DrawerContentBody,\n  DrawerHead,\n  DrawerPanelContent,\n  Text,\n  TextContent,\n  TextVariants,\n} from '@patternfly/react-core';\nimport React from 'react';\n\nimport InstanceDetailsList from '../../components/InstanceDetailsList';\n\nfunction InstanceDetailsDrawer({ isExpanded, onClose, instance, children }) {\n  return (\n    <Drawer isExpanded={isExpanded}>\n      <DrawerContent\n        panelContent={\n          <DrawerPanelContent>\n            <DrawerHead>\n              <div>\n                <TextContent>\n                  <Text component={TextVariants.small}>Name</Text>\n                </TextContent>\n                <TextContent>\n                  <Text component={TextVariants.h2}>{instance?.name}</Text>\n                </TextContent>\n              </div>\n              <DrawerActions>\n                <DrawerCloseButton onClick={onClose} />\n              </DrawerActions>\n            </DrawerHead>\n            <Divider component=\"div\" />\n            <DrawerContentBody>\n              {instance && <InstanceDetailsList instance={instance} />}\n            </DrawerContentBody>\n          </DrawerPanelContent>\n        }\n      >\n        {children}\n      </DrawerContent>\n    </Drawer>\n  );\n}\n\nexport default InstanceDetailsDrawer;\n","export const statuses = {\n  accepted: 'Request accepted',\n  preparing: 'Creation pending',\n  provisioning: 'Creation in progress',\n  ready: 'Ready',\n  failed: 'Failed',\n  deprovision: 'Deprovisioning',\n  deleting: 'Deleting',\n};\n\nexport const statusOptions = Object.keys(statuses).map((statusValue) => {\n  return {\n    value: statusValue,\n    label: statuses[statusValue],\n  };\n});\n\nexport function statusValueToLabel(statusValue) {\n  return statuses[statusValue];\n}\n\nexport function statusLabelToValue(statusLabel) {\n  const statusOption = statusOptions.find(\n    (statusOption) => statusOption.label === statusLabel\n  );\n  return statusOption?.value;\n}\n","/* eslint-disable react/prop-types */\nimport React from 'react';\nimport {\n  CheckCircleIcon,\n  ExclamationCircleIcon,\n  PendingIcon,\n} from '@patternfly/react-icons';\nimport { Flex, FlexItem, Spinner } from '@patternfly/react-core';\n\nimport { statuses } from '../utils/status';\n\nconst statusMessages = {\n  accepted: {\n    message: statuses.accepted,\n    component: <PendingIcon />,\n  },\n  preparing: {\n    message: statuses.preparing,\n    component: <PendingIcon />,\n  },\n  provisioning: {\n    message: statuses.provisioning,\n    component: <Spinner isSVG size=\"md\" />,\n  },\n  ready: {\n    message: statuses.ready,\n    component: <CheckCircleIcon className=\"pf-u-success-color-100\" />,\n  },\n  failed: {\n    message: statuses.failed,\n    component: <ExclamationCircleIcon className=\"pf-u-danger-color-100\" />,\n  },\n  deprovision: {\n    message: statuses.deprovision,\n    component: <Spinner isSVG size=\"md\" />,\n  },\n  deleting: {\n    message: statuses.deleting,\n    component: <Spinner isSVG size=\"md\" />,\n  },\n};\n\nfunction Status({ status }) {\n  const { message, component } = statusMessages[status] || {\n    message: 'N/A',\n    component: null,\n  };\n\n  return (\n    <Flex>\n      <FlexItem>{component}</FlexItem>\n      <FlexItem>{message}</FlexItem>\n    </Flex>\n  );\n}\n\nexport default Status;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Button,\n  InputGroup,\n  Select,\n  SelectOption,\n  SelectVariant,\n  TextInput,\n  ToolbarFilter,\n  ToolbarGroup,\n  ToolbarItem,\n  ToolbarToggleGroup,\n} from '@patternfly/react-core';\nimport { FilterIcon, SearchIcon } from '@patternfly/react-icons';\n\nimport { regionOptions } from '../../utils/region';\nimport { statusOptions } from '../../utils/status';\nimport SelectSingle from '../../components/SelectSingle';\n\nfunction InstancesToolbarSearchFilter({ filters, setFilters }) {\n  const [selectedFilter, setSelectedFilter] = useState('Name');\n  // local state for input values\n  const [inputName, setInputName] = useState('');\n  const [inputOwner, setInputOwner] = useState('');\n  // local state for Select isExpanded values\n  // @TODO: We can refactor the SelectSingle component to be more reusable for the usecase in this component as well. Then we don't need to keep this state here.\n  const [isRegionExpanded, setIsRegionExpanded] = useState(false);\n  const [isStatusExpanded, setIsStatusExpanded] = useState(false);\n\n  // TODO: Extract into separate utils file to be reused in other cases\n  function onDeleteChip(type = '', id = '') {\n    setFilters((prevFilters) => {\n      const newFilters = { ...prevFilters };\n      const newValue = newFilters[type.toLowerCase()].filter((s) => s !== id);\n      if (newValue?.length === 0) {\n        delete newFilters[type.toLowerCase()];\n      } else {\n        newFilters[type.toLowerCase()] = newValue;\n      }\n      return newFilters;\n    });\n  }\n\n  // TODO: Extract into separate utils file to be reused in other cases\n  function onDeleteChipGroup(type) {\n    setFilters((prevFilters) => {\n      const newFilters = { ...prevFilters };\n      delete newFilters[type.toLowerCase()];\n      return newFilters;\n    });\n  }\n\n  // TODO: Extract into separate utils file to be reused in other cases\n  function onSelect(type, event, selection) {\n    const checked = event.target.checked;\n    setFilters((prevFilters) => {\n      const newFilters = { ...prevFilters };\n      const prevSelections = prevFilters[type] || [];\n      const newValue = checked\n        ? [...prevSelections, selection]\n        : prevSelections.filter((value) => value !== selection);\n      if (newValue.length === 0) {\n        delete newFilters[type];\n      } else {\n        newFilters[type] = newValue;\n      }\n      return newFilters;\n    });\n  }\n\n  function onRegionSelect(event, selection) {\n    onSelect('region', event, selection);\n  }\n\n  function onStatusSelect(event, selection) {\n    onSelect('status', event, selection);\n  }\n\n  return (\n    <ToolbarToggleGroup toggleIcon={<FilterIcon />} breakpoint=\"xl\">\n      <ToolbarGroup variant=\"filter-group\">\n        <ToolbarItem>\n          <SelectSingle\n            id=\"region\"\n            value={selectedFilter}\n            handleSelect={(_, selection) => {\n              setSelectedFilter(selection);\n            }}\n          >\n            <SelectOption value=\"Name\">Name</SelectOption>\n            <SelectOption value=\"Region\">Region</SelectOption>\n            <SelectOption value=\"Owner\">Owner</SelectOption>\n            <SelectOption value=\"Status\">Status</SelectOption>\n          </SelectSingle>\n        </ToolbarItem>\n        <ToolbarFilter\n          chips={filters.name}\n          deleteChip={onDeleteChip}\n          deleteChipGroup={onDeleteChipGroup}\n          categoryName=\"Name\"\n          className={selectedFilter !== 'Name' && 'pf-u-hidden'}\n        >\n          <ToolbarItem>\n            <InputGroup>\n              <TextInput\n                id=\"filterName\"\n                type=\"text\"\n                aria-label=\"Name\"\n                placeholder=\"Filter by name\"\n                value={inputName}\n                onChange={(value) => setInputName(value)}\n              />\n              <Button\n                variant=\"control\"\n                aria-label=\"Search Name\"\n                onClick={() => {\n                  if (!inputName) return;\n                  setFilters((prevFilters) => {\n                    const newFilters = { ...prevFilters };\n                    newFilters.name = [inputName];\n                    return newFilters;\n                  });\n                }}\n              >\n                <SearchIcon />\n              </Button>\n            </InputGroup>\n          </ToolbarItem>\n        </ToolbarFilter>\n        <ToolbarFilter\n          chips={filters.region}\n          deleteChip={onDeleteChip}\n          deleteChipGroup={onDeleteChipGroup}\n          categoryName=\"Region\"\n          className={selectedFilter !== 'Region' && 'pf-u-hidden'}\n        >\n          <ToolbarItem>\n            <Select\n              variant={SelectVariant.checkbox}\n              aria-label=\"Region\"\n              onToggle={setIsRegionExpanded}\n              onSelect={onRegionSelect}\n              selections={filters.region}\n              isOpen={isRegionExpanded}\n              placeholderText=\"Filter by region\"\n            >\n              {regionOptions.map((regionOption) => {\n                return (\n                  <SelectOption\n                    key={regionOption.label}\n                    value={regionOption.label}\n                  >\n                    {regionOption.label}\n                  </SelectOption>\n                );\n              })}\n            </Select>\n          </ToolbarItem>\n        </ToolbarFilter>\n        <ToolbarFilter\n          chips={filters.owner}\n          deleteChip={onDeleteChip}\n          deleteChipGroup={onDeleteChipGroup}\n          categoryName=\"Owner\"\n          className={selectedFilter !== 'Owner' && 'pf-u-hidden'}\n        >\n          <ToolbarItem>\n            <InputGroup>\n              <TextInput\n                id=\"filterOwner\"\n                type=\"text\"\n                aria-label=\"Owner\"\n                placeholder=\"Filter by owner\"\n                value={inputOwner}\n                onChange={(value) => setInputOwner(value)}\n              />\n              <Button\n                variant=\"control\"\n                aria-label=\"Search Owner\"\n                onClick={() => {\n                  if (!inputOwner) return;\n                  setFilters((prevFilters) => {\n                    const newFilters = { ...prevFilters };\n                    newFilters.owner = [inputOwner];\n                    return newFilters;\n                  });\n                }}\n              >\n                <SearchIcon />\n              </Button>\n            </InputGroup>\n          </ToolbarItem>\n        </ToolbarFilter>\n        <ToolbarFilter\n          chips={filters.status}\n          deleteChip={onDeleteChip}\n          deleteChipGroup={onDeleteChipGroup}\n          categoryName=\"Status\"\n          className={selectedFilter !== 'Status' && 'pf-u-hidden'}\n        >\n          <ToolbarItem>\n            <Select\n              variant={SelectVariant.checkbox}\n              aria-label=\"Status\"\n              onToggle={setIsStatusExpanded}\n              onSelect={onStatusSelect}\n              selections={filters.status}\n              isOpen={isStatusExpanded}\n              placeholderText=\"Filter by status\"\n            >\n              {statusOptions.map((statusOption) => {\n                return (\n                  <SelectOption\n                    key={statusOption.label}\n                    value={statusOption.label}\n                  >\n                    {statusOption.label}\n                  </SelectOption>\n                );\n              })}\n            </Select>\n          </ToolbarItem>\n        </ToolbarFilter>\n      </ToolbarGroup>\n    </ToolbarToggleGroup>\n  );\n}\n\nInstancesToolbarSearchFilter.propTypes = {\n  filters: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    region: PropTypes.string.isRequired,\n    owner: PropTypes.string.isRequired,\n    status: PropTypes.string.isRequired,\n  }),\n  setFilters: PropTypes.func.isRequired,\n};\n\nexport default InstancesToolbarSearchFilter;\n","import { regionLabelToValue } from './region';\nimport { cloudProviderLabelToValue } from './cloudProvider';\nimport { statusLabelToValue } from './status';\n\nexport function filtersToSearchQuery(filters) {\n  const searchCategories = Object.keys(filters);\n  const queries =\n    searchCategories\n      .filter((searchCategory) => {\n        const searchValues = filters[searchCategory];\n        return searchValues.length;\n      })\n      .map((searchCategory) => {\n        const searchValues = filters[searchCategory];\n        const searchCategoryResult = searchValues\n          .map((searchValue) => {\n            // Use the value the API needs rather than the human readable UI value\n            let modifiedSearchValue = searchValue;\n            if (searchCategory === 'cloud_provider') {\n              modifiedSearchValue = cloudProviderLabelToValue(searchValue);\n            } else if (searchCategory === 'region') {\n              modifiedSearchValue = regionLabelToValue(searchValue);\n            } else if (searchCategory === 'status') {\n              modifiedSearchValue = statusLabelToValue(searchValue);\n            }\n            return `${searchCategory} = ${modifiedSearchValue}`;\n          })\n          .join(' or ');\n        return `(${searchCategoryResult})`;\n      })\n      .join(' and ') || '';\n  return queries;\n}\n","import React, { useEffect, useState } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport {\n  Bullseye,\n  Button,\n  Card,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStatePrimary,\n  EmptyStateVariant,\n  Pagination,\n  Spinner,\n  Title,\n  Toolbar,\n  ToolbarContent,\n  ToolbarItem,\n} from '@patternfly/react-core';\nimport {\n  ActionsColumn,\n  TableComposable,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from '@patternfly/react-table';\nimport { CubesIcon, SearchIcon } from '@patternfly/react-icons';\n\nimport usePagination from '../../hooks/usePagination';\nimport useInstances from '../../hooks/apis/useInstances';\nimport useCreateInstance from '../../hooks/apis/useCreateInstance';\nimport useDeleteInstance from '../../hooks/apis/useDeleteInstance';\nimport useCloudAccounts from '../../hooks/apis/useCloudAccounts';\nimport useAnalytics from '../../hooks/useAnalytics';\n\nimport CreateInstanceModal from './CreateInstanceModal';\nimport DeleteInstanceModal from './DeleteInstanceModal';\nimport InstanceDetailsDrawer from './InstanceDetailsDrawer';\nimport { getDateTimeDifference } from '../../utils/date';\nimport Status from '../../components/Status';\nimport InstancesToolbarSearchFilter from './InstancesToolbarSearchFilter';\nimport useTableSort from '../../hooks/useTableSort';\nimport { regionValueToLabel } from '../../utils/region';\nimport { cloudProviderValueToLabel } from '../../utils/cloudProvider';\nimport { filtersToSearchQuery } from '../../utils/searchQuery';\nimport { linkBasename, mergeToBasename } from '../../utils/paths';\n\nconst sortFields = [\n  'name',\n  'cloud_provider',\n  'region',\n  'owner',\n  'status',\n  'created_at',\n];\nconst defaultSortOption = {\n  field: 'name',\n  direction: 'asc',\n};\n\n/**\n * A smart component that handles all the api calls and data needed by the dumb components.\n * Smart components are usually classes.\n *\n * https://reactjs.org/docs/components-and-props.html\n * https://medium.com/@thejasonfile/dumb-components-and-smart-components-e7b33a698d43\n */\nfunction InstancesPage() {\n  const navigate = useNavigate();\n\n  const { analyticsTrack } = useAnalytics();\n  const { page, perPage, onSetPage, onPerPageSelect } = usePagination();\n  const { sortOption, getSortParams } = useTableSort({\n    sortFields,\n    defaultSortOption,\n  });\n  const [filters, setFilters] = useState({});\n\n  const { data: cloudAccountsData } = useCloudAccounts();\n  const cloudAccountIds =\n    cloudAccountsData?.cloudAccounts?.map(\n      (cloudAccount) => cloudAccount.cloudAccountId\n    ) || [];\n\n  const { data, isFetching } = useInstances({\n    query: {\n      page,\n      size: perPage,\n      orderBy: `${sortOption.field} ${sortOption.direction}`,\n      search: filtersToSearchQuery(filters),\n    },\n    // Refetch the data every 10 seconds\n    refetchInterval: 10000,\n  });\n\n  const createInstance = useCreateInstance();\n  const deleteInstance = useDeleteInstance();\n  const [creatingInstance, setCreatingInstance] = useState(null);\n  const [deletingInstance, setDeletingInstance] = useState(null);\n  const [viewingInstance, setViewingInstance] = useState(null);\n\n  const instances = data?.items || [];\n  const isTableLoading = isFetching && !data;\n  const totalInstances = data?.total ?? 0;\n\n  let content = null;\n\n  useEffect(() => {\n    insights?.chrome?.appAction?.('instances-page');\n  }, []);\n\n  function onRequestCreate(values) {\n    const response = createInstance.mutateAsync({\n      region: values.region,\n      cloud_provider: values.cloud_provider,\n      name: values.name,\n      multi_az: values.availabilityZones === 'multi',\n      cloud_account_id: values.cloud_account_id,\n    });\n    return response.catch((error) => {\n      return error;\n    });\n  }\n\n  function onCreateInstanceHandler() {\n    analyticsTrack('start-create-instance-form');\n    setCreatingInstance({});\n  }\n\n  function closeCreateInstanceModal() {\n    setCreatingInstance(null);\n  }\n\n  function onRequestDelete(instanceID) {\n    const response = deleteInstance.mutateAsync(instanceID);\n    return response.catch((error) => {\n      return error;\n    });\n  }\n\n  function closeDeleteInstanceModal() {\n    setDeletingInstance(null);\n  }\n\n  function closeInstanceDetailsDrawer() {\n    setViewingInstance(null);\n  }\n\n  function onClearFilters() {\n    setFilters({});\n  }\n\n  if (instances.length === 0 && Object.keys(filters).length === 0) {\n    content = (\n      <EmptyState>\n        <EmptyStateIcon icon={CubesIcon} />\n        <Title size=\"lg\" headingLevel=\"h4\">\n          No ACS instances.\n        </Title>\n        <EmptyStateBody>Create one to get started.</EmptyStateBody>\n        <EmptyStatePrimary>\n          <Button variant=\"primary\" onClick={() => onCreateInstanceHandler({})}>\n            Create ACS instance\n          </Button>\n        </EmptyStatePrimary>\n      </EmptyState>\n    );\n  } else {\n    content = (\n      <>\n        <Toolbar clearAllFilters={onClearFilters}>\n          <ToolbarContent>\n            <InstancesToolbarSearchFilter\n              filters={filters}\n              setFilters={setFilters}\n            />\n            <ToolbarItem>\n              <Button\n                variant=\"primary\"\n                onClick={() => onCreateInstanceHandler({})}\n              >\n                Create ACS instance\n              </Button>\n            </ToolbarItem>\n            {instances.length !== 0 && (\n              <ToolbarItem\n                variant=\"pagination\"\n                align={{ default: 'alignRight' }}\n              >\n                <Pagination\n                  itemCount={totalInstances}\n                  perPage={perPage}\n                  page={page}\n                  onSetPage={onSetPage}\n                  widgetId=\"acs-instances-top-pagination\"\n                  onPerPageSelect={onPerPageSelect}\n                  isCompact\n                />\n              </ToolbarItem>\n            )}\n          </ToolbarContent>\n        </Toolbar>\n        <TableComposable aria-label=\"ACS instances table\">\n          <Thead>\n            <Tr>\n              <Th sort={getSortParams('name')}>Name</Th>\n              <Th sort={getSortParams('cloud_provider')}>Cloud provider</Th>\n              <Th sort={getSortParams('region')}>Region</Th>\n              <Th sort={getSortParams('owner')}>Owner</Th>\n              <Th sort={getSortParams('status')}>Status</Th>\n              <Th sort={getSortParams('created_at')}>Time created</Th>\n              <Th />\n            </Tr>\n          </Thead>\n          <Tbody>\n            {isTableLoading && (\n              <Tr>\n                <Td colSpan={8}>\n                  <Bullseye>\n                    <Spinner />\n                  </Bullseye>\n                </Td>\n              </Tr>\n            )}\n            {!isTableLoading && instances.length === 0 && (\n              <Tr>\n                <Td colSpan={8}>\n                  <Bullseye>\n                    <EmptyState variant={EmptyStateVariant.small}>\n                      <EmptyStateIcon icon={SearchIcon} />\n                      <Title headingLevel=\"h2\" size=\"lg\">\n                        No results found\n                      </Title>\n                      <EmptyStateBody>\n                        Clear all filters and try again.\n                      </EmptyStateBody>\n                      <Button variant=\"link\" onClick={onClearFilters}>\n                        Clear all filters\n                      </Button>\n                    </EmptyState>\n                  </Bullseye>\n                </Td>\n              </Tr>\n            )}\n            {!isTableLoading &&\n              instances.length !== 0 &&\n              instances.map((instance) => {\n                const instanceDetailsURL = mergeToBasename(\n                  `/instances/instance/${instance.id}`,\n                  linkBasename\n                );\n                return (\n                  <Tr\n                    key={instance.name}\n                    onRowClick={(event) => {\n                      if (\n                        event.target.getAttribute('type') !== 'button' &&\n                        instance.status === 'ready'\n                      ) {\n                        setViewingInstance(instance);\n                      }\n                    }}\n                    isRowSelected={viewingInstance?.name === instance?.name}\n                  >\n                    <Td dataLabel=\"Name\">\n                      <Button\n                        variant=\"link\"\n                        isInline\n                        isDisabled={instance.status !== 'ready'}\n                        component={(props) => (\n                          <Link {...props} to={instanceDetailsURL} />\n                        )}\n                      >\n                        {instance.name}\n                      </Button>\n                    </Td>\n                    <Td dataLabel=\"Cloud provider\">\n                      {cloudProviderValueToLabel(instance.cloud_provider)}\n                    </Td>\n                    <Td dataLabel=\"Region\">\n                      {regionValueToLabel(instance.region)}\n                    </Td>\n                    <Td dataLabel=\"Owner\">{instance.owner}</Td>\n                    <Td dataLabel=\"Status\">\n                      <Status status={instance.status} />\n                    </Td>\n                    <Td dataLabel=\"Time created\">\n                      {getDateTimeDifference(instance.created_at)}\n                    </Td>\n                    <Td isActionCell>\n                      <ActionsColumn\n                        items={[\n                          {\n                            title: 'Details',\n                            onClick: (event) => {\n                              event.preventDefault();\n                              navigate(instanceDetailsURL);\n                            },\n                          },\n                          {\n                            title: 'Delete',\n                            onClick: (event) => {\n                              event.preventDefault();\n                              setDeletingInstance(instance);\n                            },\n                          },\n                        ]}\n                      />\n                    </Td>\n                  </Tr>\n                );\n              })}\n          </Tbody>\n        </TableComposable>\n        {instances.length !== 0 && (\n          <Toolbar>\n            <ToolbarContent>\n              <ToolbarItem\n                variant=\"pagination\"\n                align={{ default: 'alignRight' }}\n              >\n                <Pagination\n                  itemCount={totalInstances}\n                  perPage={perPage}\n                  page={page}\n                  onSetPage={onSetPage}\n                  widgetId=\"acs-instances-bottom-pagination\"\n                  onPerPageSelect={onPerPageSelect}\n                />\n              </ToolbarItem>\n            </ToolbarContent>\n          </Toolbar>\n        )}\n      </>\n    );\n  }\n\n  return (\n    <InstanceDetailsDrawer\n      isExpanded={!!viewingInstance}\n      instance={viewingInstance}\n      onClose={closeInstanceDetailsDrawer}\n    >\n      <PageHeader>\n        <PageHeaderTitle title=\"ACS Instances\" />\n      </PageHeader>\n      <Main>\n        <Card>{content}</Card>\n        <CreateInstanceModal\n          isOpen={!!creatingInstance}\n          onClose={closeCreateInstanceModal}\n          onRequestCreate={onRequestCreate}\n          cloudAccountIds={cloudAccountIds}\n        />\n        <DeleteInstanceModal\n          instance={deletingInstance}\n          isOpen={!!deletingInstance}\n          onClose={closeDeleteInstanceModal}\n          onRequestDelete={onRequestDelete}\n        />\n      </Main>\n    </InstanceDetailsDrawer>\n  );\n}\n\nexport default InstancesPage;\n","import { useState } from 'react';\n\nfunction usePagination() {\n  const [page, setPage] = useState(1);\n  const [perPage, setPerPage] = useState(20);\n\n  function onSetPage(_, newPage) {\n    setPage(newPage);\n  }\n\n  function onPerPageSelect(_, newPerPage) {\n    setPerPage(newPerPage);\n  }\n\n  return {\n    page,\n    perPage,\n    onSetPage,\n    onPerPageSelect,\n  };\n}\n\nexport default usePagination;\n","import { useEffect, useState } from 'react';\n\nfunction useTableSort({ sortFields, defaultSortOption }) {\n  const [sortOption, setSortOption] = useState();\n\n  const activeSortField = sortOption?.field || defaultSortOption.field;\n  const activeSortDirection =\n    sortOption?.direction || defaultSortOption.direction;\n\n  // we'll use this to map the sort fields to an id PatternFly can use internally\n  const [fieldToIdMap, setFieldToIdMap] = useState({});\n\n  // we'll construct a map of sort fields to ids that will make it easier to work with\n  // PatternFly\n  useEffect(() => {\n    const newFieldToIdMap = sortFields.reduce((acc, curr, index) => {\n      acc[curr] = index;\n      return acc;\n    }, {});\n    setFieldToIdMap(newFieldToIdMap);\n  }, [sortFields]);\n\n  function getSortParams(field) {\n    const fieldId = fieldToIdMap[field];\n    const activeSortId = activeSortField\n      ? fieldToIdMap[activeSortField]\n      : undefined;\n\n    return {\n      sortBy: {\n        index: activeSortId,\n        direction: activeSortDirection,\n        defaultDirection: 'desc',\n      },\n      onSort: (_event, _index, direction) => {\n        // modify the URL based on the new sort\n        const newSortOption = {\n          field,\n          direction,\n        };\n        setSortOption(newSortOption);\n      },\n      columnIndex: fieldId,\n    };\n  }\n\n  return {\n    sortOption: {\n      field: activeSortField,\n      direction: activeSortDirection,\n    },\n    getSortParams,\n  };\n}\n\nexport default useTableSort;\n","import axios from 'axios';\n\nconst API_URL = process?.env?.PROD\n  ? 'https://api.openshift.com'\n  : 'https://api.stage.openshift.com';\n\nexport const authInterceptor = (client) => {\n  client.interceptors.request.use(async (cfg) => {\n    await insights.chrome.auth.getUser();\n    const token = await insights.chrome.auth.getToken();\n    const BASE_URL = cfg.baseURL || API_URL;\n    const updatedCfg = { ...cfg, url: `${BASE_URL}${cfg.url}` };\n    if (token) {\n      updatedCfg.headers = {\n        ...updatedCfg.headers,\n        Authorization: `Bearer ${token}`,\n      };\n    }\n    delete updatedCfg.customHost;\n    return updatedCfg;\n  });\n  return client;\n};\n\nconst apiRequest = authInterceptor(axios.create());\n\nexport default apiRequest;\n","const cloudProviders = {\n  aws: 'Amazon Web Services',\n};\n\nconst cloudProvidersShortForm = {\n  aws: 'AWS',\n};\n\nexport const cloudProviderOptions = Object.keys(cloudProviders).map(\n  (cloudProviderValue) => {\n    return {\n      value: cloudProviderValue,\n      label: cloudProviders[cloudProviderValue],\n    };\n  }\n);\n\nexport function cloudProviderValueToLabel(cloudProviderValue) {\n  return cloudProvidersShortForm[cloudProviderValue]\n    ? `Hosted by Red Hat (on ${cloudProvidersShortForm[cloudProviderValue]})`\n    : 'Hosted by Red Hat';\n}\n\nexport function cloudProviderLabelToValue(cloudProviderLabel) {\n  const cloudProviderOption = cloudProviderOptions.find(\n    (cloudProviderOption) => cloudProviderOption.label === cloudProviderLabel\n  );\n  return cloudProviderOption?.value;\n}\n","import { format, formatDistance, parseISO } from 'date-fns';\n\nconst dateTimeFormat = 'MM/dd/yyyy | h:mm:ss a';\n\nexport function getDateTimeDifference(timestamp) {\n  return formatDistance(parseISO(timestamp), new Date(), {\n    addSuffix: true,\n  });\n}\n\nexport function getDateTime(timestamp) {\n  return format(parseISO(timestamp), dateTimeFormat);\n}\n","const regions = {\n  'us-east-1': 'US-East, N. Virginia',\n  'eu-west-1': 'Europe, Ireland',\n};\n\nexport const regionOptions = Object.keys(regions).map((regionValue) => {\n  return { value: regionValue, label: regions[regionValue] };\n});\n\nexport function regionValueToLabel(regionValue) {\n  return regions[regionValue];\n}\n\nexport function regionLabelToValue(regionLabel) {\n  const regionOption = regionOptions.find(\n    (regionOption) => regionOption.label === regionLabel\n  );\n  return regionOption?.value;\n}\n"],"names":["_ref","instance","React","DescriptionList","isHorizontal","DescriptionListGroup","DescriptionListTerm","DescriptionListDescription","cloudProviderValueToLabel","cloud_provider","regionValueToLabel","region","id","owner","getDateTime","created_at","updated_at","centralDataURL","centralUIURL","getInstances","_ref2","_asyncToGenerator","_regeneratorRuntime","_callee","queryString","_yield$apiRequest$get","data","_context","prev","next","searchObject","query","qs","encode","apiRequest","concat","sent","abrupt","stop","_x","apply","arguments","postInstance","postData","_yield$apiRequest$pos","deleteInstance","instanceID","_yield$apiRequest$del","useDeleteInstance","queryClient","useQueryClient","useMutation","onSuccess","invalidateQueries","getCloudAccounts","analytics","useChrome","analyticsTrack","event","localStorage","getItem","track","toggleIcon","value","handleSelect","_ref$isDisabled","isDisabled","children","_ref$direction","direction","_ref$isCreatable","isCreatable","_ref$variant","variant","_ref$placeholderText","placeholderText","_ref$menuAppendTo","menuAppendTo","undefined","_useState","useState","_useState2","_slicedToArray","isOpen","setIsOpen","isTypeahead","SelectVariant","Select","onSelect","_event","selection","onToggle","selections","toggleId","defaultFormValues","name","availabilityZones","cloud_account_id","onClose","onRequestCreate","cloudAccountIds","errorMessage","setErrorMessage","_useState3","_useState4","formValues","setFormValues","_useState5","_useState6","isRequestingCreate","setIsRequestingCreate","useAnalytics","onCloseHandler","_onRequestCreateHandler","result","_errorMessage","Error","response","reason","onChangeAvailabilityZones","isSelected","currentTarget","prevFormValues","_objectSpread","useEffect","length","prevValues","Modal","ModalVariant","title","actions","Button","key","onClick","isLoading","className","Alert","Form","FormGroup","label","isRequired","fieldId","helperText","TextInput","type","onChange","Tile","SelectSingle","map","cloudAccountId","SelectOption","regionOptions","ToggleGroup","ToggleGroupItem","text","buttonId","onRequestDelete","inputValue","setInputValue","isRequestingDelete","setIsRequestingDelete","onRequestDeleteHandler","_onRequestDeleteHandler","isAxiosError","message","inputMatchesInstanceName","onSubmit","e","preventDefault","HelperText","HelperTextItem","isInline","AlertVariant","isExpanded","Drawer","DrawerContent","panelContent","DrawerPanelContent","DrawerHead","TextContent","Text","component","TextVariants","DrawerActions","DrawerCloseButton","Divider","DrawerContentBody","InstanceDetailsList","statuses","accepted","preparing","provisioning","ready","failed","deprovision","deleting","statusOptions","Object","keys","statusValue","statusMessages","PendingIcon","Spinner","isSVG","size","CheckCircleIcon","ExclamationCircleIcon","status","Flex","FlexItem","InstancesToolbarSearchFilter","filters","setFilters","selectedFilter","setSelectedFilter","inputName","setInputName","inputOwner","setInputOwner","_useState7","_useState8","isRegionExpanded","setIsRegionExpanded","_useState9","_useState10","isStatusExpanded","setIsStatusExpanded","onDeleteChip","prevFilters","newFilters","newValue","toLowerCase","filter","s","onDeleteChipGroup","checked","target","prevSelections","_toConsumableArray","ToolbarToggleGroup","FilterIcon","breakpoint","ToolbarGroup","ToolbarItem","_","ToolbarFilter","chips","deleteChip","deleteChipGroup","categoryName","InputGroup","placeholder","SearchIcon","regionOption","statusOption","propTypes","PropTypes","filtersToSearchQuery","searchCategory","searchCategoryResult","searchValue","statusLabel","modifiedSearchValue","cloudProviderLabelToValue","regionLabelToValue","find","join","sortFields","defaultSortOption","field","_cloudAccountsData$cl","_data$total","options","refetchInterval","content","navigate","useNavigate","_usePagination","page","setPage","perPage","setPerPage","onSetPage","newPage","onPerPageSelect","newPerPage","usePagination","_useTableSort","sortOption","setSortOption","activeSortField","activeSortDirection","fieldToIdMap","setFieldToIdMap","newFieldToIdMap","reduce","acc","curr","index","getSortParams","sortBy","defaultDirection","onSort","_index","columnIndex","useTableSort","cloudAccountsData","useQuery","cloudAccounts","cloudAccount","_useInstances","orderBy","search","isFetching","createInstance","creatingInstance","setCreatingInstance","deletingInstance","setDeletingInstance","viewingInstance","setViewingInstance","instances","items","isTableLoading","totalInstances","total","onCreateInstanceHandler","onClearFilters","_insights","_insights$chrome","_insights$chrome$appA","insights","chrome","appAction","call","EmptyState","EmptyStateIcon","icon","CubesIcon","Title","headingLevel","EmptyStateBody","EmptyStatePrimary","Toolbar","clearAllFilters","ToolbarContent","align","default","Pagination","itemCount","widgetId","isCompact","TableComposable","Thead","Tr","Th","sort","Tbody","Td","colSpan","Bullseye","EmptyStateVariant","instanceDetailsURL","mergeToBasename","linkBasename","onRowClick","getAttribute","isRowSelected","dataLabel","props","Link","_extends","to","Status","getDateTimeDifference","isActionCell","ActionsColumn","InstanceDetailsDrawer","PageHeader","PageHeaderTitle","Main","Card","CreateInstanceModal","values","mutateAsync","multi_az","error","DeleteInstanceModal","client","API_URL","_process","process","_process$env","env","PROD","axios","interceptors","request","use","cfg","token","BASE_URL","updatedCfg","auth","getUser","getToken","baseURL","url","headers","Authorization","customHost","cloudProviders","aws","cloudProvidersShortForm","cloudProviderOptions","cloudProviderValue","cloudProviderLabel","cloudProviderOption","timestamp","formatDistance","parseISO","Date","addSuffix","format","regions","regionValue","regionLabel"],"sourceRoot":""}