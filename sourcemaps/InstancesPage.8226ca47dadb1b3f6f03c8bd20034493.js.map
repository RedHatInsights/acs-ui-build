{"version":3,"file":"js/InstancesPage.1658867830505.e6ec0b6a649fdad6908b.js","mappings":"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","sources":["webpack:///./src/components/BreadcrumbItemLink.js","webpack:///./src/hooks/apis/useInstance.js","webpack:///./src/routes/InstanceDetailsPage/InstanceDetailsPage.js","webpack:///./src/hooks/apis/useInstances.js","webpack:///./src/utils/queryString.js","webpack:///./src/hooks/apis/useCreateInstance.js","webpack:///./src/hooks/apis/useDeleteInstance.js","webpack:///./src/components/SelectSingle.js","webpack:///./src/routes/InstancesPage/CreateInstanceModal.js","webpack:///./src/routes/InstancesPage/DeleteInstanceModal.js","webpack:///./src/utils/date.js","webpack:///./src/routes/InstancesPage/InstanceDetailsDrawer.js","webpack:///./src/components/Status.js","webpack:///./src/routes/InstancesPage/InstancesToolbarSearchFilter.js","webpack:///./src/routes/InstancesPage/InstancesPage.js","webpack:///./src/hooks/usePagination.js","webpack:///./src/services/apiRequest.js"],"sourcesContent":["/* eslint-disable react/jsx-props-no-spreading */\n/* eslint-disable react/prop-types */\nimport React from 'react';\nimport { BreadcrumbItem } from '@patternfly/react-core';\nimport { Link } from 'react-router-dom';\n\nfunction BreadcrumbItemLink({ children, to, ...rest }) {\n  function render({ className, ariaCurrent }) {\n    return (\n      <Link className={className} aria-current={ariaCurrent} to={to}>\n        {children}\n      </Link>\n    );\n  }\n  return <BreadcrumbItem {...rest} render={render} />;\n}\n\nexport default BreadcrumbItemLink;\n","import { useQuery } from 'react-query';\n\nimport apiRequest from '../../services/apiRequest';\n\nconst getInstanceById = async (instanceId) => {\n  const { data } = await apiRequest.get(`/api/rhacs/v1/centrals/${instanceId}`);\n  return data;\n};\n\nexport default function useInstance(instanceId) {\n  return useQuery(['instance', instanceId], () => getInstanceById(instanceId));\n}\n","import React from 'react';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { useParams } from 'react-router-dom';\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  Bullseye,\n  Button,\n  ButtonVariant,\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardBody,\n  CardHeaderMain,\n  Flex,\n  FlexItem,\n  Grid,\n  GridItem,\n  List,\n  ListItem,\n  PageSection,\n  PageSectionVariants,\n  Spinner,\n  Title,\n  Text,\n  TextContent,\n} from '@patternfly/react-core';\nimport BreadcrumbItemLink from '../../components/BreadcrumbItemLink';\nimport useInstance from '../../hooks/apis/useInstance';\n\nfunction InstanceDetailsPage() {\n  const { instanceId } = useParams();\n  const { data: instance, isFetching } = useInstance(instanceId);\n\n  if (isFetching) {\n    return (\n      <Bullseye>\n        <Spinner />\n      </Bullseye>\n    );\n  }\n\n  return (\n    <div>\n      <PageHeader>\n        <Flex direction={{ default: 'column' }}>\n          <FlexItem>\n            <Breadcrumb>\n              <BreadcrumbItemLink to=\"/instances\">\n                ACS instances\n              </BreadcrumbItemLink>\n              <BreadcrumbItem isActive>{instance.name}</BreadcrumbItem>\n            </Breadcrumb>\n          </FlexItem>\n          <FlexItem>\n            <PageHeaderTitle title={instance.name} />\n          </FlexItem>\n        </Flex>\n      </PageHeader>\n      <Main className=\"pf-u-p-0 pf-m-fill pf-m-overflow-scroll\">\n        <PageSection>\n          <Card>\n            <CardHeader>\n              <CardHeaderMain>\n                <CardTitle>ACS Instance Access</CardTitle>\n              </CardHeaderMain>\n            </CardHeader>\n            <CardBody>\n              <p>Get started by signing in to your ACS instance.</p>\n            </CardBody>\n            <CardFooter>\n              <Button\n                variant={ButtonVariant.primary}\n                component=\"a\"\n                href=\"https://k8s.demo.stackrox.com/login\"\n                target=\"_blank\"\n              >\n                Sign in to ACS Instance\n              </Button>\n            </CardFooter>\n          </Card>\n        </PageSection>\n        <PageSection\n          variant={PageSectionVariants.light}\n          isFilled\n          hasOverflowScroll\n          isWidthLimited\n        >\n          <Title headingLevel=\"h2\">\n            Use Red Hat ACS to secure your clusters\n          </Title>\n          <Grid hasGutter>\n            <GridItem md={7}>\n              <Card className=\"marketing-video\">\n                <iframe\n                  src=\"https://www.youtube.com/embed/HhYYuGTa63E\"\n                  title=\"YouTube video player\"\n                  frameBorder=\"0\"\n                  allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n                  allowFullScreen\n                ></iframe>\n              </Card>\n            </GridItem>\n            <GridItem md={5} hasGutter>\n              <TextContent>\n                <Text>In this video, you’ll learn how to:</Text>\n              </TextContent>\n              <List>\n                <ListItem>Lorem ipsum dolor sit amet</ListItem>\n                <ListItem>You go back, Jack, do it again</ListItem>\n                <ListItem>Three is the magic number</ListItem>\n              </List>\n            </GridItem>\n          </Grid>\n        </PageSection>\n      </Main>\n    </div>\n  );\n}\n\nexport default InstanceDetailsPage;\n","import { useQuery } from 'react-query';\n\nimport apiRequest from '../../services/apiRequest';\nimport { getQueryString } from '../../utils/queryString';\n\nconst getInstances = async ({ query }) => {\n  const queryString = getQueryString(query);\n  const { data } = await apiRequest.get(\n    `/api/rhacs/v1/centrals?${queryString}`\n  );\n  return data;\n};\n\nexport default function useInstances(options) {\n  return useQuery(['instances', options], () => getInstances(options));\n}\n","import qs from 'qs';\n\nexport function getQueryObject(search) {\n  return qs.parse(search, { ignoreQueryPrefix: true });\n}\n\nexport function getQueryString(searchObject) {\n  return qs.stringify(searchObject, { encode: false });\n}\n","import { useMutation, useQueryClient } from 'react-query';\n\nimport apiRequest from '../../services/apiRequest';\n\nconst postInstance = async (postData) => {\n  const { data } = await apiRequest.post(\n    '/api/rhacs/v1/centrals?async=true',\n    postData\n  );\n  return data;\n};\n\nexport default function useCreateInstance() {\n  const queryClient = useQueryClient();\n  return useMutation(postInstance, {\n    onSuccess: () => {\n      // Invalidate and refetch\n      queryClient.invalidateQueries('instances');\n    },\n  });\n}\n","import { useMutation, useQueryClient } from 'react-query';\n\nimport apiRequest from '../../services/apiRequest';\n\nconst deleteInstance = async (instanceID) => {\n  const { data } = await apiRequest.delete(\n    `/api/rhacs/v1/centrals/${instanceID}?async=true`\n  );\n  return data;\n};\n\nexport default function useDeleteInstance() {\n  const queryClient = useQueryClient();\n  return useMutation(deleteInstance, {\n    onSuccess: () => {\n      // Invalidate and refetch\n      queryClient.invalidateQueries('instances');\n    },\n  });\n}\n","/* eslint-disable react/prop-types */\nimport React, { useState } from 'react';\nimport { Select, SelectVariant } from '@patternfly/react-core';\n\nfunction SelectSingle({\n  toggleIcon,\n  id,\n  value,\n  handleSelect,\n  isDisabled = false,\n  children,\n  direction = 'down',\n  isCreatable = false,\n  variant = null,\n  placeholderText = '',\n}) {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const isTypeahead =\n    variant === 'typeahead' ? SelectVariant.typeahead : SelectVariant.single;\n\n  function onSelect(_event, selection) {\n    // The mouse event is not useful.\n    setIsOpen(false);\n    handleSelect(id, selection);\n  }\n\n  return (\n    <Select\n      variant={isTypeahead}\n      toggleIcon={toggleIcon}\n      id={id}\n      isDisabled={isDisabled}\n      isOpen={isOpen}\n      onSelect={onSelect}\n      onToggle={setIsOpen}\n      selections={value}\n      direction={direction}\n      isCreatable={isCreatable}\n      placeholderText={placeholderText}\n      toggleId={id}\n    >\n      {children}\n    </Select>\n  );\n}\n\nexport default SelectSingle;\n","/* eslint-disable react/prop-types */\nimport {\n  Alert,\n  Button,\n  Form,\n  FormGroup,\n  Modal,\n  ModalVariant,\n  SelectOption,\n  TextInput,\n  Tile,\n  ToggleGroup,\n  ToggleGroupItem,\n} from '@patternfly/react-core';\nimport React, { useState } from 'react';\nimport SelectSingle from '../../components/SelectSingle';\n\nconst defaultFormValues = {\n  name: '',\n  cloud_provider: 'aws',\n  region: 'us-east-1',\n  availabilityZones: 'multi',\n};\n\nfunction CreateInstanceModal({ isOpen, onClose, onRequestCreate }) {\n  const [error, setError] = useState(null);\n  const [formValues, setFormValues] = useState(defaultFormValues);\n  const [isRequestingCreate, setIsRequestingCreate] = useState(false);\n\n  function onChangeAvailabilityZones(isSelected, event) {\n    const { id } = event.currentTarget;\n    setFormValues((prevFormValues) => ({\n      ...prevFormValues,\n      availabilityZones: id,\n    }));\n  }\n\n  function onCloudRegionSelect(id, selection) {\n    setFormValues((prevFormValues) => ({\n      ...prevFormValues,\n      region: selection,\n    }));\n  }\n\n  function onInputChange(value) {\n    setFormValues((prevFormValues) => ({\n      ...prevFormValues,\n      name: value,\n    }));\n  }\n\n  async function onRequestCreateHandler() {\n    setIsRequestingCreate(true);\n    const result = await onRequestCreate(formValues);\n    setIsRequestingCreate(false);\n    if (result instanceof Error) {\n      setError(result);\n    } else {\n      setFormValues(defaultFormValues);\n      onClose();\n    }\n  }\n\n  return (\n    <Modal\n      variant={ModalVariant.small}\n      title=\"Create ACS instance\"\n      isOpen={isOpen}\n      onClose={onClose}\n      actions={[\n        <Button\n          key=\"createInstance\"\n          variant=\"primary\"\n          onClick={onRequestCreateHandler}\n          isLoading={isRequestingCreate}\n          isDisabled={isRequestingCreate || !formValues?.name}\n        >\n          Create instance\n        </Button>,\n        <Button\n          key=\"cancel\"\n          variant=\"link\"\n          onClick={onClose}\n          isDisabled={isRequestingCreate}\n        >\n          Cancel\n        </Button>,\n      ]}\n    >\n      {error && (\n        <div className=\"pf-u-mb-md\">\n          <Alert variant=\"danger\" title={error.message} />\n        </div>\n      )}\n      <Form>\n        <FormGroup\n          label=\"Name\"\n          isRequired\n          fieldId=\"name\"\n          helperText=\"Must start with a letter and end with a letter or number. Valid characters include lowercase letters from a to z, numbers from 0 to 9, and hyphens ( - ).\"\n        >\n          <TextInput\n            isRequired\n            type=\"text\"\n            id=\"name\"\n            name=\"name\"\n            value={formValues.name}\n            onChange={onInputChange}\n          />\n        </FormGroup>\n        <FormGroup label=\"Cloud provider\" isRequired fieldId=\"cloud_provider\">\n          <Tile\n            title=\"Amazon Web Services\"\n            isSelected={formValues.cloud_provider === 'aws'}\n          />\n        </FormGroup>\n        <FormGroup label=\"Cloud region\" isRequired fieldId=\"region\">\n          <SelectSingle\n            id=\"region\"\n            value={formValues.region}\n            handleSelect={onCloudRegionSelect}\n          >\n            <SelectOption value=\"us-east-1\">US-East, N. Virginia</SelectOption>\n            <SelectOption value=\"eu-west-1\">EU-Ireland</SelectOption>\n          </SelectSingle>\n        </FormGroup>\n        <FormGroup\n          label=\"Availability zones\"\n          isRequired\n          fieldId=\"availabilityZones\"\n        >\n          <ToggleGroup aria-label=\"Availability Zones\">\n            <ToggleGroupItem\n              text=\"Single\"\n              buttonId=\"single\"\n              isSelected={formValues.availabilityZones === 'single'}\n              onChange={onChangeAvailabilityZones}\n              isDisabled\n            />\n            <ToggleGroupItem\n              text=\"Multi\"\n              buttonId=\"multi\"\n              isSelected={formValues.availabilityZones === 'multi'}\n              onChange={onChangeAvailabilityZones}\n            />\n          </ToggleGroup>\n        </FormGroup>\n      </Form>\n    </Modal>\n  );\n}\n\nexport default CreateInstanceModal;\n","/* eslint-disable react/prop-types */\nimport {\n  Button,\n  Form,\n  FormGroup,\n  HelperText,\n  HelperTextItem,\n  Modal,\n  ModalVariant,\n  TextInput,\n} from '@patternfly/react-core';\nimport React, { useState } from 'react';\n\nfunction DeleteInstanceModal({ isOpen, instance, onRequestDelete, onClose }) {\n  const [inputValue, setInputValue] = useState('');\n  const [isRequestingDelete, setIsRequestingDelete] = useState(false);\n\n  async function onRequestDeleteHandler() {\n    setIsRequestingDelete(true);\n    const result = await onRequestDelete(instance.id);\n    setIsRequestingDelete(false);\n    if (result.error) {\n      // Do something\n    } else {\n      setInputValue('');\n      onClose();\n    }\n  }\n\n  if (!instance) return null;\n\n  return (\n    <Modal\n      variant={ModalVariant.small}\n      title=\"Delete instance?\"\n      isOpen={isOpen}\n      onClose={onClose}\n      actions={[\n        <Button\n          key=\"createInstance\"\n          variant=\"danger\"\n          onClick={onRequestDeleteHandler}\n          isLoading={isRequestingDelete}\n          isDisabled={isRequestingDelete || instance.name !== inputValue}\n        >\n          Delete instance\n        </Button>,\n        <Button\n          key=\"cancel\"\n          variant=\"link\"\n          onClick={onClose}\n          isDisabled={isRequestingDelete}\n        >\n          Cancel\n        </Button>,\n      ]}\n    >\n      <div className=\"pf-u-pb-md\">\n        <div>\n          This will permanently delete{' '}\n          <span className=\"pf-u-font-weight-bold\">{instance.name}</span>.\n        </div>\n        <div>This action cannot be undone.</div>\n      </div>\n      <Form>\n        <FormGroup\n          label=\"Confirmation\"\n          isRequired\n          fieldId=\"confirmationInstanceName\"\n        >\n          <TextInput\n            isRequired\n            type=\"text\"\n            id=\"confirmationInstanceName\"\n            name=\"confirmationInstanceName\"\n            value={inputValue}\n            onChange={setInputValue}\n          />\n        </FormGroup>\n        <HelperText>\n          <HelperTextItem>\n            Type <span className=\"pf-u-font-weight-bold\">{instance.name}</span>{' '}\n            to confirm.\n          </HelperTextItem>\n        </HelperText>\n      </Form>\n    </Modal>\n  );\n}\n\nexport default DeleteInstanceModal;\n","import { format, parseISO } from 'date-fns';\n\nconst dateTimeFormat = 'MM/dd/yyyy | h:mm:ss a';\n\nexport function getDateTime(timestamp) {\n  return format(parseISO(timestamp), dateTimeFormat);\n}\n","/* eslint-disable react/prop-types */\nimport {\n  DescriptionList,\n  DescriptionListDescription,\n  DescriptionListGroup,\n  DescriptionListTerm,\n  Divider,\n  Drawer,\n  DrawerActions,\n  DrawerCloseButton,\n  DrawerContent,\n  DrawerContentBody,\n  DrawerHead,\n  DrawerPanelContent,\n  Text,\n  TextContent,\n  TextVariants,\n} from '@patternfly/react-core';\nimport React from 'react';\n\nimport { getDateTime } from '../../utils/date';\n\nfunction InstanceDetailsDrawer({ isExpanded, onClose, instance, children }) {\n  return (\n    <Drawer isExpanded={isExpanded}>\n      <DrawerContent\n        panelContent={\n          <DrawerPanelContent>\n            <DrawerHead>\n              <div>\n                <TextContent>\n                  <Text component={TextVariants.small}>Name</Text>\n                </TextContent>\n                <TextContent>\n                  <Text component={TextVariants.h1}>{instance?.name}</Text>\n                </TextContent>\n              </div>\n              <DrawerActions>\n                <DrawerCloseButton onClick={onClose} />\n              </DrawerActions>\n            </DrawerHead>\n            <Divider component=\"div\" />\n            <DrawerContentBody>\n              {instance && (\n                <DescriptionList isHorizontal>\n                  <DescriptionListGroup>\n                    <DescriptionListTerm>Cloud provider</DescriptionListTerm>\n                    <DescriptionListDescription>\n                      {instance.cloud_provider}\n                    </DescriptionListDescription>\n                  </DescriptionListGroup>\n                  <DescriptionListGroup>\n                    <DescriptionListTerm>Region</DescriptionListTerm>\n                    <DescriptionListDescription>\n                      {instance.region}\n                    </DescriptionListDescription>\n                  </DescriptionListGroup>\n                  <DescriptionListGroup>\n                    <DescriptionListTerm>ID</DescriptionListTerm>\n                    <DescriptionListDescription>\n                      {instance.id}\n                    </DescriptionListDescription>\n                  </DescriptionListGroup>\n                  <DescriptionListGroup>\n                    <DescriptionListTerm>Owner</DescriptionListTerm>\n                    <DescriptionListDescription>\n                      {instance.owner}\n                    </DescriptionListDescription>\n                  </DescriptionListGroup>\n                  <DescriptionListGroup>\n                    <DescriptionListTerm>Created</DescriptionListTerm>\n                    <DescriptionListDescription>\n                      {getDateTime(instance.created_at)}\n                    </DescriptionListDescription>\n                  </DescriptionListGroup>\n                  <DescriptionListGroup>\n                    <DescriptionListTerm>Updated</DescriptionListTerm>\n                    <DescriptionListDescription>\n                      {getDateTime(instance.updated_at)}\n                    </DescriptionListDescription>\n                  </DescriptionListGroup>\n                </DescriptionList>\n              )}\n            </DrawerContentBody>\n          </DrawerPanelContent>\n        }\n      >\n        {children}\n      </DrawerContent>\n    </Drawer>\n  );\n}\n\nexport default InstanceDetailsDrawer;\n","/* eslint-disable react/prop-types */\nimport React from 'react';\nimport {\n  CheckCircleIcon,\n  ExclamationCircleIcon,\n  PendingIcon,\n} from '@patternfly/react-icons';\nimport { Flex, FlexItem, Spinner } from '@patternfly/react-core';\n\nconst statusMessages = {\n  accepted: {\n    message: 'Request accepted',\n    component: <PendingIcon />,\n  },\n  preparing: {\n    message: 'Preparing instance',\n    component: <PendingIcon />,\n  },\n  provisioning: {\n    message: 'Creation in progress',\n    component: <Spinner isSVG size=\"md\" />,\n  },\n  ready: {\n    message: 'Ready',\n    component: <CheckCircleIcon className=\"pf-u-success-color-100\" />,\n  },\n  failed: {\n    message: 'Request failed',\n    component: <ExclamationCircleIcon className=\"pf-u-danger-color-100\" />,\n  },\n  deprovision: {\n    message: 'Deprovisioning instance',\n    component: <Spinner isSVG size=\"md\" />,\n  },\n  deleting: {\n    message: 'Deleting instance',\n    component: <Spinner isSVG size=\"md\" />,\n  },\n};\n\nfunction Status({ status }) {\n  const { message, component } = statusMessages[status] || {\n    message: 'N/A',\n    component: null,\n  };\n\n  return (\n    <Flex>\n      <FlexItem>{component}</FlexItem>\n      <FlexItem>{message}</FlexItem>\n    </Flex>\n  );\n}\n\nexport default Status;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  ToolbarToggleGroup,\n  ToolbarGroup,\n  ToolbarFilter,\n  SelectVariant,\n  SelectOption,\n  Select,\n  ToolbarItem,\n  InputGroup,\n  TextInput,\n  Button,\n} from '@patternfly/react-core';\nimport { FilterIcon, SearchIcon } from '@patternfly/react-icons';\nimport SelectSingle from '../../components/SelectSingle';\n\nfunction InstancesToolbarSearchFilter({ filters, setFilters }) {\n  const [selectedFilter, setSelectedFilter] = useState('Name');\n  // local state for input values\n  const [inputName, setInputName] = useState('');\n  const [inputOwner, setInputOwner] = useState('');\n  // local state for Select isExpanded values\n  // @TODO: We can refactor the SelectSingle component to be more reusable for the usecase in this component as well. Then we don't need to keep this state here.\n  const [isRegionExpanded, setIsRegionExpanded] = useState(false);\n  const [isStatusExpanded, setIsStatusExpanded] = useState(false);\n\n  // TODO: Extract into separate utils file to be reused in other cases\n  function onDeleteChip(type = '', id = '') {\n    setFilters((prevFilters) => {\n      const newFilters = { ...prevFilters };\n      newFilters[type.toLowerCase()] = newFilters[type.toLowerCase()].filter(\n        (s) => s !== id\n      );\n      return newFilters;\n    });\n  }\n\n  // TODO: Extract into separate utils file to be reused in other cases\n  function onDeleteChipGroup(type) {\n    setFilters((prevFilters) => {\n      const newFilters = { ...prevFilters };\n      newFilters[type.toLowerCase()] = [];\n      return newFilters;\n    });\n  }\n\n  // TODO: Extract into separate utils file to be reused in other cases\n  function onSelect(type, event, selection) {\n    const checked = event.target.checked;\n    setFilters((prevFilters) => {\n      const prevSelections = prevFilters[type] || [];\n      return {\n        ...prevFilters,\n        [type]: checked\n          ? [...prevSelections, selection]\n          : prevSelections.filter((value) => value !== selection),\n      };\n    });\n  }\n\n  function onRegionSelect(event, selection) {\n    onSelect('region', event, selection);\n  }\n\n  function onStatusSelect(event, selection) {\n    onSelect('status', event, selection);\n  }\n\n  return (\n    <ToolbarToggleGroup toggleIcon={<FilterIcon />} breakpoint=\"xl\">\n      <ToolbarGroup variant=\"filter-group\">\n        <ToolbarItem>\n          <SelectSingle\n            id=\"region\"\n            value={selectedFilter}\n            handleSelect={(_, selection) => {\n              setSelectedFilter(selection);\n            }}\n          >\n            <SelectOption value=\"Name\">Name</SelectOption>\n            <SelectOption value=\"Region\">Region</SelectOption>\n            <SelectOption value=\"Owner\">Owner</SelectOption>\n            <SelectOption value=\"Status\">Status</SelectOption>\n          </SelectSingle>\n        </ToolbarItem>\n        <ToolbarFilter\n          chips={filters.name}\n          deleteChip={onDeleteChip}\n          deleteChipGroup={onDeleteChipGroup}\n          categoryName=\"Name\"\n          className={selectedFilter !== 'Name' && 'pf-u-hidden'}\n        >\n          <ToolbarItem>\n            <InputGroup>\n              <TextInput\n                id=\"filterName\"\n                type=\"text\"\n                aria-label=\"Name\"\n                placeholder=\"Filter by name\"\n                value={inputName}\n                onChange={(value) => setInputName(value)}\n              />\n              <Button\n                variant=\"control\"\n                aria-label=\"Search Name\"\n                onClick={() => {\n                  if (!inputName) return;\n                  setFilters((prevFilters) => {\n                    const newFilters = { ...prevFilters };\n                    newFilters.name = [inputName];\n                    console.log(newFilters);\n                    return newFilters;\n                  });\n                }}\n              >\n                <SearchIcon />\n              </Button>\n            </InputGroup>\n          </ToolbarItem>\n        </ToolbarFilter>\n        <ToolbarFilter\n          chips={filters.region}\n          deleteChip={onDeleteChip}\n          deleteChipGroup={onDeleteChipGroup}\n          categoryName=\"Region\"\n          className={selectedFilter !== 'Region' && 'pf-u-hidden'}\n        >\n          <ToolbarItem>\n            <Select\n              variant={SelectVariant.checkbox}\n              aria-label=\"Region\"\n              onToggle={setIsRegionExpanded}\n              onSelect={onRegionSelect}\n              selections={filters.region}\n              isOpen={isRegionExpanded}\n              placeholderText=\"Filter by region\"\n            >\n              <SelectOption value=\"US-East, N. Virginia\">\n                US-East, N. Virginia\n              </SelectOption>\n              <SelectOption value=\"EU-Ireland\">EU-Ireland</SelectOption>\n            </Select>\n          </ToolbarItem>\n        </ToolbarFilter>\n        <ToolbarFilter\n          chips={filters.owner}\n          deleteChip={onDeleteChip}\n          deleteChipGroup={onDeleteChipGroup}\n          categoryName=\"Owner\"\n          className={selectedFilter !== 'Owner' && 'pf-u-hidden'}\n        >\n          <ToolbarItem>\n            <InputGroup>\n              <TextInput\n                id=\"filterOwner\"\n                type=\"text\"\n                aria-label=\"Owner\"\n                placeholder=\"Filter by owner\"\n                value={inputOwner}\n                onChange={(value) => setInputOwner(value)}\n              />\n              <Button\n                variant=\"control\"\n                aria-label=\"Search Owner\"\n                onClick={() => {\n                  if (!inputOwner) return;\n                  setFilters((prevFilters) => {\n                    const newFilters = { ...prevFilters };\n                    newFilters.owner = [inputOwner];\n                    return newFilters;\n                  });\n                }}\n              >\n                <SearchIcon />\n              </Button>\n            </InputGroup>\n          </ToolbarItem>\n        </ToolbarFilter>\n        <ToolbarFilter\n          chips={filters.status}\n          deleteChip={onDeleteChip}\n          deleteChipGroup={onDeleteChipGroup}\n          categoryName=\"Status\"\n          className={selectedFilter !== 'Status' && 'pf-u-hidden'}\n        >\n          <ToolbarItem>\n            <Select\n              variant={SelectVariant.checkbox}\n              aria-label=\"Status\"\n              onToggle={setIsStatusExpanded}\n              onSelect={onStatusSelect}\n              selections={filters.status}\n              isOpen={isStatusExpanded}\n              placeholderText=\"Filter by status\"\n            >\n              <SelectOption value=\"Ready\">Ready</SelectOption>\n              <SelectOption value=\"Failed\">Failed</SelectOption>\n              <SelectOption value=\"Creation pending\">\n                Creation pending\n              </SelectOption>\n              <SelectOption value=\"Creation in progress\">\n                Creation in progress\n              </SelectOption>\n              <SelectOption value=\"Deleting\">Deleting</SelectOption>\n            </Select>\n          </ToolbarItem>\n        </ToolbarFilter>\n      </ToolbarGroup>\n    </ToolbarToggleGroup>\n  );\n}\n\nInstancesToolbarSearchFilter.propTypes = {\n  filters: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    region: PropTypes.string.isRequired,\n    owner: PropTypes.string.isRequired,\n    status: PropTypes.string.isRequired,\n  }),\n  setFilters: PropTypes.func.isRequired,\n};\n\nexport default InstancesToolbarSearchFilter;\n","import React, { useEffect, useState } from 'react';\nimport { Link, withRouter, useHistory } from 'react-router-dom';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport {\n  EmptyState,\n  EmptyStateIcon,\n  Title,\n  EmptyStateBody,\n  EmptyStatePrimary,\n  Button,\n  Card,\n  Toolbar,\n  ToolbarContent,\n  ToolbarItem,\n  Pagination,\n  Bullseye,\n  Spinner,\n} from '@patternfly/react-core';\nimport {\n  ActionsColumn,\n  TableComposable,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from '@patternfly/react-table';\nimport { CubesIcon } from '@patternfly/react-icons';\n\nimport usePagination from '../../hooks/usePagination';\nimport useInstances from '../../hooks/apis/useInstances';\nimport useCreateInstance from '../../hooks/apis/useCreateInstance';\nimport useDeleteInstance from '../../hooks/apis/useDeleteInstance';\n\nimport CreateInstanceModal from './CreateInstanceModal';\nimport DeleteInstanceModal from './DeleteInstanceModal';\nimport InstanceDetailsDrawer from './InstanceDetailsDrawer';\nimport { getDateTime } from '../../utils/date';\nimport Status from '../../components/Status';\nimport InstancesToolbarSearchFilter from './InstancesToolbarSearchFilter';\n\n/**\n * A smart component that handles all the api calls and data needed by the dumb components.\n * Smart components are usually classes.\n *\n * https://reactjs.org/docs/components-and-props.html\n * https://medium.com/@thejasonfile/dumb-components-and-smart-components-e7b33a698d43\n */\nfunction InstancesPage() {\n  const history = useHistory();\n  const { page, perPage, onSetPage, onPerPageSelect } = usePagination();\n  const [filters, setFilters] = useState({});\n  const { data, isFetching } = useInstances({ query: { page, size: perPage } });\n  const createInstance = useCreateInstance();\n  const deleteInstance = useDeleteInstance();\n  const [creatingInstance, setCreatingInstance] = useState(null);\n  const [deletingInstance, setDeletingInstance] = useState(null);\n  const [viewingInstance, setViewingInstance] = useState(null);\n\n  const instances = data?.items || [];\n\n  useEffect(() => {\n    insights?.chrome?.appAction?.('sample-page');\n  }, []);\n\n  function onRequestCreate(values) {\n    const response = createInstance.mutateAsync({\n      region: values.region,\n      cloud_provider: values.cloud_provider,\n      name: values.name,\n      multi_az: values.availabilityZones === 'multi',\n    });\n    return response.catch((error) => {\n      return error;\n    });\n  }\n\n  function closeCreateInstanceModal() {\n    setCreatingInstance(null);\n  }\n\n  function onRequestDelete(instanceID) {\n    const response = deleteInstance.mutateAsync(instanceID);\n    return response.catch((error) => {\n      return error;\n    });\n  }\n\n  function closeDeleteInstanceModal() {\n    setDeletingInstance(null);\n  }\n\n  function closeInstanceDetailsDrawer() {\n    setViewingInstance(null);\n  }\n\n  function onClearFilters() {\n    setFilters({});\n  }\n\n  if (isFetching) {\n    return (\n      <Bullseye>\n        <Spinner />\n      </Bullseye>\n    );\n  }\n\n  return (\n    <InstanceDetailsDrawer\n      isExpanded={!!viewingInstance}\n      instance={viewingInstance}\n      onClose={closeInstanceDetailsDrawer}\n    >\n      <PageHeader>\n        <PageHeaderTitle title=\"ACS Instances\" />\n      </PageHeader>\n      <Main>\n        <Card>\n          {instances?.length === 0 ? (\n            <EmptyState>\n              <EmptyStateIcon icon={CubesIcon} />\n              <Title size=\"lg\" headingLevel=\"h4\">\n                No ACS instances.\n              </Title>\n              <EmptyStateBody>Create one to get started.</EmptyStateBody>\n              <EmptyStatePrimary>\n                <Button\n                  variant=\"primary\"\n                  onClick={() => setCreatingInstance({})}\n                >\n                  Create ACS instance\n                </Button>\n              </EmptyStatePrimary>\n            </EmptyState>\n          ) : (\n            <>\n              <Toolbar clearAllFilters={onClearFilters}>\n                <ToolbarContent>\n                  <InstancesToolbarSearchFilter\n                    filters={filters}\n                    setFilters={setFilters}\n                  />\n                  <ToolbarItem>\n                    <Button\n                      variant=\"primary\"\n                      onClick={() => setCreatingInstance({})}\n                    >\n                      Create ACS instance\n                    </Button>\n                  </ToolbarItem>\n                  <ToolbarItem\n                    variant=\"pagination\"\n                    align={{ default: 'alignRight' }}\n                  >\n                    <Pagination\n                      itemCount={instances.length}\n                      perPage={perPage}\n                      page={page}\n                      onSetPage={onSetPage}\n                      widgetId=\"acs-instances-top-pagination\"\n                      onPerPageSelect={onPerPageSelect}\n                      isCompact\n                    />\n                  </ToolbarItem>\n                </ToolbarContent>\n              </Toolbar>\n              <TableComposable aria-label=\"ACS instances table\">\n                <Thead>\n                  <Tr>\n                    <Th>Name</Th>\n                    <Th>Cloud Provider</Th>\n                    <Th>Region</Th>\n                    <Th>Owner</Th>\n                    <Th>Status</Th>\n                    <Th>Time Created</Th>\n                    <Th />\n                  </Tr>\n                </Thead>\n                <Tbody>\n                  {instances.map((instance) => (\n                    <Tr\n                      key={instance.name}\n                      onRowClick={(event) => {\n                        if (event.target.getAttribute('type') !== 'button') {\n                          setViewingInstance(instance);\n                        }\n                      }}\n                      isRowSelected={viewingInstance?.name === instance?.name}\n                    >\n                      <Td dataLabel=\"Name\">\n                        <Link to={`/instances/instance/${instance.id}`}>\n                          {instance.name}\n                        </Link>\n                      </Td>\n                      <Td dataLabel=\"Cloud Provider\">\n                        {instance.cloud_provider}\n                      </Td>\n                      <Td dataLabel=\"Region\">{instance.region}</Td>\n                      <Td dataLabel=\"Owner\">{instance.owner}</Td>\n                      <Td dataLabel=\"Status\">\n                        <Status status={instance.status} />\n                      </Td>\n                      <Td dataLabel=\"Time Created<\">\n                        {getDateTime(instance.created_at)}\n                      </Td>\n                      <Td isActionCell>\n                        <ActionsColumn\n                          items={[\n                            {\n                              title: 'Details',\n                              onClick: (event) => {\n                                event.preventDefault();\n                                history.push(\n                                  `/instances/instance/${instance.id}`\n                                );\n                              },\n                            },\n                            {\n                              title: 'Delete',\n                              onClick: (event) => {\n                                event.preventDefault();\n                                setDeletingInstance(instance);\n                              },\n                            },\n                          ]}\n                        />\n                      </Td>\n                    </Tr>\n                  ))}\n                </Tbody>\n              </TableComposable>\n              <Toolbar>\n                <ToolbarContent>\n                  <ToolbarItem\n                    variant=\"pagination\"\n                    align={{ default: 'alignRight' }}\n                  >\n                    <Pagination\n                      itemCount={instances.length}\n                      perPage={perPage}\n                      page={page}\n                      onSetPage={onSetPage}\n                      widgetId=\"acs-instances-top-pagination\"\n                      onPerPageSelect={onPerPageSelect}\n                    />\n                  </ToolbarItem>\n                </ToolbarContent>\n              </Toolbar>\n            </>\n          )}\n        </Card>\n        <CreateInstanceModal\n          isOpen={!!creatingInstance}\n          onClose={closeCreateInstanceModal}\n          onRequestCreate={onRequestCreate}\n        />\n        <DeleteInstanceModal\n          instance={deletingInstance}\n          isOpen={!!deletingInstance}\n          onClose={closeDeleteInstanceModal}\n          onRequestDelete={onRequestDelete}\n        />\n      </Main>\n    </InstanceDetailsDrawer>\n  );\n}\n\nexport default withRouter(InstancesPage);\n","import { useState } from 'react';\n\nfunction usePagination() {\n  const [page, setPage] = useState(1);\n  const [perPage, setPerPage] = useState(20);\n\n  function onSetPage(_, newPage) {\n    setPage(newPage);\n  }\n\n  function onPerPageSelect(_, newPerPage) {\n    setPerPage(newPerPage);\n  }\n\n  return {\n    page,\n    perPage,\n    onSetPage,\n    onPerPageSelect,\n  };\n}\n\nexport default usePagination;\n","import axios from 'axios';\n\nexport const authInterceptor = (client) => {\n  client.interceptors.request.use(async (cfg) => {\n    await insights.chrome.auth.getUser();\n    const token = await insights.chrome.auth.getToken();\n    const BASE_URL = cfg.baseURL || '';\n    const updatedCfg = { ...cfg, url: `${BASE_URL}${cfg.url}` };\n    if (token) {\n      updatedCfg.headers = {\n        ...updatedCfg.headers,\n        Authorization: `Bearer ${token}`,\n      };\n    }\n    delete updatedCfg.customHost;\n    return updatedCfg;\n  });\n  return client;\n};\n\nconst apiRequest = authInterceptor(axios.create());\n\nexport default apiRequest;\n"],"names":["children","to","rest","BreadcrumbItem","render","className","ariaCurrent","Link","getInstanceById","instanceId","apiRequest","data","useParams","useQuery","instance","isFetching","Bullseye","Spinner","PageHeader","Flex","direction","default","FlexItem","Breadcrumb","isActive","name","PageHeaderTitle","title","Main","PageSection","Card","CardHeader","CardHeaderMain","CardTitle","CardBody","CardFooter","Button","variant","ButtonVariant","component","href","target","PageSectionVariants","isFilled","hasOverflowScroll","isWidthLimited","Title","headingLevel","Grid","hasGutter","GridItem","md","src","frameBorder","allow","allowFullScreen","TextContent","Text","List","ListItem","getInstances","searchObject","query","queryString","qs","encode","postInstance","postData","deleteInstance","instanceID","useDeleteInstance","queryClient","useQueryClient","useMutation","onSuccess","invalidateQueries","toggleIcon","id","value","handleSelect","isDisabled","isCreatable","placeholderText","useState","isOpen","setIsOpen","isTypeahead","SelectVariant","Select","onSelect","_event","selection","onToggle","selections","toggleId","defaultFormValues","cloud_provider","region","availabilityZones","onClose","onRequestCreate","error","setError","formValues","setFormValues","isRequestingCreate","setIsRequestingCreate","onChangeAvailabilityZones","isSelected","event","currentTarget","prevFormValues","result","Error","Modal","ModalVariant","actions","key","onClick","isLoading","Alert","message","Form","FormGroup","label","isRequired","fieldId","helperText","TextInput","type","onChange","Tile","SelectOption","ToggleGroup","ToggleGroupItem","text","buttonId","onRequestDelete","inputValue","setInputValue","isRequestingDelete","setIsRequestingDelete","HelperText","HelperTextItem","getDateTime","timestamp","format","parseISO","isExpanded","Drawer","DrawerContent","panelContent","DrawerPanelContent","DrawerHead","TextVariants","DrawerActions","DrawerCloseButton","Divider","DrawerContentBody","DescriptionList","isHorizontal","DescriptionListGroup","DescriptionListTerm","DescriptionListDescription","owner","created_at","updated_at","statusMessages","accepted","preparing","provisioning","isSVG","size","ready","failed","deprovision","deleting","status","InstancesToolbarSearchFilter","filters","setFilters","selectedFilter","setSelectedFilter","inputName","setInputName","inputOwner","setInputOwner","isRegionExpanded","setIsRegionExpanded","isStatusExpanded","setIsStatusExpanded","onDeleteChip","prevFilters","newFilters","toLowerCase","filter","s","onDeleteChipGroup","checked","prevSelections","ToolbarToggleGroup","breakpoint","ToolbarGroup","ToolbarItem","_","ToolbarFilter","chips","deleteChip","deleteChipGroup","categoryName","InputGroup","placeholder","console","log","propTypes","PropTypes","withRouter","options","history","useHistory","page","setPage","perPage","setPerPage","onSetPage","newPage","onPerPageSelect","newPerPage","usePagination","createInstance","creatingInstance","setCreatingInstance","deletingInstance","setDeletingInstance","viewingInstance","setViewingInstance","instances","items","useEffect","insights","chrome","appAction","length","EmptyState","EmptyStateIcon","icon","CubesIcon","EmptyStateBody","EmptyStatePrimary","Toolbar","clearAllFilters","ToolbarContent","align","Pagination","itemCount","widgetId","isCompact","TableComposable","Thead","Tr","Th","Tbody","map","onRowClick","getAttribute","isRowSelected","Td","dataLabel","isActionCell","ActionsColumn","preventDefault","push","values","mutateAsync","multi_az","client","axios","interceptors","request","use","cfg","auth","getUser","getToken","token","BASE_URL","baseURL","updatedCfg","url","headers","Authorization","customHost"],"sourceRoot":""}