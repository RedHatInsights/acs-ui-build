{"version":3,"file":"js/InstancesPage.1661296909364.36c5ad34b4d8378629ff.js","mappings":"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","sources":["webpack:///./src/components/BreadcrumbItemLink.js","webpack:///./src/hooks/apis/useInstance.js","webpack:///./src/routes/InstanceDetailsPage/InstanceDetailsPage.js","webpack:///./src/hooks/apis/useInstances.js","webpack:///./src/utils/queryString.js","webpack:///./src/hooks/apis/useCreateInstance.js","webpack:///./src/hooks/apis/useDeleteInstance.js","webpack:///./src/utils/region.js","webpack:///./src/components/SelectSingle.js","webpack:///./src/routes/InstancesPage/CreateInstanceModal.js","webpack:///./src/routes/InstancesPage/DeleteInstanceModal.js","webpack:///./src/utils/date.js","webpack:///./src/utils/cloudProvider.js","webpack:///./src/routes/InstancesPage/InstanceDetailsDrawer.js","webpack:///./src/utils/status.js","webpack:///./src/components/Status.js","webpack:///./src/routes/InstancesPage/InstancesToolbarSearchFilter.js","webpack:///./src/utils/searchQuery.js","webpack:///./src/routes/InstancesPage/InstancesPage.js","webpack:///./src/hooks/usePagination.js","webpack:///./src/hooks/useTableSort.js","webpack:///./src/services/apiRequest.js"],"sourcesContent":["/* eslint-disable react/jsx-props-no-spreading */\n/* eslint-disable react/prop-types */\nimport React from 'react';\nimport { BreadcrumbItem } from '@patternfly/react-core';\nimport { Link } from 'react-router-dom';\n\nfunction BreadcrumbItemLink({ children, to, ...rest }) {\n  function render({ className, ariaCurrent }) {\n    return (\n      <Link className={className} aria-current={ariaCurrent} to={to}>\n        {children}\n      </Link>\n    );\n  }\n  return <BreadcrumbItem {...rest} render={render} />;\n}\n\nexport default BreadcrumbItemLink;\n","import { useQuery } from 'react-query';\n\nimport apiRequest from '../../services/apiRequest';\n\nconst getInstanceById = async (instanceId) => {\n  const { data } = await apiRequest.get(`/api/rhacs/v1/centrals/${instanceId}`);\n  return data;\n};\n\nexport default function useInstance(instanceId) {\n  return useQuery(['instance', instanceId], () => getInstanceById(instanceId));\n}\n","import React from 'react';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { useParams } from 'react-router-dom';\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  Bullseye,\n  Button,\n  ButtonVariant,\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardBody,\n  CardHeaderMain,\n  Flex,\n  FlexItem,\n  Grid,\n  GridItem,\n  List,\n  ListItem,\n  PageSection,\n  PageSectionVariants,\n  Spinner,\n  Title,\n  Text,\n  TextContent,\n} from '@patternfly/react-core';\nimport BreadcrumbItemLink from '../../components/BreadcrumbItemLink';\nimport useInstance from '../../hooks/apis/useInstance';\n\nfunction InstanceDetailsPage() {\n  const { instanceId } = useParams();\n  const { data: instance, isFetching } = useInstance(instanceId);\n\n  if (isFetching) {\n    return (\n      <Bullseye>\n        <Spinner />\n      </Bullseye>\n    );\n  }\n\n  return (\n    <div>\n      <PageHeader>\n        <Flex direction={{ default: 'column' }}>\n          <FlexItem>\n            <Breadcrumb>\n              <BreadcrumbItemLink to=\"/instances\">\n                ACS instances\n              </BreadcrumbItemLink>\n              <BreadcrumbItem isActive>{instance.name}</BreadcrumbItem>\n            </Breadcrumb>\n          </FlexItem>\n          <FlexItem>\n            <PageHeaderTitle title={instance.name} />\n          </FlexItem>\n        </Flex>\n      </PageHeader>\n      <Main className=\"pf-u-p-0 pf-m-fill pf-m-overflow-scroll\">\n        <PageSection>\n          <Card>\n            <CardHeader>\n              <CardHeaderMain>\n                <CardTitle>ACS Instance Access</CardTitle>\n              </CardHeaderMain>\n            </CardHeader>\n            <CardBody>\n              <p>Get started by signing in to your ACS instance.</p>\n            </CardBody>\n            <CardFooter>\n              <Button\n                variant={ButtonVariant.primary}\n                component=\"a\"\n                href={`https://${instance.host}`}\n                target=\"_blank\"\n              >\n                Sign in to ACS Instance\n              </Button>\n            </CardFooter>\n          </Card>\n        </PageSection>\n        <PageSection\n          variant={PageSectionVariants.light}\n          isFilled\n          hasOverflowScroll\n          isWidthLimited\n        >\n          <Title headingLevel=\"h2\">\n            Use Red Hat ACS to secure your clusters\n          </Title>\n          <Grid hasGutter>\n            <GridItem md={7}>\n              <Card className=\"marketing-video\">\n                <iframe\n                  src=\"https://www.youtube.com/embed/wMJMFIeVsw8\"\n                  title=\"Advanced Cluster Security in 2 Minutes\"\n                  frameBorder=\"0\"\n                  allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n                  allowFullScreen\n                ></iframe>\n              </Card>\n            </GridItem>\n            <GridItem md={5} hasGutter>\n              <TextContent>\n                <Text>In this video, you’ll learn how to:</Text>\n              </TextContent>\n              <List>\n                <ListItem>Lorem ipsum dolor sit amet</ListItem>\n                <ListItem>You go back, Jack, do it again</ListItem>\n                <ListItem>Three is the magic number</ListItem>\n              </List>\n            </GridItem>\n          </Grid>\n        </PageSection>\n      </Main>\n    </div>\n  );\n}\n\nexport default InstanceDetailsPage;\n","import { useQuery } from 'react-query';\n\nimport apiRequest from '../../services/apiRequest';\nimport { getQueryString } from '../../utils/queryString';\n\nconst getInstances = async ({ query }) => {\n  const queryString = getQueryString(query);\n  const { data } = await apiRequest.get(\n    `/api/rhacs/v1/centrals?${queryString}`\n  );\n  return data;\n};\n\nexport default function useInstances(options) {\n  return useQuery(['instances', options], () => getInstances(options));\n}\n","import qs from 'qs';\n\nexport function getQueryObject(search) {\n  return qs.parse(search, { ignoreQueryPrefix: true });\n}\n\nexport function getQueryString(searchObject) {\n  return qs.stringify(searchObject, { encode: false });\n}\n","import { useMutation, useQueryClient } from 'react-query';\n\nimport apiRequest from '../../services/apiRequest';\n\nconst postInstance = async (postData) => {\n  const { data } = await apiRequest.post(\n    '/api/rhacs/v1/centrals?async=true',\n    postData\n  );\n  return data;\n};\n\nexport default function useCreateInstance() {\n  const queryClient = useQueryClient();\n  return useMutation(postInstance, {\n    onSuccess: () => {\n      // Invalidate and refetch\n      queryClient.invalidateQueries('instances');\n    },\n  });\n}\n","import { useMutation, useQueryClient } from 'react-query';\n\nimport apiRequest from '../../services/apiRequest';\n\nconst deleteInstance = async (instanceID) => {\n  const { data } = await apiRequest.delete(\n    `/api/rhacs/v1/centrals/${instanceID}?async=true`\n  );\n  return data;\n};\n\nexport default function useDeleteInstance() {\n  const queryClient = useQueryClient();\n  return useMutation(deleteInstance, {\n    onSuccess: () => {\n      // Invalidate and refetch\n      queryClient.invalidateQueries('instances');\n    },\n  });\n}\n","const regions = {\n  'us-east-1': 'US-East, N. Virginia',\n  'eu-west-1': 'EU-Ireland',\n};\n\nexport const regionOptions = Object.keys(regions).map((regionValue) => {\n  return { value: regionValue, label: regions[regionValue] };\n});\n\nexport function regionValueToLabel(regionValue) {\n  return regions[regionValue];\n}\n\nexport function regionLabelToValue(regionLabel) {\n  const regionOption = regionOptions.find(\n    (regionOption) => regionOption.label === regionLabel\n  );\n  return regionOption?.value;\n}\n","/* eslint-disable react/prop-types */\nimport React, { useState } from 'react';\nimport { Select, SelectVariant } from '@patternfly/react-core';\n\nfunction SelectSingle({\n  toggleIcon,\n  id,\n  value,\n  handleSelect,\n  isDisabled = false,\n  children,\n  direction = 'down',\n  isCreatable = false,\n  variant = null,\n  placeholderText = '',\n}) {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const isTypeahead =\n    variant === 'typeahead' ? SelectVariant.typeahead : SelectVariant.single;\n\n  function onSelect(_event, selection) {\n    // The mouse event is not useful.\n    setIsOpen(false);\n    handleSelect(id, selection);\n  }\n\n  return (\n    <Select\n      variant={isTypeahead}\n      toggleIcon={toggleIcon}\n      id={id}\n      isDisabled={isDisabled}\n      isOpen={isOpen}\n      onSelect={onSelect}\n      onToggle={setIsOpen}\n      selections={value}\n      direction={direction}\n      isCreatable={isCreatable}\n      placeholderText={placeholderText}\n      toggleId={id}\n    >\n      {children}\n    </Select>\n  );\n}\n\nexport default SelectSingle;\n","/* eslint-disable react/prop-types */\nimport {\n  Alert,\n  Button,\n  Form,\n  FormGroup,\n  Modal,\n  ModalVariant,\n  SelectOption,\n  TextInput,\n  Tile,\n  ToggleGroup,\n  ToggleGroupItem,\n} from '@patternfly/react-core';\nimport React, { useState } from 'react';\n\nimport { regionOptions } from '../../utils/region';\nimport SelectSingle from '../../components/SelectSingle';\n\nconst defaultFormValues = {\n  name: '',\n  cloud_provider: 'aws',\n  region: 'us-east-1',\n  availabilityZones: 'multi',\n};\n\nfunction CreateInstanceModal({ isOpen, onClose, onRequestCreate }) {\n  const [errorMessage, setErrorMessage] = useState(null);\n  const [formValues, setFormValues] = useState(defaultFormValues);\n  const [isRequestingCreate, setIsRequestingCreate] = useState(false);\n\n  function onChangeAvailabilityZones(isSelected, event) {\n    const { id } = event.currentTarget;\n    setFormValues((prevFormValues) => ({\n      ...prevFormValues,\n      availabilityZones: id,\n    }));\n  }\n\n  function onCloudRegionSelect(id, selection) {\n    setFormValues((prevFormValues) => ({\n      ...prevFormValues,\n      region: selection,\n    }));\n  }\n\n  function onInputChange(value) {\n    setFormValues((prevFormValues) => ({\n      ...prevFormValues,\n      name: value,\n    }));\n  }\n\n  async function onRequestCreateHandler() {\n    setIsRequestingCreate(true);\n    const result = await onRequestCreate(formValues);\n    setIsRequestingCreate(false);\n    if (result instanceof Error) {\n      const errorMessage = result.response.data.reason;\n      setErrorMessage(errorMessage);\n    } else {\n      setFormValues(defaultFormValues);\n      onClose();\n    }\n  }\n\n  return (\n    <Modal\n      variant={ModalVariant.small}\n      title=\"Create ACS instance\"\n      isOpen={isOpen}\n      onClose={onClose}\n      actions={[\n        <Button\n          key=\"createInstance\"\n          variant=\"primary\"\n          onClick={onRequestCreateHandler}\n          isLoading={isRequestingCreate}\n          isDisabled={isRequestingCreate || !formValues?.name}\n        >\n          Create instance\n        </Button>,\n        <Button\n          key=\"cancel\"\n          variant=\"link\"\n          onClick={onClose}\n          isDisabled={isRequestingCreate}\n        >\n          Cancel\n        </Button>,\n      ]}\n    >\n      {errorMessage && (\n        <div className=\"pf-u-mb-md\">\n          <Alert variant=\"danger\" title={errorMessage} />\n        </div>\n      )}\n      <Form>\n        <FormGroup\n          label=\"Name\"\n          isRequired\n          fieldId=\"name\"\n          helperText=\"Must start with a letter and end with a letter or number. Valid characters include lowercase letters from a to z, numbers from 0 to 9, and hyphens ( - ).\"\n        >\n          <TextInput\n            isRequired\n            type=\"text\"\n            id=\"name\"\n            name=\"name\"\n            value={formValues.name}\n            onChange={onInputChange}\n          />\n        </FormGroup>\n        <FormGroup label=\"Cloud provider\" isRequired fieldId=\"cloud_provider\">\n          <Tile\n            title=\"Amazon Web Services\"\n            isSelected={formValues.cloud_provider === 'aws'}\n          />\n        </FormGroup>\n        <FormGroup label=\"Cloud region\" isRequired fieldId=\"region\">\n          <SelectSingle\n            id=\"region\"\n            value={formValues.region}\n            handleSelect={onCloudRegionSelect}\n          >\n            {regionOptions.map((region) => {\n              return (\n                <SelectOption key={region.value} value={region.value}>\n                  {region.label}\n                </SelectOption>\n              );\n            })}\n          </SelectSingle>\n        </FormGroup>\n        <FormGroup\n          label=\"Availability zones\"\n          isRequired\n          fieldId=\"availabilityZones\"\n        >\n          <ToggleGroup aria-label=\"Availability Zones\">\n            <ToggleGroupItem\n              text=\"Single\"\n              buttonId=\"single\"\n              isSelected={formValues.availabilityZones === 'single'}\n              onChange={onChangeAvailabilityZones}\n              isDisabled\n            />\n            <ToggleGroupItem\n              text=\"Multi\"\n              buttonId=\"multi\"\n              isSelected={formValues.availabilityZones === 'multi'}\n              onChange={onChangeAvailabilityZones}\n            />\n          </ToggleGroup>\n        </FormGroup>\n      </Form>\n    </Modal>\n  );\n}\n\nexport default CreateInstanceModal;\n","/* eslint-disable react/prop-types */\nimport {\n  Button,\n  Form,\n  FormGroup,\n  HelperText,\n  HelperTextItem,\n  Modal,\n  ModalVariant,\n  TextInput,\n} from '@patternfly/react-core';\nimport React, { useState } from 'react';\n\nfunction DeleteInstanceModal({ isOpen, instance, onRequestDelete, onClose }) {\n  const [inputValue, setInputValue] = useState('');\n  const [isRequestingDelete, setIsRequestingDelete] = useState(false);\n\n  async function onRequestDeleteHandler() {\n    setIsRequestingDelete(true);\n    const result = await onRequestDelete(instance.id);\n    setIsRequestingDelete(false);\n    if (result.error) {\n      // Do something\n    } else {\n      setInputValue('');\n      onClose();\n    }\n  }\n\n  if (!instance) return null;\n\n  return (\n    <Modal\n      variant={ModalVariant.small}\n      title=\"Delete instance?\"\n      isOpen={isOpen}\n      onClose={onClose}\n      actions={[\n        <Button\n          key=\"createInstance\"\n          variant=\"danger\"\n          onClick={onRequestDeleteHandler}\n          isLoading={isRequestingDelete}\n          isDisabled={isRequestingDelete || instance.name !== inputValue}\n        >\n          Delete instance\n        </Button>,\n        <Button\n          key=\"cancel\"\n          variant=\"link\"\n          onClick={onClose}\n          isDisabled={isRequestingDelete}\n        >\n          Cancel\n        </Button>,\n      ]}\n    >\n      <div className=\"pf-u-pb-md\">\n        <div>\n          This will permanently delete{' '}\n          <span className=\"pf-u-font-weight-bold\">{instance.name}</span>.\n        </div>\n        <div>This action cannot be undone.</div>\n      </div>\n      <Form>\n        <FormGroup\n          label=\"Confirmation\"\n          isRequired\n          fieldId=\"confirmationInstanceName\"\n        >\n          <TextInput\n            isRequired\n            type=\"text\"\n            id=\"confirmationInstanceName\"\n            name=\"confirmationInstanceName\"\n            value={inputValue}\n            onChange={setInputValue}\n          />\n        </FormGroup>\n        <HelperText>\n          <HelperTextItem>\n            Type <span className=\"pf-u-font-weight-bold\">{instance.name}</span>{' '}\n            to confirm.\n          </HelperTextItem>\n        </HelperText>\n      </Form>\n    </Modal>\n  );\n}\n\nexport default DeleteInstanceModal;\n","import { parseISO, format, formatDistance } from 'date-fns';\n\nconst dateTimeFormat = 'MM/dd/yyyy | h:mm:ss a';\n\nexport function getDateTimeDifference(timestamp) {\n  return formatDistance(parseISO(timestamp), new Date(), {\n    addSuffix: true,\n  });\n}\n\nexport function getDateTime(timestamp) {\n  return format(parseISO(timestamp), dateTimeFormat);\n}\n","const cloudProviders = {\n  aws: 'Amazon Web Services',\n};\n\nexport const cloudProviderOptions = Object.keys(cloudProviders).map(\n  (cloudProviderValue) => {\n    return {\n      value: cloudProviderValue,\n      label: cloudProviders[cloudProviderValue],\n    };\n  }\n);\n\nexport function cloudProviderValueToLabel(cloudProviderValue) {\n  return cloudProviders[cloudProviderValue];\n}\n\nexport function cloudProviderLabelToValue(cloudProviderLabel) {\n  const cloudProviderOption = cloudProviderOptions.find(\n    (cloudProviderOption) => cloudProviderOption.label === cloudProviderLabel\n  );\n  return cloudProviderOption?.value;\n}\n","/* eslint-disable react/prop-types */\nimport {\n  DescriptionList,\n  DescriptionListDescription,\n  DescriptionListGroup,\n  DescriptionListTerm,\n  Divider,\n  Drawer,\n  DrawerActions,\n  DrawerCloseButton,\n  DrawerContent,\n  DrawerContentBody,\n  DrawerHead,\n  DrawerPanelContent,\n  Text,\n  TextContent,\n  TextVariants,\n} from '@patternfly/react-core';\nimport React from 'react';\n\nimport { getDateTime } from '../../utils/date';\nimport { cloudProviderValueToLabel } from '../../utils/cloudProvider';\nimport { regionValueToLabel } from '../../utils/region';\n\nfunction InstanceDetailsDrawer({ isExpanded, onClose, instance, children }) {\n  return (\n    <Drawer isExpanded={isExpanded}>\n      <DrawerContent\n        panelContent={\n          <DrawerPanelContent>\n            <DrawerHead>\n              <div>\n                <TextContent>\n                  <Text component={TextVariants.small}>Name</Text>\n                </TextContent>\n                <TextContent>\n                  <Text component={TextVariants.h2}>{instance?.name}</Text>\n                </TextContent>\n              </div>\n              <DrawerActions>\n                <DrawerCloseButton onClick={onClose} />\n              </DrawerActions>\n            </DrawerHead>\n            <Divider component=\"div\" />\n            <DrawerContentBody>\n              {instance && (\n                <DescriptionList isHorizontal>\n                  <DescriptionListGroup>\n                    <DescriptionListTerm>ID</DescriptionListTerm>\n                    <DescriptionListDescription>\n                      {instance.id}\n                    </DescriptionListDescription>\n                  </DescriptionListGroup>\n                  <DescriptionListGroup>\n                    <DescriptionListTerm>Owner</DescriptionListTerm>\n                    <DescriptionListDescription>\n                      {instance.owner}\n                    </DescriptionListDescription>\n                  </DescriptionListGroup>\n                  <DescriptionListGroup>\n                    <DescriptionListTerm>Time created</DescriptionListTerm>\n                    <DescriptionListDescription>\n                      {getDateTime(instance.created_at)}\n                    </DescriptionListDescription>\n                  </DescriptionListGroup>\n                  <DescriptionListGroup>\n                    <DescriptionListTerm>Time updated</DescriptionListTerm>\n                    <DescriptionListDescription>\n                      {getDateTime(instance.updated_at)}\n                    </DescriptionListDescription>\n                  </DescriptionListGroup>\n                  <DescriptionListGroup>\n                    <DescriptionListTerm>Cloud provider</DescriptionListTerm>\n                    <DescriptionListDescription>\n                      {cloudProviderValueToLabel(instance.cloud_provider)}\n                    </DescriptionListDescription>\n                  </DescriptionListGroup>\n                  <DescriptionListGroup>\n                    <DescriptionListTerm>Region</DescriptionListTerm>\n                    <DescriptionListDescription>\n                      {regionValueToLabel(instance.region)}\n                    </DescriptionListDescription>\n                  </DescriptionListGroup>\n                </DescriptionList>\n              )}\n            </DrawerContentBody>\n          </DrawerPanelContent>\n        }\n      >\n        {children}\n      </DrawerContent>\n    </Drawer>\n  );\n}\n\nexport default InstanceDetailsDrawer;\n","export const statuses = {\n  accepted: 'Request accepted',\n  preparing: 'Creation pending',\n  provisioning: 'Creation in progress',\n  ready: 'Ready',\n  failed: 'Failed',\n  deprovision: 'Deprovisioning',\n  deleting: 'Deleting',\n};\n\nexport const statusOptions = Object.keys(statuses).map((statusValue) => {\n  return {\n    value: statusValue,\n    label: statuses[statusValue],\n  };\n});\n\nexport function statusValueToLabel(statusValue) {\n  return statuses[statusValue];\n}\n\nexport function statusLabelToValue(statusLabel) {\n  const statusOption = statusOptions.find(\n    (statusOption) => statusOption.label === statusLabel\n  );\n  return statusOption?.value;\n}\n","/* eslint-disable react/prop-types */\nimport React from 'react';\nimport {\n  CheckCircleIcon,\n  ExclamationCircleIcon,\n  PendingIcon,\n} from '@patternfly/react-icons';\nimport { Flex, FlexItem, Spinner } from '@patternfly/react-core';\n\nimport { statuses } from '../utils/status';\n\nconst statusMessages = {\n  accepted: {\n    message: statuses.accepted,\n    component: <PendingIcon />,\n  },\n  preparing: {\n    message: statuses.preparing,\n    component: <PendingIcon />,\n  },\n  provisioning: {\n    message: statuses.provisioning,\n    component: <Spinner isSVG size=\"md\" />,\n  },\n  ready: {\n    message: statuses.ready,\n    component: <CheckCircleIcon className=\"pf-u-success-color-100\" />,\n  },\n  failed: {\n    message: statuses.failed,\n    component: <ExclamationCircleIcon className=\"pf-u-danger-color-100\" />,\n  },\n  deprovision: {\n    message: statuses.deprovision,\n    component: <Spinner isSVG size=\"md\" />,\n  },\n  deleting: {\n    message: statuses.deleting,\n    component: <Spinner isSVG size=\"md\" />,\n  },\n};\n\nfunction Status({ status }) {\n  const { message, component } = statusMessages[status] || {\n    message: 'N/A',\n    component: null,\n  };\n\n  return (\n    <Flex>\n      <FlexItem>{component}</FlexItem>\n      <FlexItem>{message}</FlexItem>\n    </Flex>\n  );\n}\n\nexport default Status;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  ToolbarToggleGroup,\n  ToolbarGroup,\n  ToolbarFilter,\n  SelectVariant,\n  SelectOption,\n  Select,\n  ToolbarItem,\n  InputGroup,\n  TextInput,\n  Button,\n} from '@patternfly/react-core';\nimport { FilterIcon, SearchIcon } from '@patternfly/react-icons';\n\nimport { regionOptions } from '../../utils/region';\nimport { statusOptions } from '../../utils/status';\nimport SelectSingle from '../../components/SelectSingle';\n\nfunction InstancesToolbarSearchFilter({ filters, setFilters }) {\n  const [selectedFilter, setSelectedFilter] = useState('Name');\n  // local state for input values\n  const [inputName, setInputName] = useState('');\n  const [inputOwner, setInputOwner] = useState('');\n  // local state for Select isExpanded values\n  // @TODO: We can refactor the SelectSingle component to be more reusable for the usecase in this component as well. Then we don't need to keep this state here.\n  const [isRegionExpanded, setIsRegionExpanded] = useState(false);\n  const [isStatusExpanded, setIsStatusExpanded] = useState(false);\n\n  // TODO: Extract into separate utils file to be reused in other cases\n  function onDeleteChip(type = '', id = '') {\n    setFilters((prevFilters) => {\n      const newFilters = { ...prevFilters };\n      const newValue = newFilters[type.toLowerCase()].filter((s) => s !== id);\n      if (newValue?.length === 0) {\n        delete newFilters[type.toLowerCase()];\n      } else {\n        newFilters[type.toLowerCase()] = newValue;\n      }\n      return newFilters;\n    });\n  }\n\n  // TODO: Extract into separate utils file to be reused in other cases\n  function onDeleteChipGroup(type) {\n    setFilters((prevFilters) => {\n      const newFilters = { ...prevFilters };\n      delete newFilters[type.toLowerCase()];\n      return newFilters;\n    });\n  }\n\n  // TODO: Extract into separate utils file to be reused in other cases\n  function onSelect(type, event, selection) {\n    const checked = event.target.checked;\n    setFilters((prevFilters) => {\n      const newFilters = { ...prevFilters };\n      const prevSelections = prevFilters[type] || [];\n      const newValue = checked\n        ? [...prevSelections, selection]\n        : prevSelections.filter((value) => value !== selection);\n      if (newValue.length === 0) {\n        delete newFilters[type];\n      } else {\n        newFilters[type] = newValue;\n      }\n      return newFilters;\n    });\n  }\n\n  function onRegionSelect(event, selection) {\n    onSelect('region', event, selection);\n  }\n\n  function onStatusSelect(event, selection) {\n    onSelect('status', event, selection);\n  }\n\n  return (\n    <ToolbarToggleGroup toggleIcon={<FilterIcon />} breakpoint=\"xl\">\n      <ToolbarGroup variant=\"filter-group\">\n        <ToolbarItem>\n          <SelectSingle\n            id=\"region\"\n            value={selectedFilter}\n            handleSelect={(_, selection) => {\n              setSelectedFilter(selection);\n            }}\n          >\n            <SelectOption value=\"Name\">Name</SelectOption>\n            <SelectOption value=\"Region\">Region</SelectOption>\n            <SelectOption value=\"Owner\">Owner</SelectOption>\n            <SelectOption value=\"Status\">Status</SelectOption>\n          </SelectSingle>\n        </ToolbarItem>\n        <ToolbarFilter\n          chips={filters.name}\n          deleteChip={onDeleteChip}\n          deleteChipGroup={onDeleteChipGroup}\n          categoryName=\"Name\"\n          className={selectedFilter !== 'Name' && 'pf-u-hidden'}\n        >\n          <ToolbarItem>\n            <InputGroup>\n              <TextInput\n                id=\"filterName\"\n                type=\"text\"\n                aria-label=\"Name\"\n                placeholder=\"Filter by name\"\n                value={inputName}\n                onChange={(value) => setInputName(value)}\n              />\n              <Button\n                variant=\"control\"\n                aria-label=\"Search Name\"\n                onClick={() => {\n                  if (!inputName) return;\n                  setFilters((prevFilters) => {\n                    const newFilters = { ...prevFilters };\n                    newFilters.name = [inputName];\n                    console.log(newFilters);\n                    return newFilters;\n                  });\n                }}\n              >\n                <SearchIcon />\n              </Button>\n            </InputGroup>\n          </ToolbarItem>\n        </ToolbarFilter>\n        <ToolbarFilter\n          chips={filters.region}\n          deleteChip={onDeleteChip}\n          deleteChipGroup={onDeleteChipGroup}\n          categoryName=\"Region\"\n          className={selectedFilter !== 'Region' && 'pf-u-hidden'}\n        >\n          <ToolbarItem>\n            <Select\n              variant={SelectVariant.checkbox}\n              aria-label=\"Region\"\n              onToggle={setIsRegionExpanded}\n              onSelect={onRegionSelect}\n              selections={filters.region}\n              isOpen={isRegionExpanded}\n              placeholderText=\"Filter by region\"\n            >\n              {regionOptions.map((regionOption) => {\n                return (\n                  <SelectOption\n                    key={regionOption.label}\n                    value={regionOption.label}\n                  >\n                    {regionOption.label}\n                  </SelectOption>\n                );\n              })}\n            </Select>\n          </ToolbarItem>\n        </ToolbarFilter>\n        <ToolbarFilter\n          chips={filters.owner}\n          deleteChip={onDeleteChip}\n          deleteChipGroup={onDeleteChipGroup}\n          categoryName=\"Owner\"\n          className={selectedFilter !== 'Owner' && 'pf-u-hidden'}\n        >\n          <ToolbarItem>\n            <InputGroup>\n              <TextInput\n                id=\"filterOwner\"\n                type=\"text\"\n                aria-label=\"Owner\"\n                placeholder=\"Filter by owner\"\n                value={inputOwner}\n                onChange={(value) => setInputOwner(value)}\n              />\n              <Button\n                variant=\"control\"\n                aria-label=\"Search Owner\"\n                onClick={() => {\n                  if (!inputOwner) return;\n                  setFilters((prevFilters) => {\n                    const newFilters = { ...prevFilters };\n                    newFilters.owner = [inputOwner];\n                    return newFilters;\n                  });\n                }}\n              >\n                <SearchIcon />\n              </Button>\n            </InputGroup>\n          </ToolbarItem>\n        </ToolbarFilter>\n        <ToolbarFilter\n          chips={filters.status}\n          deleteChip={onDeleteChip}\n          deleteChipGroup={onDeleteChipGroup}\n          categoryName=\"Status\"\n          className={selectedFilter !== 'Status' && 'pf-u-hidden'}\n        >\n          <ToolbarItem>\n            <Select\n              variant={SelectVariant.checkbox}\n              aria-label=\"Status\"\n              onToggle={setIsStatusExpanded}\n              onSelect={onStatusSelect}\n              selections={filters.status}\n              isOpen={isStatusExpanded}\n              placeholderText=\"Filter by status\"\n            >\n              {statusOptions.map((statusOption) => {\n                return (\n                  <SelectOption\n                    key={statusOption.label}\n                    value={statusOption.label}\n                  >\n                    {statusOption.label}\n                  </SelectOption>\n                );\n              })}\n            </Select>\n          </ToolbarItem>\n        </ToolbarFilter>\n      </ToolbarGroup>\n    </ToolbarToggleGroup>\n  );\n}\n\nInstancesToolbarSearchFilter.propTypes = {\n  filters: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    region: PropTypes.string.isRequired,\n    owner: PropTypes.string.isRequired,\n    status: PropTypes.string.isRequired,\n  }),\n  setFilters: PropTypes.func.isRequired,\n};\n\nexport default InstancesToolbarSearchFilter;\n","import { regionLabelToValue } from './region';\nimport { cloudProviderLabelToValue } from './cloudProvider';\nimport { statusLabelToValue } from './status';\n\nexport function filtersToSearchQuery(filters) {\n  const searchCategories = Object.keys(filters);\n  const queries =\n    searchCategories\n      .filter((searchCategory) => {\n        const searchValues = filters[searchCategory];\n        return searchValues.length;\n      })\n      .map((searchCategory) => {\n        const searchValues = filters[searchCategory];\n        const searchCategoryResult = searchValues\n          .map((searchValue) => {\n            // Use the value the API needs rather than the human readable UI value\n            let modifiedSearchValue = searchValue;\n            if (searchCategory === 'cloud_provider') {\n              modifiedSearchValue = cloudProviderLabelToValue(searchValue);\n            } else if (searchCategory === 'region') {\n              modifiedSearchValue = regionLabelToValue(searchValue);\n            } else if (searchCategory === 'status') {\n              modifiedSearchValue = statusLabelToValue(searchValue);\n            }\n            return `${searchCategory} = ${modifiedSearchValue}`;\n          })\n          .join(' or ');\n        return `(${searchCategoryResult})`;\n      })\n      .join(' and ') || '';\n  return queries;\n}\n","import React, { useEffect, useState } from 'react';\nimport { Link, withRouter, useHistory } from 'react-router-dom';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport {\n  EmptyState,\n  EmptyStateIcon,\n  Title,\n  EmptyStateBody,\n  EmptyStatePrimary,\n  Button,\n  Card,\n  Toolbar,\n  ToolbarContent,\n  ToolbarItem,\n  Pagination,\n  Bullseye,\n  EmptyStateVariant,\n} from '@patternfly/react-core';\nimport {\n  ActionsColumn,\n  TableComposable,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from '@patternfly/react-table';\nimport { CubesIcon, SearchIcon } from '@patternfly/react-icons';\n\nimport usePagination from '../../hooks/usePagination';\nimport useInstances from '../../hooks/apis/useInstances';\nimport useCreateInstance from '../../hooks/apis/useCreateInstance';\nimport useDeleteInstance from '../../hooks/apis/useDeleteInstance';\n\nimport CreateInstanceModal from './CreateInstanceModal';\nimport DeleteInstanceModal from './DeleteInstanceModal';\nimport InstanceDetailsDrawer from './InstanceDetailsDrawer';\nimport { getDateTimeDifference } from '../../utils/date';\nimport Status from '../../components/Status';\nimport InstancesToolbarSearchFilter from './InstancesToolbarSearchFilter';\nimport useTableSort from '../../hooks/useTableSort';\nimport { regionValueToLabel } from '../../utils/region';\nimport { cloudProviderValueToLabel } from '../../utils/cloudProvider';\nimport { filtersToSearchQuery } from '../../utils/searchQuery';\n\nconst sortFields = [\n  'name',\n  'cloud_provider',\n  'region',\n  'owner',\n  'status',\n  'created_at',\n];\nconst defaultSortOption = {\n  field: 'name',\n  direction: 'asc',\n};\n\n/**\n * A smart component that handles all the api calls and data needed by the dumb components.\n * Smart components are usually classes.\n *\n * https://reactjs.org/docs/components-and-props.html\n * https://medium.com/@thejasonfile/dumb-components-and-smart-components-e7b33a698d43\n */\nfunction InstancesPage() {\n  const history = useHistory();\n\n  const { page, perPage, onSetPage, onPerPageSelect } = usePagination();\n  const { sortOption, getSortParams } = useTableSort({\n    sortFields,\n    defaultSortOption,\n  });\n  const [filters, setFilters] = useState({});\n\n  const { data, isFetching } = useInstances({\n    query: {\n      page,\n      size: perPage,\n      orderBy: `${sortOption.field} ${sortOption.direction}`,\n      search: filtersToSearchQuery(filters),\n    },\n  });\n  const createInstance = useCreateInstance();\n  const deleteInstance = useDeleteInstance();\n  const [creatingInstance, setCreatingInstance] = useState(null);\n  const [deletingInstance, setDeletingInstance] = useState(null);\n  const [viewingInstance, setViewingInstance] = useState(null);\n\n  const instances = data?.items || [];\n\n  useEffect(() => {\n    insights?.chrome?.appAction?.('instances-page');\n  }, []);\n\n  function onRequestCreate(values) {\n    const response = createInstance.mutateAsync({\n      region: values.region,\n      cloud_provider: values.cloud_provider,\n      name: values.name,\n      multi_az: values.availabilityZones === 'multi',\n    });\n    return response.catch((error) => {\n      return error;\n    });\n  }\n\n  function closeCreateInstanceModal() {\n    setCreatingInstance(null);\n  }\n\n  function onRequestDelete(instanceID) {\n    const response = deleteInstance.mutateAsync(instanceID);\n    return response.catch((error) => {\n      return error;\n    });\n  }\n\n  function closeDeleteInstanceModal() {\n    setDeletingInstance(null);\n  }\n\n  function closeInstanceDetailsDrawer() {\n    setViewingInstance(null);\n  }\n\n  function onClearFilters() {\n    setFilters({});\n  }\n\n  let content = null;\n\n  if (\n    !isFetching &&\n    instances.length === 0 &&\n    Object.keys(filters).length === 0\n  ) {\n    content = (\n      <EmptyState>\n        <EmptyStateIcon icon={CubesIcon} />\n        <Title size=\"lg\" headingLevel=\"h4\">\n          No ACS instances.\n        </Title>\n        <EmptyStateBody>Create one to get started.</EmptyStateBody>\n        <EmptyStatePrimary>\n          <Button variant=\"primary\" onClick={() => setCreatingInstance({})}>\n            Create ACS instance\n          </Button>\n        </EmptyStatePrimary>\n      </EmptyState>\n    );\n  } else {\n    content = (\n      <>\n        <Toolbar clearAllFilters={onClearFilters}>\n          <ToolbarContent>\n            <InstancesToolbarSearchFilter\n              filters={filters}\n              setFilters={setFilters}\n            />\n            <ToolbarItem>\n              <Button variant=\"primary\" onClick={() => setCreatingInstance({})}>\n                Create ACS instance\n              </Button>\n            </ToolbarItem>\n            {instances.length !== 0 && (\n              <ToolbarItem\n                variant=\"pagination\"\n                align={{ default: 'alignRight' }}\n              >\n                <Pagination\n                  itemCount={instances.length}\n                  perPage={perPage}\n                  page={page}\n                  onSetPage={onSetPage}\n                  widgetId=\"acs-instances-top-pagination\"\n                  onPerPageSelect={onPerPageSelect}\n                  isCompact\n                />\n              </ToolbarItem>\n            )}\n          </ToolbarContent>\n        </Toolbar>\n        <TableComposable aria-label=\"ACS instances table\">\n          <Thead>\n            <Tr>\n              <Th sort={getSortParams('name')}>Name</Th>\n              <Th sort={getSortParams('cloud_provider')}>Cloud provider</Th>\n              <Th sort={getSortParams('region')}>Region</Th>\n              <Th sort={getSortParams('owner')}>Owner</Th>\n              <Th sort={getSortParams('status')}>Status</Th>\n              <Th sort={getSortParams('created_at')}>Time created</Th>\n              <Th />\n            </Tr>\n          </Thead>\n          <Tbody>\n            {!isFetching && instances.length === 0 ? (\n              <Tr>\n                <Td colSpan={8}>\n                  <Bullseye>\n                    <EmptyState variant={EmptyStateVariant.small}>\n                      <EmptyStateIcon icon={SearchIcon} />\n                      <Title headingLevel=\"h2\" size=\"lg\">\n                        No results found\n                      </Title>\n                      <EmptyStateBody>\n                        Clear all filters and try again.\n                      </EmptyStateBody>\n                      <Button variant=\"link\" onClick={onClearFilters}>\n                        Clear all filters\n                      </Button>\n                    </EmptyState>\n                  </Bullseye>\n                </Td>\n              </Tr>\n            ) : (\n              instances.map((instance) => {\n                const instanceDetailsURL = `/instances/instance/${instance.id}`;\n                return (\n                  <Tr\n                    key={instance.name}\n                    onRowClick={(event) => {\n                      if (event.target.getAttribute('type') !== 'button') {\n                        setViewingInstance(instance);\n                      }\n                    }}\n                    isRowSelected={viewingInstance?.name === instance?.name}\n                  >\n                    <Td dataLabel=\"Name\">\n                      <Link to={instanceDetailsURL}>{instance.name}</Link>\n                    </Td>\n                    <Td dataLabel=\"Cloud provider\">\n                      {cloudProviderValueToLabel(instance.cloud_provider)}\n                    </Td>\n                    <Td dataLabel=\"Region\">\n                      {regionValueToLabel(instance.region)}\n                    </Td>\n                    <Td dataLabel=\"Owner\">{instance.owner}</Td>\n                    <Td dataLabel=\"Status\">\n                      <Status status={instance.status} />\n                    </Td>\n                    <Td dataLabel=\"Time created\">\n                      {getDateTimeDifference(instance.created_at)}\n                    </Td>\n                    <Td isActionCell>\n                      <ActionsColumn\n                        items={[\n                          {\n                            title: 'Details',\n                            onClick: (event) => {\n                              event.preventDefault();\n                              history.push(instanceDetailsURL);\n                            },\n                          },\n                          {\n                            title: 'Delete',\n                            onClick: (event) => {\n                              event.preventDefault();\n                              setDeletingInstance(instance);\n                            },\n                          },\n                        ]}\n                      />\n                    </Td>\n                  </Tr>\n                );\n              })\n            )}\n          </Tbody>\n        </TableComposable>\n        {instances.length !== 0 && (\n          <Toolbar>\n            <ToolbarContent>\n              <ToolbarItem\n                variant=\"pagination\"\n                align={{ default: 'alignRight' }}\n              >\n                <Pagination\n                  itemCount={instances.length}\n                  perPage={perPage}\n                  page={page}\n                  onSetPage={onSetPage}\n                  widgetId=\"acs-instances-top-pagination\"\n                  onPerPageSelect={onPerPageSelect}\n                />\n              </ToolbarItem>\n            </ToolbarContent>\n          </Toolbar>\n        )}\n      </>\n    );\n  }\n\n  return (\n    <InstanceDetailsDrawer\n      isExpanded={!!viewingInstance}\n      instance={viewingInstance}\n      onClose={closeInstanceDetailsDrawer}\n    >\n      <PageHeader>\n        <PageHeaderTitle title=\"ACS Instances\" />\n      </PageHeader>\n      <Main>\n        <Card>{content}</Card>\n        <CreateInstanceModal\n          isOpen={!!creatingInstance}\n          onClose={closeCreateInstanceModal}\n          onRequestCreate={onRequestCreate}\n        />\n        <DeleteInstanceModal\n          instance={deletingInstance}\n          isOpen={!!deletingInstance}\n          onClose={closeDeleteInstanceModal}\n          onRequestDelete={onRequestDelete}\n        />\n      </Main>\n    </InstanceDetailsDrawer>\n  );\n}\n\nexport default withRouter(InstancesPage);\n","import { useState } from 'react';\n\nfunction usePagination() {\n  const [page, setPage] = useState(1);\n  const [perPage, setPerPage] = useState(20);\n\n  function onSetPage(_, newPage) {\n    setPage(newPage);\n  }\n\n  function onPerPageSelect(_, newPerPage) {\n    setPerPage(newPerPage);\n  }\n\n  return {\n    page,\n    perPage,\n    onSetPage,\n    onPerPageSelect,\n  };\n}\n\nexport default usePagination;\n","import { useEffect, useState } from 'react';\n\nfunction useTableSort({ sortFields, defaultSortOption }) {\n  const [sortOption, setSortOption] = useState();\n\n  const activeSortField = sortOption?.field || defaultSortOption.field;\n  const activeSortDirection =\n    sortOption?.direction || defaultSortOption.direction;\n\n  // we'll use this to map the sort fields to an id PatternFly can use internally\n  const [fieldToIdMap, setFieldToIdMap] = useState({});\n\n  // we'll construct a map of sort fields to ids that will make it easier to work with\n  // PatternFly\n  useEffect(() => {\n    const newFieldToIdMap = sortFields.reduce((acc, curr, index) => {\n      acc[curr] = index;\n      return acc;\n    }, {});\n    setFieldToIdMap(newFieldToIdMap);\n  }, [sortFields]);\n\n  function getSortParams(field) {\n    const fieldId = fieldToIdMap[field];\n    const activeSortId = activeSortField\n      ? fieldToIdMap[activeSortField]\n      : undefined;\n\n    return {\n      sortBy: {\n        index: activeSortId,\n        direction: activeSortDirection,\n        defaultDirection: 'desc',\n      },\n      onSort: (_event, _index, direction) => {\n        // modify the URL based on the new sort\n        const newSortOption = {\n          field,\n          direction,\n        };\n        setSortOption(newSortOption);\n      },\n      columnIndex: fieldId,\n    };\n  }\n\n  return {\n    sortOption: {\n      field: activeSortField,\n      direction: activeSortDirection,\n    },\n    getSortParams,\n  };\n}\n\nexport default useTableSort;\n","import axios from 'axios';\n\nexport const authInterceptor = (client) => {\n  client.interceptors.request.use(async (cfg) => {\n    await insights.chrome.auth.getUser();\n    const token = await insights.chrome.auth.getToken();\n    // @TODO: Allow flexibility of using staging environment vs. prod environment\n    const BASE_URL = cfg.baseURL || 'https://api.stage.openshift.com';\n    const updatedCfg = { ...cfg, url: `${BASE_URL}${cfg.url}` };\n    if (token) {\n      updatedCfg.headers = {\n        ...updatedCfg.headers,\n        Authorization: `Bearer ${token}`,\n      };\n    }\n    delete updatedCfg.customHost;\n    return updatedCfg;\n  });\n  return client;\n};\n\nconst apiRequest = authInterceptor(axios.create());\n\nexport default apiRequest;\n"],"names":["children","to","rest","BreadcrumbItem","render","className","ariaCurrent","Link","getInstanceById","instanceId","apiRequest","data","useParams","useQuery","instance","isFetching","Bullseye","Spinner","PageHeader","Flex","direction","default","FlexItem","Breadcrumb","isActive","name","PageHeaderTitle","title","Main","PageSection","Card","CardHeader","CardHeaderMain","CardTitle","CardBody","CardFooter","Button","variant","ButtonVariant","component","href","host","target","PageSectionVariants","isFilled","hasOverflowScroll","isWidthLimited","Title","headingLevel","Grid","hasGutter","GridItem","md","src","frameBorder","allow","allowFullScreen","TextContent","Text","List","ListItem","getInstances","searchObject","query","queryString","qs","encode","postInstance","postData","deleteInstance","instanceID","useDeleteInstance","queryClient","useQueryClient","useMutation","onSuccess","invalidateQueries","regions","regionOptions","Object","keys","map","regionValue","value","label","regionValueToLabel","toggleIcon","id","handleSelect","isDisabled","isCreatable","placeholderText","useState","isOpen","setIsOpen","isTypeahead","SelectVariant","Select","onSelect","_event","selection","onToggle","selections","toggleId","defaultFormValues","cloud_provider","region","availabilityZones","onClose","onRequestCreate","errorMessage","setErrorMessage","formValues","setFormValues","isRequestingCreate","setIsRequestingCreate","onChangeAvailabilityZones","isSelected","event","currentTarget","prevFormValues","result","Error","response","reason","Modal","ModalVariant","actions","key","onClick","isLoading","Alert","Form","FormGroup","isRequired","fieldId","helperText","TextInput","type","onChange","Tile","SelectOption","ToggleGroup","ToggleGroupItem","text","buttonId","onRequestDelete","inputValue","setInputValue","isRequestingDelete","setIsRequestingDelete","error","HelperText","HelperTextItem","getDateTime","timestamp","format","parseISO","cloudProviders","aws","cloudProviderOptions","cloudProviderValue","cloudProviderValueToLabel","isExpanded","Drawer","DrawerContent","panelContent","DrawerPanelContent","DrawerHead","TextVariants","DrawerActions","DrawerCloseButton","Divider","DrawerContentBody","DescriptionList","isHorizontal","DescriptionListGroup","DescriptionListTerm","DescriptionListDescription","owner","created_at","updated_at","statuses","accepted","preparing","provisioning","ready","failed","deprovision","deleting","statusOptions","statusValue","statusMessages","message","isSVG","size","status","InstancesToolbarSearchFilter","filters","setFilters","selectedFilter","setSelectedFilter","inputName","setInputName","inputOwner","setInputOwner","isRegionExpanded","setIsRegionExpanded","isStatusExpanded","setIsStatusExpanded","onDeleteChip","prevFilters","newFilters","newValue","toLowerCase","filter","s","length","onDeleteChipGroup","checked","prevSelections","ToolbarToggleGroup","breakpoint","ToolbarGroup","ToolbarItem","_","ToolbarFilter","chips","deleteChip","deleteChipGroup","categoryName","InputGroup","placeholder","console","log","regionOption","statusOption","propTypes","PropTypes","filtersToSearchQuery","searchCategory","searchCategoryResult","searchValue","statusLabel","regionLabel","cloudProviderLabel","cloudProviderOption","modifiedSearchValue","find","join","sortFields","defaultSortOption","field","withRouter","options","history","useHistory","page","setPage","perPage","setPerPage","onSetPage","newPage","onPerPageSelect","newPerPage","usePagination","sortOption","setSortOption","activeSortField","activeSortDirection","fieldToIdMap","setFieldToIdMap","useEffect","newFieldToIdMap","reduce","acc","curr","index","getSortParams","sortBy","undefined","defaultDirection","onSort","_index","columnIndex","useTableSort","orderBy","search","createInstance","creatingInstance","setCreatingInstance","deletingInstance","setDeletingInstance","viewingInstance","setViewingInstance","instances","items","onClearFilters","insights","chrome","appAction","content","Toolbar","clearAllFilters","ToolbarContent","align","Pagination","itemCount","widgetId","isCompact","TableComposable","Thead","Tr","Th","sort","Tbody","instanceDetailsURL","onRowClick","getAttribute","isRowSelected","Td","dataLabel","formatDistance","Date","addSuffix","isActionCell","ActionsColumn","preventDefault","push","colSpan","EmptyState","EmptyStateVariant","EmptyStateIcon","icon","SearchIcon","EmptyStateBody","CubesIcon","EmptyStatePrimary","values","mutateAsync","multi_az","client","axios","interceptors","request","use","cfg","auth","getUser","getToken","token","BASE_URL","baseURL","updatedCfg","url","headers","Authorization","customHost"],"sourceRoot":""}