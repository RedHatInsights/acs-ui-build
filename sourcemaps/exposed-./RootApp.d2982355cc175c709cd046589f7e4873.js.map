{"version":3,"file":"js/exposed-./RootApp.acbb5ca76f9d99d49578.js","mappings":"gNAsEA,QAzDY,WACJ,OAAgD,SAA9CA,EAAmB,sBAAEC,EAAc,iBAAEC,EAAI,OAC3C,GAA8B,IAAAC,UAAS,KAAaC,YAAnDA,EAAU,KAAEC,EAAa,KAC1B,GAAgD,IAAAF,UACpD,KAAaG,qBADRA,EAAmB,KAAEC,EAAsB,KAO5CC,EAAcP,IAEdQ,EAA+B,eAAhBD,EA+BrB,OA7BA,IAAAE,YAAU,W,mBACkB,E,OAAA,E,EAAA,W,gnCACX,SAAMR,EAAKS,W,mBAEbC,KAFLC,EAAO,WAGVJ,IAGDJ,EAAcQ,EAAKC,aAAaC,IAAIC,aACpCT,GAAuB,I,qBARD,K,kQAgBLE,IACnBQ,aAAaC,QAAQ,uBAAwB,QAC7Cb,GAAc,GACdE,GAAuB,KAGR,UACRY,SAAS,CAAEC,cAAe,OAEnCpB,EAAoB,MACtB,GAAG,IAEiB,UAAhBQ,EACK,kBAAC,IAAW,MAGjB,kBAAC,EAAAa,SAAQ,KACP,kBAAC,KAAWC,SAAQ,CAACC,MAAO,CAAEnB,WAAU,EAAEE,oBAAmB,IAC3D,kBAAC,KAAmB,MACpB,kBAAC,IAAM,OAKjB,C,2IC7DMkB,EAAc,IAAI,EAAAC,YAqBxB,QAnBiB,WAMf,OALA,IAAAf,YAAU,WACR,IAAMgB,EAAUC,SAASC,eAAe,QACxCF,SAAAA,EAASG,aAAa,iBAAkB,OAC1C,GAAG,IAGD,kBAAC,KAAQ,CACPC,MAAO,IAAI,aAC8C,IACvDC,YAEF,kBAAC,EAAAC,oBAAmB,CAACC,OAAQT,GAC3B,kBAAC,IAAG,OAIZ,C,yGCTA,QAXuB,SAAC,G,IAAEU,EAAQ,WAC1B,GAAsC,IAAAC,YAAW,MAA/C/B,EAAU,aAClB,OADuC,sBAG5BA,EACF8B,EAEA,kBAAC,EAAAE,SAAQ,CAACC,IAAI,OAAgB,WAAY,KAAeC,SAAO,IAJhE,oCAMX,C,+HCRMC,GAAW,IAAAC,OACf,WAAM,yCAEFC,GAAoB,IAAAD,OACxB,WACE,yCAIEE,GAAgB,IAAAF,OACpB,WACE,oGAIEG,GAAsB,IAAAH,OAC1B,WACE,kFAIEI,GAAe,IAAAJ,OACnB,WACE,yEAKEK,GAAqB,IAAAL,OACzB,WACE,2FAKSM,EAAS,WACpB,OACE,kBAAC,EAAAC,SAAQ,CACPC,SACE,kBAAC,IAAQ,KACP,kBAAC,IAAO,QAIZ,kBAAC,SAAY,KACX,kBAAC,EAAAC,MAAK,CAACC,KAAK,iBAAiBC,QAAS,kBAACV,EAAiB,QACxD,kBAAC,EAAAQ,MAAK,CAACC,KAAK,OAAOC,QAAS,kBAACZ,EAAQ,QACrC,kBAAC,EAAAU,MAAK,CACJC,KAAK,kCACLC,QACE,kBAAC,IAAc,KACb,kBAACR,EAAmB,SAI1B,kBAAC,EAAAM,MAAK,CACJC,KAAK,aACLC,QACE,kBAAC,IAAc,KACb,kBAACT,EAAa,SAIpB,kBAAC,EAAAO,MAAK,CAACC,KAAK,YAAYC,QAAS,kBAACP,EAAY,QAC9C,kBAAC,EAAAK,MAAK,CACJC,KAAK,mBACLC,QACE,kBAAC,IAAc,KACb,kBAACN,EAAkB,SAKzB,kBAAC,EAAAI,MAAK,CACJC,KAAK,IACLC,QACE,kBAAC,EAAAf,SAAQ,CAACC,IAAI,OAAgB,WAAY,KAAeC,SAAO,OAM5E,C,yECvFac,EAAe,CAC1BhD,YAAY,EACZE,qBAAqB,GAIvB,SAD0B,IAAA+C,eAAcD,E,gSCCjC,SAASE,I,IAAK,sDAMnB,OALW,QAAY,CAAC,EAAG,EAAF,CACvB,KACA,QAAwB,CAAEC,oBAAqB,CAAC,SAAU,YACvDC,GAAU,GAGjB,C,4QCbaC,EAAe,4BACfC,EAAkB,SAACrB,EAAQsB,GACtC,MAAkB,iBAAPtB,EAEF,UAAGsB,EAAQ,YAAItB,GAAKC,QAAQ,WAAIqB,EAAQ,MAAM,KAGhD,EAAP,KACKtB,GAAE,CACLuB,SAAU,UAAGD,EAAQ,YAAItB,EAAGuB,UAAWtB,QAAQ,WAAIqB,EAAQ,MAAM,MAErE,C","sources":["webpack:///./src/App.tsx","webpack:///./src/AppEntry.tsx","webpack:///./src/ProtectedRoute.tsx","webpack:///./src/Routes.tsx","webpack:///./src/context/AppContext.js","webpack:///./src/store/index.ts","webpack:///./src/utils/paths.ts"],"sourcesContent":["import React, { Fragment, useEffect, useState } from 'react';\nimport { Reducer } from 'redux';\n\nimport { Routes } from './Routes';\nimport './App.scss';\nimport AppContext, { defaultState } from './context/AppContext';\n\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport NotificationsPortal from '@redhat-cloud-services/frontend-components-notifications/NotificationPortal';\nimport { notificationsReducer } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\nimport { Unavailable } from '@redhat-cloud-services/frontend-components/Unavailable';\n\nconst App = () => {\n  const { updateDocumentTitle, getEnvironment, auth } = useChrome();\n  const [isEntitled, setIsEntitled] = useState(defaultState.isEntitled);\n  const [isEntitlementLoaded, setIsEntitlementLoaded] = useState(\n    defaultState.isEntitlementLoaded\n  );\n\n  // by default entitlement will be disabled in development, use this flag to flip it on\n  const enableEntitlementLocally = false;\n\n  const environment = getEnvironment();\n  const isDevelopment = process.env.NODE_ENV === 'development';\n  const isQAProdAuth = environment === 'qaprodauth';\n\n  useEffect(() => {\n    const fetchEntitlements = async () => {\n      const user = await auth.getUser();\n      if (\n        user !== undefined &&\n        !isQAProdAuth &&\n        (!isDevelopment || enableEntitlementLocally)\n      ) {\n        setIsEntitled(user.entitlements.acs.is_entitled);\n        setIsEntitlementLoaded(true);\n      }\n    };\n\n    fetchEntitlements();\n\n    // because local development is pointed to prod, the useChrome hook sets isProd to true, which consequently\n    // points analytics and entitlements to prod as well. These variables are used to override those issues locally\n    if (isDevelopment || isQAProdAuth) {\n      localStorage.setItem('chrome:analytics:dev', 'true');\n      setIsEntitled(true);\n      setIsEntitlementLoaded(true);\n    }\n\n    const registry = getRegistry();\n    registry.register({ notifications: notificationsReducer as Reducer });\n\n    updateDocumentTitle('acs');\n  }, []);\n\n  if (environment === 'stage') {\n    return <Unavailable />;\n  } else {\n    return (\n      <Fragment>\n        <AppContext.Provider value={{ isEntitled, isEntitlementLoaded }}>\n          <NotificationsPortal />\n          <Routes />\n        </AppContext.Provider>\n      </Fragment>\n    );\n  }\n};\n\nexport default App;\n","import React, { useEffect } from 'react';\nimport { Provider } from 'react-redux';\nimport { init } from './store';\nimport App from './App';\nimport logger from 'redux-logger';\nimport { QueryClient, QueryClientProvider } from 'react-query';\n\nconst queryClient = new QueryClient();\n\nconst AppEntry = () => {\n  useEffect(() => {\n    const rootElm = document.getElementById('root');\n    rootElm?.setAttribute('data-ouia-safe', 'true');\n  }, []);\n\n  return (\n    <Provider\n      store={init(\n        ...(process.env.NODE_ENV !== 'production' ? [logger] : [])\n      ).getStore()}\n    >\n      <QueryClientProvider client={queryClient}>\n        <App />\n      </QueryClientProvider>\n    </Provider>\n  );\n};\n\nexport default AppEntry;\n","import { Navigate } from 'react-router-dom';\nimport React, { useContext } from 'react';\n\nimport AppContext from './context/AppContext';\nimport { linkBasename, mergeToBasename } from './utils/paths';\n\nconst ProtectedRoute = ({ children }: { children: React.ReactElement }) => {\n  const { isEntitled, isEntitlementLoaded } = useContext(AppContext);\n  if (!isEntitlementLoaded) {\n    return <></>;\n  } else if (isEntitled) {\n    return children;\n  } else {\n    return <Navigate to={mergeToBasename('overview', linkBasename)} replace />;\n  }\n};\n\nexport default ProtectedRoute;\n","import React, { Suspense, lazy } from 'react';\nimport { Navigate, Route, Routes as RouterRoutes } from 'react-router-dom';\nimport { linkBasename, mergeToBasename } from './utils/paths';\nimport ProtectedRoute from './ProtectedRoute';\n\nimport { Bullseye, Spinner } from '@patternfly/react-core';\n\nconst OopsPage = lazy(\n  () => import(/* webpackChunkName: \"OopsPage\" */ './routes/OopsPage/OopsPage')\n);\nconst NoPermissionsPage = lazy(\n  () =>\n    import(\n      /* webpackChunkName: \"NoPermissionsPage\" */ './routes/NoPermissionsPage/NoPermissionsPage'\n    )\n);\nconst InstancesPage = lazy(\n  () =>\n    import(\n      /* webpackChunkName: \"InstancesPage\" */ './routes/InstancesPage/InstancesPage'\n    )\n);\nconst InstanceDetailsPage = lazy(\n  () =>\n    import(\n      /* webpackChunkName: \"InstanceDetailsPage\" */ './routes/InstanceDetailsPage/InstanceDetailsPage'\n    )\n);\nconst OverviewPage = lazy(\n  () =>\n    import(\n      /* webpackChunkName: \"OverviewPage\" */ './routes/OverviewPage/OverviewPage'\n    )\n);\n\nconst GettingStartedPage = lazy(\n  () =>\n    import(\n      /* webpackChunkName: \"GettingStartedPage\" */ './routes/GettingStartedPage/GettingStartedPage'\n    )\n);\n\nexport const Routes = () => {\n  return (\n    <Suspense\n      fallback={\n        <Bullseye>\n          <Spinner />\n        </Bullseye>\n      }\n    >\n      <RouterRoutes>\n        <Route path=\"no-permissions\" element={<NoPermissionsPage />} />\n        <Route path=\"oops\" element={<OopsPage />} />\n        <Route\n          path=\"/instances/instance/:instanceId\"\n          element={\n            <ProtectedRoute>\n              <InstanceDetailsPage />\n            </ProtectedRoute>\n          }\n        />\n        <Route\n          path=\"/instances\"\n          element={\n            <ProtectedRoute>\n              <InstancesPage />\n            </ProtectedRoute>\n          }\n        />\n        <Route path=\"/overview\" element={<OverviewPage />} />\n        <Route\n          path=\"/getting-started\"\n          element={\n            <ProtectedRoute>\n              <GettingStartedPage />\n            </ProtectedRoute>\n          }\n        />\n        {/* Finally, catch all unmatched routes */}\n        <Route\n          path=\"*\"\n          element={\n            <Navigate to={mergeToBasename('overview', linkBasename)} replace />\n          }\n        />\n      </RouterRoutes>\n    </Suspense>\n  );\n};\n","import { createContext } from 'react';\n\nexport const defaultState = {\n  isEntitled: false,\n  isEntitlementLoaded: false,\n};\n\nexport const AppContext = createContext(defaultState);\nexport default AppContext;\n","import { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport notificationsMiddleware from '@redhat-cloud-services/frontend-components-notifications/notificationsMiddleware';\nimport ReducerRegistry from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { Middleware, Reducer } from 'redux';\n\nexport let registry: ReducerRegistry<Reducer>;\n\nexport function init(...middleware: Middleware[]) {\n  registry = getRegistry({}, [\n    promiseMiddleware,\n    notificationsMiddleware({ errorDescriptionKey: ['detail', 'stack'] }),\n    ...middleware,\n  ]);\n  return registry;\n}\n","import { To } from 'react-router-dom';\n\nexport const linkBasename = '/application-services/acs';\nexport const mergeToBasename = (to: To, basename: string): To => {\n  if (typeof to === 'string') {\n    // replace possible \"//\" after basename\n    return `${basename}/${to}`.replace(`^${basename}//`, '/');\n  }\n\n  return {\n    ...to,\n    pathname: `${basename}/${to.pathname}`.replace(`^${basename}//`, '/'),\n  };\n};\n"],"names":["updateDocumentTitle","getEnvironment","auth","useState","isEntitled","setIsEntitled","isEntitlementLoaded","setIsEntitlementLoaded","environment","isQAProdAuth","useEffect","getUser","undefined","user","entitlements","acs","is_entitled","localStorage","setItem","register","notifications","Fragment","Provider","value","queryClient","QueryClient","rootElm","document","getElementById","setAttribute","store","getStore","QueryClientProvider","client","children","useContext","Navigate","to","replace","OopsPage","lazy","NoPermissionsPage","InstancesPage","InstanceDetailsPage","OverviewPage","GettingStartedPage","Routes","Suspense","fallback","Route","path","element","defaultState","createContext","init","errorDescriptionKey","middleware","linkBasename","mergeToBasename","basename","pathname"],"sourceRoot":""}