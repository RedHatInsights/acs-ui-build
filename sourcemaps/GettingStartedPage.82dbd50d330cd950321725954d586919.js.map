{"version":3,"file":"js/GettingStartedPage.a56fc420e69266b7814a.js","mappings":"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","sources":["webpack:///./src/components/AppLink.tsx","webpack:///./src/components/BreadcrumbItemLink.js","webpack:///./src/routes/GettingStartedPage/Wizard/HeaderExternalLink.js","webpack:///./src/routes/GettingStartedPage/Wizard/InitialSetup.js","webpack:///./src/routes/GettingStartedPage/Wizard/InstallOptions.js","webpack:///./src/routes/GettingStartedPage/Wizard/Finish.js","webpack:///./src/routes/GettingStartedPage/Wizard/InstallWithHelm.js","webpack:///./src/routes/GettingStartedPage/Wizard/InstallWithOperator.js","webpack:///./src/routes/GettingStartedPage/Wizard/GettingStartedWizard.js","webpack:///./src/routes/GettingStartedPage/GettingStartedPage.js"],"sourcesContent":["import React from 'react';\nimport { Link, LinkProps } from 'react-router-dom';\nimport { linkBasename, mergeToBasename } from '../utils/paths';\n\nconst AppLink = (props: LinkProps) => (\n  <Link {...props} to={mergeToBasename(props.to, linkBasename)} />\n);\n\nexport default AppLink;\n","/* eslint-disable react/jsx-props-no-spreading */\n/* eslint-disable react/prop-types */\nimport React from 'react';\nimport { BreadcrumbItem } from '@patternfly/react-core';\nimport AppLink from '../components/AppLink';\n\nfunction BreadcrumbItemLink({ children, to, ...rest }) {\n  function render({ className, ariaCurrent }) {\n    return (\n      <AppLink className={className} aria-current={ariaCurrent} to={to}>\n        {children}\n      </AppLink>\n    );\n  }\n  return <BreadcrumbItem {...rest} render={render} />;\n}\n\nexport default BreadcrumbItemLink;\n","import React from 'react';\nimport { Button } from '@patternfly/react-core';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\n\nconst HeaderExternalLink = () => {\n  return (\n    <Button\n      component=\"a\"\n      variant=\"link\"\n      icon={<ExternalLinkAltIcon />}\n      iconPosition=\"right\"\n      isInline\n      href=\"https://docs.openshift.com/acs/3.74/installing/getting-started-rhacs-cloud-ocp.html\"\n      target=\"_blank\"\n      aria-label=\"Help with ACS setup\"\n    >\n      Help with ACS setup\n    </Button>\n  );\n};\n\nexport default HeaderExternalLink;\n","import React from 'react';\nimport {\n  Button,\n  Flex,\n  FlexItem,\n  Grid,\n  GridItem,\n  List,\n  ListItem,\n  Stack,\n  StackItem,\n  Text,\n  TextContent,\n  TextVariants,\n  Title,\n} from '@patternfly/react-core';\n\nimport AppLink from '../../../components/AppLink';\nimport HeaderExternalLink from './HeaderExternalLink';\n\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\n\nconst InitialSetup = () => {\n  return (\n    <Stack hasGutter>\n      <StackItem>\n        <Flex justifyContent={{ default: 'justifyContentSpaceBetween' }}>\n          <FlexItem>\n            <Title headingLevel=\"h1\">Initial Setup</Title>\n          </FlexItem>\n          <FlexItem>\n            <HeaderExternalLink />\n          </FlexItem>\n        </Flex>\n      </StackItem>\n      <StackItem>\n        <Grid hasGutter>\n          <GridItem sm={2} xl2={1}>\n            <TextContent>\n              <Text component={TextVariants.h3}>Step 1:</Text>\n            </TextContent>\n          </GridItem>\n          <GridItem sm={10} xl2={11}>\n            <TextContent>\n              <Text component={TextVariants.h3}>\n                Create an ACS Central Instance\n              </Text>\n            </TextContent>\n            <Button\n              variant=\"secondary\"\n              icon={<ExternalLinkAltIcon />}\n              iconPosition=\"right\"\n              className=\"pf-v5-u-my-md\"\n              component={(props) => <AppLink {...props} to={'instances'} />}\n              aria-label=\"Create Instance\"\n              rel=\"noopener noreferrer nofollow\"\n              target=\"_blank\"\n            >\n              Create Instance\n            </Button>\n            <List component=\"ol\" type=\"1\">\n              <ListItem>Choose a name for your instance.</ListItem>\n              <ListItem>\n                Follow the rest of the guidelines and click{' '}\n                <span className=\"pf-v5-u-font-weight-bold\">\n                  Create Instance\n                </span>\n                .\n                <br />\n                It will take about 10 minutes to spin up your instance.\n              </ListItem>\n            </List>\n          </GridItem>\n\n          <GridItem sm={2} xl2={1}>\n            <TextContent>\n              <Text component={TextVariants.h3}>Step 2:</Text>\n            </TextContent>\n          </GridItem>\n          <GridItem sm={10} xl2={11}>\n            <TextContent className=\"pf-v5-u-mb-sm\">\n              <Text component={TextVariants.h3}>\n                Access the ACS Central Interface\n              </Text>\n            </TextContent>\n            <List component=\"ol\" type=\"1\">\n              <ListItem>\n                When your instance is in the{' '}\n                <span className=\"pf-v5-u-font-weight-bold\">ready</span> status,\n                click the name for details.\n              </ListItem>\n              <ListItem>\n                Click the{' '}\n                <span className=\"pf-v5-u-font-weight-bold\">\n                  Open ACS Console\n                </span>{' '}\n                button.\n              </ListItem>\n              <ListItem>Sign in using your Red Hat credentials.</ListItem>\n            </List>\n          </GridItem>\n        </Grid>\n      </StackItem>\n    </Stack>\n  );\n};\n\nexport default InitialSetup;\n","/* eslint-disable react/prop-types */\nimport React from 'react';\nimport {\n  Flex,\n  FlexItem,\n  Radio,\n  Stack,\n  StackItem,\n  Text,\n  TextContent,\n  TextVariants,\n  Title,\n} from '@patternfly/react-core';\nimport { Select, SelectOption } from '@patternfly/react-core/deprecated';\n\nimport HeaderExternalLink from './HeaderExternalLink';\n\nimport { WIZARD_ID } from './GettingStartedWizard';\n\nconst OPENSHIFT = 'openshift';\nconst EKS = 'eks';\nconst AKS = 'aks';\nconst GKE = 'gke';\nconst OPERATOR = 'operator';\nconst HELM = 'helm';\n\nconst InstallOptions = ({\n  selectedEnv,\n  handleSelectedEnvChange,\n  selectedInstallation,\n  handleInstallationChange,\n}) => {\n  const [isSelectOpen, setIsSelectOpen] = React.useState(false);\n\n  const options = [\n    ...(selectedEnv === OPENSHIFT\n      ? [\n          <SelectOption key={0} value={OPERATOR}>\n            Operator (recommended)\n          </SelectOption>,\n        ]\n      : []),\n    <SelectOption key={1} value={HELM}>\n      Helm\n    </SelectOption>,\n  ];\n\n  const handleChange = (_, e) => {\n    handleSelectedEnvChange(e.target.value);\n    if (e.target.value != OPENSHIFT) {\n      handleInstallationChange(HELM);\n    } else {\n      handleInstallationChange(OPERATOR);\n    }\n  };\n\n  const onInstallationMethodSelect = (_, selection) => {\n    setIsSelectOpen(false);\n    handleInstallationChange(selection);\n  };\n\n  const onToggleSelect = () => {\n    setIsSelectOpen((prev) => !prev);\n  };\n\n  return (\n    <Stack hasGutter>\n      <StackItem>\n        <Flex justifyContent={{ default: 'justifyContentSpaceBetween' }}>\n          <FlexItem>\n            <Title headingLevel=\"h1\">SecuredCluster Installation Options</Title>\n          </FlexItem>\n          <FlexItem>\n            <HeaderExternalLink />\n          </FlexItem>\n        </Flex>\n      </StackItem>\n      <StackItem>\n        <TextContent>\n          <Text component={TextVariants.h3}>Select your environment</Text>\n        </TextContent>\n        <Radio\n          label=\"OpenShift\"\n          id={`radio-environment-${OPENSHIFT}`}\n          name={OPENSHIFT}\n          value={OPENSHIFT}\n          aria-label={OPENSHIFT}\n          onChange={(e, _) => handleChange(_, e)}\n          isChecked={selectedEnv === OPENSHIFT}\n        />\n        <Radio\n          label=\"EKS\"\n          id={`radio-environment-${EKS}`}\n          name={EKS}\n          value={EKS}\n          aria-label={EKS}\n          onChange={(e, _) => handleChange(_, e)}\n          isChecked={selectedEnv === EKS}\n        />\n        <Radio\n          label=\"AKS\"\n          id={`radio-environment-${AKS}`}\n          name={AKS}\n          value={AKS}\n          aria-label={AKS}\n          onChange={(e, _) => handleChange(_, e)}\n          isChecked={selectedEnv === AKS}\n        />\n        <Radio\n          label=\"GKE\"\n          id={`radio-environment-${GKE}`}\n          name={GKE}\n          value={GKE}\n          aria-label={GKE}\n          onChange={(e, _) => handleChange(_, e)}\n          isChecked={selectedEnv === GKE}\n        />\n      </StackItem>\n      <StackItem>\n        {selectedEnv && (\n          <>\n            <TextContent>\n              <Text component={TextVariants.h3}>\n                Select your supported installation method\n              </Text>\n            </TextContent>\n            <Select\n              variant=\"single\"\n              isOpen={isSelectOpen}\n              onToggle={onToggleSelect}\n              selections={selectedInstallation}\n              onSelect={onInstallationMethodSelect}\n              aria-label=\"Select your installation method\"\n              menuAppendTo={document.getElementById(WIZARD_ID)}\n            >\n              {options}\n            </Select>\n          </>\n        )}\n      </StackItem>\n    </Stack>\n  );\n};\n\nexport default InstallOptions;\n","import React from 'react';\nimport {\n  Card,\n  Flex,\n  FlexItem,\n  Grid,\n  GridItem,\n  Stack,\n  StackItem,\n  Title,\n} from '@patternfly/react-core';\n\nimport HeaderExternalLink from './HeaderExternalLink';\n\nconst Finish = () => {\n  return (\n    <div>\n      <Stack hasGutter>\n        <StackItem>\n          <Flex justifyContent={{ default: 'justifyContentSpaceBetween' }}>\n            <FlexItem>\n              <Title headingLevel=\"h1\">Finishing Up</Title>\n            </FlexItem>\n            <FlexItem>\n              <HeaderExternalLink />\n            </FlexItem>\n          </Flex>\n        </StackItem>\n        <StackItem>\n          <Title headingLevel=\"h4\">Watch a deep dive demo</Title>\n        </StackItem>\n        <StackItem>\n          <Grid hasGutter>\n            <GridItem md={9} xl2={7}>\n              <Card className=\"marketing-video\">\n                <iframe\n                  src=\"https://www.youtube.com/embed/lFBFW3HmgsA\"\n                  title=\"Advanced Cluster Security in 2 Minutes\"\n                  frameBorder=\"0\"\n                  allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n                  allowFullScreen\n                ></iframe>\n              </Card>\n            </GridItem>\n          </Grid>\n        </StackItem>\n      </Stack>\n    </div>\n  );\n};\n\nexport default Finish;\n","import React from 'react';\nimport {\n  Button,\n  ClipboardCopy,\n  ClipboardCopyButton,\n  CodeBlock,\n  CodeBlockAction,\n  CodeBlockCode,\n  ExpandableSection,\n  Flex,\n  FlexItem,\n  List,\n  ListItem,\n  Stack,\n  StackItem,\n  Title,\n} from '@patternfly/react-core';\n\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\n\nimport centralEndpointImage from '../../../assets/central_api_endpoint.png';\nimport clusterInitBundleImage from '../../../assets/cluster_init_bundle.png';\nimport HeaderExternalLink from './HeaderExternalLink';\n\nconst InstallWithHelm = () => {\n  const [copied, setCopied] = React.useState(false);\n  const [initBundleImageExpanded, setInitBundleImageExpanded] =\n    React.useState(false);\n  const [apiEndpointImageExpanded, setApiEndpointImageExpanded] =\n    React.useState(false);\n\n  const clipboardCopyFunc = (event, text) => {\n    navigator.clipboard.writeText(text.toString());\n  };\n\n  const onCodeBlockCopy = (event, text) => {\n    clipboardCopyFunc(event, text);\n    setCopied(true);\n  };\n\n  const onToggleInitBundleImage = (isExpanded) => {\n    setInitBundleImageExpanded(isExpanded);\n  };\n\n  const onToggleApiEndpointImage = (isExpanded) => {\n    setApiEndpointImageExpanded(isExpanded);\n  };\n\n  const codeBlock =\n    `helm install rhacs-secured-cluster-services rhacs/secured-cluster-services -n stackrox \\\\ \\n` +\n    `-f <path_to_cluster_init_bundle.yaml> \\\\ \\n` +\n    `--set clusterName=<name_of_the_secured_cluster> \\\\ \\n` +\n    `--set centralEndpoint=<endpoint_of_central_service> \\\\ \\n` +\n    `--set imagePullSecrets.username=<your redhat.com username> \\\\ \\n` +\n    `--set imagePullSecrets.password=<your redhat.com password>`;\n\n  const actions = (\n    <React.Fragment>\n      <CodeBlockAction>\n        <ClipboardCopyButton\n          textId=\"code-content\"\n          aria-label=\"Copy to clipboard\"\n          onClick={(e) => onCodeBlockCopy(e, codeBlock)}\n          exitDelay={copied ? 1500 : 600}\n          variant=\"plain\"\n          onTooltipHidden={() => setCopied(false)}\n        >\n          {copied ? 'Copied' : 'Copy'}\n        </ClipboardCopyButton>\n      </CodeBlockAction>\n    </React.Fragment>\n  );\n\n  return (\n    <Stack hasGutter>\n      <StackItem>\n        <Flex justifyContent={{ default: 'justifyContentSpaceBetween' }}>\n          <FlexItem>\n            <Title headingLevel=\"h1\">Install with an Helm</Title>\n          </FlexItem>\n          <FlexItem>\n            <HeaderExternalLink />\n          </FlexItem>\n        </Flex>\n      </StackItem>\n      <StackItem>\n        <div>\n          <span className=\"pf-v5-u-font-weight-bold\">Prerequisites</span>\n        </div>\n        <div>\n          You must have access to the Red Hat Container Registry. For\n          information about downloading images from registry.redhat.io, see{' '}\n          <Button\n            variant=\"link\"\n            icon={<ExternalLinkAltIcon />}\n            iconPosition=\"right\"\n            isInline\n            href=\"https://access.redhat.com/RegistryAuthentication\"\n            target=\"_blank\"\n            component=\"a\"\n            aria-label=\"Red Hat Container Registry Authentication\"\n          >\n            Red Hat Container Registry Authentication.\n          </Button>\n        </div>\n      </StackItem>\n      <StackItem>\n        <div>You must also have:</div>\n        <div className=\"pf-v5-u-ml-xl\">\n          <div>A command line interface environment (CLI) with:</div>\n          <div>\n            Access to the target Kubernetes cluster without RHACS installed\n            previously\n          </div>\n          <div>\n            Admin access to K8s Cluster you with to install (kubeconfig)\n          </div>\n          <div>Helm CLI installed in the same environment</div>\n        </div>\n      </StackItem>\n      <StackItem>\n        <List component=\"ol\" type=\"1\">\n          <ListItem>\n            In the ACS UI, from the menu on the left, go to Platform\n            Configuration -{'>'} Integrations and scroll down to{' '}\n            <span className=\"pf-v5-u-font-weight-bold\">\n              Cluster Init Bundle\n            </span>\n            .\n            <ExpandableSection\n              toggleText={'Show me where'}\n              onToggle={(_event, isExpanded) =>\n                onToggleInitBundleImage(isExpanded)\n              }\n              isExpanded={initBundleImageExpanded}\n            >\n              <img\n                className=\"getting-started-image\"\n                src={clusterInitBundleImage}\n              />\n            </ExpandableSection>\n          </ListItem>\n          <ListItem>\n            Generate a new cluster init bundle and download the resulting YAML\n            file.\n          </ListItem>\n          <ListItem>\n            Use the Helm installation method to create the Secured Cluster\n            services. Supply the created cluster init bundle, a unique cluster\n            name, and the centralEndpoint, which is the URI (including port) of\n            your ACS instance. This URI is listed as{' '}\n            <span className=\"pf-v5-u-font-weight-bold\">\n              Central API Endpoint\n            </span>{' '}\n            under{' '}\n            <span className=\"pf-v5-u-font-weight-bold\">Instance Details</span>.\n            <ExpandableSection\n              toggleText={'Show me where'}\n              onToggle={(_event, isExpanded) =>\n                onToggleApiEndpointImage(isExpanded)\n              }\n              isExpanded={apiEndpointImageExpanded}\n            >\n              <img\n                className=\"getting-started-image\"\n                src={centralEndpointImage}\n              />\n            </ExpandableSection>\n          </ListItem>\n          <ListItem>\n            Run the following Helm install command:\n            <CodeBlock actions={actions} className=\"pf-v5-u-mt-sm\">\n              <CodeBlockCode id=\"code-content\">{codeBlock}</CodeBlockCode>\n            </CodeBlock>\n            <div className=\"pf-v5-u-mt-sm\">\n              If this is the first time you’re using helm, you will need to add\n              the stackrox repo using the following commands:\n            </div>\n            <div className=\"pf-v5-u-mt-sm\">\n              <ClipboardCopy\n                hoverTip=\"Copy\"\n                clickTip=\"Copied\"\n                variant=\"inline-compact\"\n                isCode\n                className=\"pf-v5-u-my-sm\"\n              >\n                {`helm repo add stackrox https://mirror.openshift.com/pub/rhacs/charts`}\n              </ClipboardCopy>\n            </div>\n            <div className=\"pf-v5-u-my-sm\">\n              <ClipboardCopy\n                hoverTip=\"Copy\"\n                clickTip=\"Copied\"\n                variant=\"inline-compact\"\n                isCode\n                className=\"pf-v5-u-my-sm\"\n              >\n                {`helm repo update`}\n              </ClipboardCopy>\n            </div>\n            <div>\n              For image pull secretes, there are better options for credentials\n              for registry.redhat.io, like a{' '}\n              <Button\n                variant=\"link\"\n                icon={<ExternalLinkAltIcon />}\n                iconPosition=\"right\"\n                isInline\n                href=\"https://access.redhat.com/terms-based-registry/#accounts\"\n                target=\"_blank\"\n                component=\"a\"\n                aria-label=\"registry service account\"\n              >\n                registry service account\n              </Button>\n            </div>\n          </ListItem>\n        </List>\n      </StackItem>\n    </Stack>\n  );\n};\n\nexport default InstallWithHelm;\n","import React from 'react';\nimport {\n  Button,\n  ClipboardCopy,\n  ExpandableSection,\n  Flex,\n  FlexItem,\n  List,\n  ListItem,\n  Stack,\n  StackItem,\n  Title,\n} from '@patternfly/react-core';\n\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\n\nimport centralEndpointImage from '../../../assets/central_api_endpoint.png';\nimport clusterInitBundleImage from '../../../assets/cluster_init_bundle.png';\nimport HeaderExternalLink from './HeaderExternalLink';\n\nconst InstallWithOperator = () => {\n  const [initBundleImageExpanded, setInitBundleImageExpanded] =\n    React.useState(false);\n  const [apiEndpointImageExpanded, setApiEndpointImageExpanded] =\n    React.useState(false);\n\n  const onToggleInitBundleImage = (isExpanded) => {\n    setInitBundleImageExpanded(isExpanded);\n  };\n\n  const onToggleApiEndpointImage = (isExpanded) => {\n    setApiEndpointImageExpanded(isExpanded);\n  };\n\n  return (\n    <Stack hasGutter>\n      <StackItem>\n        <Flex justifyContent={{ default: 'justifyContentSpaceBetween' }}>\n          <FlexItem>\n            <Title headingLevel=\"h1\">Install with an Operator</Title>\n          </FlexItem>\n          <FlexItem>\n            <HeaderExternalLink />\n          </FlexItem>\n        </Flex>\n      </StackItem>\n      <StackItem>\n        <List component=\"ol\" type=\"1\">\n          <ListItem>\n            Use the OpenShift console to{' '}\n            <Button\n              variant=\"link\"\n              icon={<ExternalLinkAltIcon />}\n              iconPosition=\"right\"\n              isInline\n              href=\"https://docs.openshift.com/acs/3.72/installing/install-ocp-operator.html\" // TODO: get updated documentation\n              target=\"_blank\"\n              component=\"a\"\n              aria-label=\"install the ACS Operator from Operator Hub\"\n            >\n              install the ACS Operator from Operator Hub\n            </Button>\n            . Create a new OCP project for ACS. A good name choice is{' '}\n            <span className=\"pf-v5-u-font-weight-bold\">rhacs-operator</span>.\n          </ListItem>\n          <ListItem>\n            In the ACS UI, from the menu on the left, go to Platform\n            Configuration -{'>'} Integrations and scroll down to{' '}\n            <span className=\"pf-v5-u-font-weight-bold\">\n              Cluster Init Bundle\n            </span>\n            .\n            <ExpandableSection\n              toggleText={'Show me where'}\n              onToggle={(_event, isExpanded) =>\n                onToggleInitBundleImage(isExpanded)\n              }\n              isExpanded={initBundleImageExpanded}\n            >\n              <img\n                className=\"getting-started-image\"\n                src={clusterInitBundleImage}\n              />\n            </ExpandableSection>\n          </ListItem>\n          <ListItem>\n            Generate a new cluster init bundle and download the resulting YAML\n            file. Also download the Kubernetes secrets file.\n          </ListItem>\n          <ListItem>\n            <div>\n              With the ACS project selected, create the init bundle secrets in\n              OCP by pasting the contents into the OCP console or by using the\n              command:\n            </div>\n            <ClipboardCopy\n              hoverTip=\"Copy\"\n              clickTip=\"Copied\"\n              variant=\"inline-compact\"\n              isCode\n              className=\"pf-v5-u-my-sm\"\n            >\n              {`oc -n rhacs-operator create -f bundlename-cluster-init-secrets.yaml`}\n            </ClipboardCopy>\n          </ListItem>\n          <ListItem>\n            In the ACS Operator, install the Secured Cluster API into the ACS\n            project. Give your cluster a name and specify the Central Endpoint\n            with the Central API Endpoint (including port) from the ACS instance\n            details.\n            <ExpandableSection\n              toggleText={'Show me where'}\n              onToggle={(_event, isExpanded) =>\n                onToggleApiEndpointImage(isExpanded)\n              }\n              isExpanded={apiEndpointImageExpanded}\n            >\n              <img\n                className=\"getting-started-image\"\n                src={centralEndpointImage}\n              />\n            </ExpandableSection>\n          </ListItem>\n        </List>\n      </StackItem>\n    </Stack>\n  );\n};\n\nexport default InstallWithOperator;\n","import React from 'react';\nimport { Button } from '@patternfly/react-core';\nimport {\n  Wizard,\n  WizardContextConsumer,\n  WizardFooter,\n} from '@patternfly/react-core/deprecated';\n\nimport InitialSetup from './InitialSetup';\nimport InstallOptions from './InstallOptions';\nimport Finish from './Finish';\nimport InstallWithHelm from './InstallWithHelm';\nimport InstallWithOperator from './InstallWithOperator';\nimport AppLink from '../../../components/AppLink';\n\nconst INITIAL_SETUP = 'Initial Setup';\nconst OPTIONS = 'Options';\nconst INSTALLATION = 'Installation';\nconst FINISHING_UP = 'Finishing Up';\n\n// needed to append the select to on the InstallOptions page due to overlapping issues\nexport const WIZARD_ID = 'getting-started-wizard';\n\nconst GettingStartedWizard = () => {\n  const [selectedInstallation, setSelectedInstallation] = React.useState(null);\n  const [selectedEnv, setSelectedEnv] = React.useState(null);\n  const [stepIdReached, setStepIdReached] = React.useState(1);\n\n  const handleInstallationChange = (method) => {\n    setSelectedInstallation(method);\n  };\n\n  const handleSelectedEnvChange = (environment) => {\n    setSelectedEnv(environment);\n  };\n\n  const onCurrentStepChanged = ({ id }) => {\n    const step = id.replace(/\\D/g, '');\n    setStepIdReached(parseInt(step));\n  };\n\n  const resetForm = (goToStep) => {\n    setSelectedEnv(null);\n    setStepIdReached(1);\n    goToStep(INITIAL_SETUP);\n  };\n\n  const CustomFooter = (\n    <WizardFooter>\n      <WizardContextConsumer>\n        {({ activeStep, goToStepByName, onNext, onBack }) => {\n          if (activeStep.name !== FINISHING_UP) {\n            return (\n              <>\n                <Button\n                  className={\n                    activeStep.name === OPTIONS &&\n                    !selectedEnv &&\n                    !selectedInstallation\n                      ? 'pf-m-disabled'\n                      : ''\n                  }\n                  variant=\"primary\"\n                  type=\"submit\"\n                  onClick={onNext}\n                  aria-label=\"Next step\"\n                  id={`${activeStep.id}-next`}\n                >\n                  Next\n                </Button>\n                {activeStep.name !== INITIAL_SETUP && (\n                  <Button\n                    variant=\"secondary\"\n                    onClick={onBack}\n                    aria-label=\"Previous step\"\n                    id={`${activeStep.id}-back`}\n                  >\n                    Back\n                  </Button>\n                )}\n              </>\n            );\n          }\n          return (\n            <>\n              <Button\n                component={(props) => <AppLink {...props} to={'instances'} />}\n                aria-label=\"Finish\"\n              >\n                Finish\n              </Button>\n              <Button\n                variant=\"secondary\"\n                onClick={() => resetForm(goToStepByName)}\n                aria-label=\"Install another\"\n              >\n                Install Another\n              </Button>\n            </>\n          );\n        }}\n      </WizardContextConsumer>\n    </WizardFooter>\n  );\n\n  const steps = [\n    {\n      name: INITIAL_SETUP,\n      component: <InitialSetup />,\n      canJumpTo: stepIdReached === 1,\n      id: 'wizard-step-1',\n    },\n    {\n      name: OPTIONS,\n      component: (\n        <InstallOptions\n          selectedEnv={selectedEnv}\n          handleSelectedEnvChange={handleSelectedEnvChange}\n          selectedInstallation={selectedInstallation}\n          handleInstallationChange={handleInstallationChange}\n        />\n      ),\n      canJumpTo: stepIdReached === 2,\n      id: 'wizard-step-2',\n    },\n    {\n      name: INSTALLATION,\n      component:\n        selectedInstallation === 'operator' ? (\n          <InstallWithOperator />\n        ) : (\n          <InstallWithHelm />\n        ),\n      canJumpTo: stepIdReached === 3,\n      id: 'wizard-step-3',\n    },\n    {\n      name: FINISHING_UP,\n      component: <Finish />,\n      canJumpTo: stepIdReached === 4,\n      id: 'wizard-step-4',\n    },\n  ];\n\n  const title = 'getting started wizard';\n\n  return (\n    <Wizard\n      navAriaLabel={`${title} steps`}\n      mainAriaLabel={`${title} content`}\n      steps={steps}\n      id=\"getting-started-wizard\"\n      onCurrentStepChanged={onCurrentStepChanged}\n      footer={CustomFooter}\n    />\n  );\n};\n\nexport default GettingStartedWizard;\n","import React from 'react';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  Button,\n  Flex,\n  FlexItem,\n  PageSection,\n  Text,\n  TextContent,\n  TextVariants,\n} from '@patternfly/react-core';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\n\nimport BreadcrumbItemLink from '../../components/BreadcrumbItemLink';\nimport GettingStartedWizard from './Wizard/GettingStartedWizard';\n\nfunction GettingStartedPage() {\n  return (\n    <div>\n      <PageHeader>\n        <Flex direction={{ default: 'column' }}>\n          <FlexItem>\n            <Breadcrumb>\n              <BreadcrumbItemLink to=\"/overview\">ACS</BreadcrumbItemLink>\n              <BreadcrumbItem isActive>Get started with ACS</BreadcrumbItem>\n            </Breadcrumb>\n          </FlexItem>\n          <FlexItem>\n            <PageHeaderTitle title=\"Get started with Red Hat Advanced Cluster Security\" />\n          </FlexItem>\n          <FlexItem>\n            <TextContent>\n              <Text component={TextVariants.p}>\n                The solution helps improve the security of the application build\n                process, protects the application platform and configurations,\n                detects runtime issues, and facilitates response.{' '}\n                <Button\n                  variant=\"link\"\n                  icon={<ExternalLinkAltIcon />}\n                  iconPosition=\"right\"\n                  isInline\n                  href=\"https://docs.openshift.com/acs/3.74/welcome/index.html\"\n                  target=\"_blank\"\n                  component=\"a\"\n                  aria-label=\"Learn more about ACS\"\n                >\n                  Learn more about ACS\n                </Button>{' '}\n                or{' '}\n                <Button\n                  variant=\"link\"\n                  icon={<ExternalLinkAltIcon />}\n                  iconPosition=\"right\"\n                  isInline\n                  onClick={() => {\n                    window.open('mailto:acscs-feedback@redhat.com');\n                  }}\n                  aria-label=\"Email us\"\n                >\n                  Email us\n                </Button>\n              </Text>\n            </TextContent>\n          </FlexItem>\n        </Flex>\n      </PageHeader>\n      <PageSection>\n        <GettingStartedWizard />\n      </PageSection>\n    </div>\n  );\n}\n\nexport default GettingStartedPage;\n"],"names":["props","Link","to","children","rest","render","className","ariaCurrent","Button","component","variant","icon","iconPosition","isInline","href","target","Stack","hasGutter","StackItem","Flex","justifyContent","default","FlexItem","Title","headingLevel","Grid","GridItem","sm","xl2","TextContent","Text","h3","AppLink","rel","List","type","ListItem","OPENSHIFT","EKS","AKS","GKE","OPERATOR","HELM","selectedEnv","handleSelectedEnvChange","selectedInstallation","handleInstallationChange","isSelectOpen","setIsSelectOpen","options","SelectOption","key","value","handleChange","_","e","Radio","label","id","name","onChange","isChecked","Select","isOpen","onToggle","prev","selections","onSelect","selection","menuAppendTo","document","getElementById","WIZARD_ID","md","Card","src","title","frameBorder","allow","allowFullScreen","copied","setCopied","initBundleImageExpanded","setInitBundleImageExpanded","apiEndpointImageExpanded","setApiEndpointImageExpanded","codeBlock","actions","CodeBlockAction","ClipboardCopyButton","textId","onClick","event","text","navigator","clipboard","writeText","toString","clipboardCopyFunc","exitDelay","onTooltipHidden","ExpandableSection","toggleText","_event","isExpanded","onToggleInitBundleImage","onToggleApiEndpointImage","CodeBlock","CodeBlockCode","ClipboardCopy","hoverTip","clickTip","isCode","INITIAL_SETUP","OPTIONS","FINISHING_UP","setSelectedInstallation","setSelectedEnv","stepIdReached","setStepIdReached","CustomFooter","WizardFooter","WizardContext","activeStep","goToStepByName","onNext","onBack","goToStep","steps","canJumpTo","environment","method","Wizard","navAriaLabel","mainAriaLabel","onCurrentStepChanged","step","replace","parseInt","footer","PageHeader","direction","Breadcrumb","BreadcrumbItemLink","BreadcrumbItem","isActive","PageHeaderTitle","p","window","open","PageSection"],"sourceRoot":""}