{"version":3,"file":"js/InstancesPage.acbb5ca76f9d99d49578.js","mappings":"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","sources":["webpack:///./src/components/InstanceDetailsList.js","webpack:///./src/components/RegionLabel.js","webpack:///./src/hooks/apis/useApi.js","webpack:///./src/hooks/apis/useCloudRegions.js","webpack:///./src/hooks/apis/useInstances.js","webpack:///./src/hooks/apis/useCloudAccounts.js","webpack:///./src/hooks/useAnalytics.js","webpack:///./src/components/SelectSingle.js","webpack:///./src/routes/InstancesPage/CreateInstanceModal.js","webpack:///./src/routes/InstancesPage/DeleteInstanceModal.js","webpack:///./src/routes/InstancesPage/InstanceDetailsDrawer.js","webpack:///./src/utils/status.js","webpack:///./src/components/Status.js","webpack:///./src/routes/InstancesPage/InstancesToolbarSearchFilter.js","webpack:///./src/utils/searchQuery.js","webpack:///./src/routes/InstancesPage/InstancesPage.js","webpack:///./src/hooks/usePagination.js","webpack:///./src/hooks/useTableSort.js","webpack:///./src/hooks/apis/useCreateInstance.js","webpack:///./src/hooks/apis/useDeleteInstance.js","webpack:///./src/utils/cloudProvider.js","webpack:///./src/utils/date.js","webpack:///./src/utils/queryString.js","webpack:///./src/utils/region.js"],"sourcesContent":["/* eslint-disable react/prop-types */\nimport React from 'react';\nimport {\n  ClipboardCopy,\n  DescriptionList,\n  DescriptionListDescription,\n  DescriptionListGroup,\n  DescriptionListTerm,\n} from '@patternfly/react-core';\n\nimport { getDateTime } from '../utils/date';\nimport { cloudProviderValueToLabel } from '../utils/cloudProvider';\nimport RegionLabel from './RegionLabel';\n\nfunction InstanceDetailsList({ instance }) {\n  return (\n    <DescriptionList isHorizontal>\n      <DescriptionListGroup>\n        <DescriptionListTerm>Cloud provider</DescriptionListTerm>\n        <DescriptionListDescription>\n          {cloudProviderValueToLabel(instance.cloud_provider)}\n        </DescriptionListDescription>\n      </DescriptionListGroup>\n      <DescriptionListGroup>\n        <DescriptionListTerm>Region</DescriptionListTerm>\n        <DescriptionListDescription>\n          <RegionLabel id={instance.region} />\n        </DescriptionListDescription>\n      </DescriptionListGroup>\n      <DescriptionListGroup>\n        <DescriptionListTerm>ID</DescriptionListTerm>\n        <DescriptionListDescription>\n          <ClipboardCopy\n            hoverTip=\"Copy\"\n            clickTip=\"Copied\"\n            variant=\"inline-compact\"\n          >\n            {instance.id}\n          </ClipboardCopy>\n        </DescriptionListDescription>\n      </DescriptionListGroup>\n      <DescriptionListGroup>\n        <DescriptionListTerm>Owner</DescriptionListTerm>\n        <DescriptionListDescription>\n          {instance.owner}\n        </DescriptionListDescription>\n      </DescriptionListGroup>\n      <DescriptionListGroup>\n        <DescriptionListTerm>Time created</DescriptionListTerm>\n        <DescriptionListDescription>\n          {getDateTime(instance.created_at)}\n        </DescriptionListDescription>\n      </DescriptionListGroup>\n      <DescriptionListGroup>\n        <DescriptionListTerm>Time updated</DescriptionListTerm>\n        <DescriptionListDescription>\n          {getDateTime(instance.updated_at)}\n        </DescriptionListDescription>\n      </DescriptionListGroup>\n      <DescriptionListGroup>\n        <DescriptionListTerm>\n          Central API endpoint (Sensor mTLS)\n        </DescriptionListTerm>\n        <DescriptionListDescription>\n          <ClipboardCopy\n            hoverTip=\"Copy\"\n            clickTip=\"Copied\"\n            variant=\"inline-compact\"\n          >\n            {instance.centralDataURL || '-'}\n          </ClipboardCopy>\n        </DescriptionListDescription>\n      </DescriptionListGroup>\n      <DescriptionListGroup>\n        <DescriptionListTerm>Central instance (UI, roxctl)</DescriptionListTerm>\n        <DescriptionListDescription>\n          <ClipboardCopy\n            hoverTip=\"Copy\"\n            clickTip=\"Copied\"\n            variant=\"inline-compact\"\n          >\n            {instance.centralUIURL || '-'}\n          </ClipboardCopy>\n        </DescriptionListDescription>\n      </DescriptionListGroup>\n    </DescriptionList>\n  );\n}\n\nexport default InstanceDetailsList;\n","/* eslint-disable react/prop-types */\nimport React from 'react';\nimport { useCloudRegions } from '../hooks/apis/useCloudRegions';\nimport { useMemo } from 'react';\nimport { AWS_PROVIDER } from '../utils/cloudProvider';\nimport { getRegionDisplayName } from '../utils/region';\n\nexport default function RegionLabel({ id }) {\n  const { data: regionList } = useCloudRegions({ provider: AWS_PROVIDER });\n  const region = useMemo(() => {\n    return regionList?.items.find((r) => r.id === id);\n  }, [regionList, id]);\n  return <span>{region ? getRegionDisplayName(region) : id}</span>;\n}\n","import { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\n\nimport axios from 'axios';\n\nconst API_PROD_URL = 'https://api.openshift.com';\nconst API_STAGE_URL = 'https://api.stage.openshift.com';\nconst API_INTEGRATION_URL = 'https://api.integration.openshift.com';\n\nexport default function useApi() {\n  const { isProd, isBeta } = useChrome();\n  let apiUrl = API_STAGE_URL;\n  if (isProd()) {\n    apiUrl = API_PROD_URL;\n  } else if (isBeta()) {\n    apiUrl = API_INTEGRATION_URL;\n  }\n  const authInterceptor = (client) => {\n    client.interceptors.request.use(async (cfg) => {\n      await insights.chrome.auth.getUser();\n      const token = await insights.chrome.auth.getToken();\n      const BASE_URL = cfg.baseURL || apiUrl;\n      const updatedCfg = { ...cfg, url: `${BASE_URL}${cfg.url}` };\n      if (token) {\n        updatedCfg.headers = {\n          ...updatedCfg.headers,\n          Authorization: `Bearer ${token}`,\n        };\n      }\n      delete updatedCfg.customHost;\n      return updatedCfg;\n    });\n    return client;\n  };\n  return authInterceptor(axios.create());\n}\n","import { useQuery } from 'react-query';\n\nimport { getQueryString } from '../../utils/queryString';\nimport useApi from './useApi';\n\nexport const queryKey = (query) => ['cloud_regions', query];\n\nconst getCloudRegions = async (apiRequest, { provider, instanceType }) => {\n  const queryString = getQueryString({ instance_type: instanceType });\n  const { data } = await apiRequest.get(\n    `/api/rhacs/v1/cloud_providers/${provider}/regions?${queryString}`\n  );\n  return data;\n};\n\nexport const useCloudRegions = (query, options) => {\n  const apiRequest = useApi();\n  return useQuery(queryKey(query), () => getCloudRegions(apiRequest, query), {\n    // Those regions are not going to change very often, so we can cache them for a long time.\n    // Worst case, a good old browser refresh will fix an outdated region list.\n    staleTime: Infinity,\n    ...options,\n  });\n};\n","import { useQuery } from 'react-query';\n\nimport { getQueryString } from '../../utils/queryString';\nimport useApi from './useApi';\n\nconst getInstances = async (apiRequest, { query }) => {\n  const queryString = getQueryString(query);\n  const { data } = await apiRequest.get(\n    `/api/rhacs/v1/centrals?${queryString}`\n  );\n  return data;\n};\n\nexport default function useInstances(options) {\n  const { refetchInterval } = options;\n  const apiRequest = useApi();\n  return useQuery(\n    ['instances', options],\n    () => getInstances(apiRequest, options),\n    {\n      refetchInterval,\n    }\n  );\n}\n","import { useQuery } from 'react-query';\nimport useApi from './useApi';\n\nexport const queryKey = 'cloud_accounts';\n\nconst getCloudAccounts = async (apiRequest) => {\n  const { data } = await apiRequest.get(`/api/rhacs/v1/cloud_accounts`);\n  return data;\n};\n\nexport default function useCloudAccounts() {\n  const apiRequest = useApi();\n  return useQuery([queryKey], () => getCloudAccounts(apiRequest));\n}\n","import useChrome from '@redhat-cloud-services/frontend-components/useChrome';\n\n// the chrome hook assumes we're in a prod env because local development points\n// to prod.foo.redhat.com and uses the wrong write key when initializing segment.\n// to avoid this we can set chrome:analytics:dev to true in local storage\n// to initialize segment with the correct write key and test events in dev\n\n// one caveat to note is we cant prevent sending the initial page/group/identity events\n// to the wrong segment environment when segment is initialized before the key is set\n\nfunction useAnalytics() {\n  const { analytics } = useChrome();\n\n  function analyticsTrack(event) {\n    const isProdEnv = process.env.NODE_ENV === 'production';\n    const isDevEnv = process.env.NODE_ENV === 'development';\n    const analyticsDevKeySet =\n      localStorage.getItem('chrome:analytics:dev') === 'true';\n\n    if (isProdEnv || (isDevEnv && analyticsDevKeySet)) {\n      analytics.track(event);\n    }\n  }\n\n  return {\n    analyticsTrack,\n  };\n}\n\nexport default useAnalytics;\n","/* eslint-disable react/prop-types */\nimport React, { useState } from 'react';\nimport { Select, SelectVariant } from '@patternfly/react-core/deprecated';\n\nfunction SelectSingle({\n  toggleIcon,\n  id,\n  value,\n  handleSelect,\n  isDisabled = false,\n  children,\n  direction = 'down',\n  isCreatable = false,\n  variant = null,\n  placeholderText = '',\n  menuAppendTo = undefined,\n}) {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const isTypeahead =\n    variant === 'typeahead' ? SelectVariant.typeahead : SelectVariant.single;\n\n  function onSelect(_event, selection) {\n    // The mouse event is not useful.\n    setIsOpen(false);\n    handleSelect(id, selection);\n  }\n\n  return (\n    <Select\n      variant={isTypeahead}\n      toggleIcon={toggleIcon}\n      id={id}\n      isDisabled={isDisabled}\n      isOpen={isOpen}\n      onSelect={onSelect}\n      onToggle={(_event, val) => setIsOpen(val)}\n      selections={value}\n      direction={direction}\n      isCreatable={isCreatable}\n      placeholderText={placeholderText}\n      toggleId={id}\n      menuAppendTo={menuAppendTo}\n    >\n      {children}\n    </Select>\n  );\n}\n\nexport default SelectSingle;\n","/* eslint-disable react/prop-types */\nimport React, { useEffect, useMemo, useState } from 'react';\nimport {\n  Alert,\n  Button,\n  Form,\n  FormGroup,\n  FormHelperText,\n  HelperText,\n  HelperTextItem,\n  Modal,\n  ModalVariant,\n  TextInput,\n} from '@patternfly/react-core';\nimport { SelectOption } from '@patternfly/react-core/deprecated';\n\nimport SelectSingle from '../../components/SelectSingle';\nimport useAnalytics from '../../hooks/useAnalytics';\nimport { useCloudRegions } from '../../hooks/apis/useCloudRegions';\nimport { AWS_DEFAULT_REGION, AWS_PROVIDER } from '../../utils/cloudProvider';\nimport { getRegionDisplayName } from '../../utils/region';\n\nconst defaultFormValues = {\n  name: '',\n  // this value is left out of the form because no other options are available to the user (ROX-18865)\n  cloud_provider: AWS_PROVIDER,\n  region: AWS_DEFAULT_REGION,\n  // this value is left out of the form because no other options are available to the user (ROX-18865)\n  availabilityZones: 'multi',\n  cloud_account_id: '',\n};\n\nfunction CreateInstanceModal({\n  isOpen,\n  onClose,\n  onRequestCreate,\n  cloudAccountIds,\n}) {\n  const [errorMessage, setErrorMessage] = useState(null);\n  const [formValues, setFormValues] = useState(defaultFormValues);\n  const [isRequestingCreate, setIsRequestingCreate] = useState(false);\n  const { analyticsTrack } = useAnalytics();\n\n  // default select a cloud account if there is only one available\n  // @TODO: Make a test for this\n  useEffect(() => {\n    if (formValues.cloud_account_id === '' && cloudAccountIds.length === 1) {\n      setFormValues((prevValues) => {\n        return { ...prevValues, cloud_account_id: cloudAccountIds[0] };\n      });\n    }\n  }, [cloudAccountIds]);\n\n  const { data: cloudRegionList, isFetching: isFetchingRegions } =\n    useCloudRegions({\n      provider: AWS_PROVIDER,\n    });\n  const cloudRegions = useMemo(\n    () => cloudRegionList?.items || [],\n    [cloudRegionList]\n  );\n  const enabledCloudRegions = useMemo(\n    () => cloudRegions.filter((r) => r.enabled),\n    [cloudRegions]\n  );\n\n  function onCloseHandler() {\n    // clear all state before closing\n    setErrorMessage(null);\n    setFormValues(defaultFormValues);\n    setIsRequestingCreate(false);\n    onClose();\n  }\n\n  async function onRequestCreateHandler() {\n    analyticsTrack('create-instance-form-submitted');\n    setIsRequestingCreate(true);\n    const result = await onRequestCreate(formValues);\n    setIsRequestingCreate(false);\n    if (result instanceof Error) {\n      const errorMessage = result.response.data.reason;\n      setErrorMessage(errorMessage);\n    } else {\n      setFormValues(defaultFormValues);\n      onClose();\n    }\n  }\n\n  function onCloudRegionSelect(id, selection) {\n    setFormValues((prevFormValues) => ({\n      ...prevFormValues,\n      region: selection,\n    }));\n  }\n\n  function onChangeAWSAccountNumber(id, selection) {\n    setFormValues((prevFormValues) => ({\n      ...prevFormValues,\n      cloud_account_id: selection,\n    }));\n  }\n\n  function onNameChange(value) {\n    setFormValues((prevFormValues) => ({\n      ...prevFormValues,\n      name: value,\n    }));\n  }\n\n  function getAWSHelperText() {\n    if (cloudAccountIds.length === 0) {\n      return 'This will be attributed to your Red Hat subscription.';\n    }\n    if (cloudAccountIds.length === 1) {\n      return 'The AWS account indicated, which is linked to your Red Hat organization, will be used for billing purposes.';\n    }\n    if (cloudAccountIds.length > 1) {\n      return 'Please select one of the AWS accounts for billing purposes.';\n    }\n    return undefined;\n  }\n\n  function isInvalidForm() {\n    return (\n      !formValues?.name ||\n      (cloudAccountIds.length > 1 && !formValues?.cloud_account_id)\n    );\n  }\n\n  return (\n    <Modal\n      variant={ModalVariant.small}\n      title=\"Create ACS instance\"\n      isOpen={isOpen}\n      onClose={onCloseHandler}\n      actions={[\n        <Button\n          key=\"createInstance\"\n          variant=\"primary\"\n          onClick={onRequestCreateHandler}\n          isLoading={isRequestingCreate}\n          isDisabled={isRequestingCreate || isInvalidForm()}\n        >\n          Create instance\n        </Button>,\n        <Button\n          key=\"cancel\"\n          variant=\"link\"\n          onClick={onCloseHandler}\n          isDisabled={isRequestingCreate}\n        >\n          Cancel\n        </Button>,\n      ]}\n    >\n      {errorMessage && (\n        <div className=\"pf-v5-u-mb-md\">\n          <Alert variant=\"danger\" title={errorMessage} />\n        </div>\n      )}\n      <Form>\n        <FormGroup label=\"Name\" isRequired fieldId=\"name\">\n          <TextInput\n            isRequired\n            type=\"text\"\n            id=\"name\"\n            name=\"name\"\n            value={formValues.name}\n            onChange={(_event, value) => onNameChange(value)}\n          />\n          <FormHelperText>\n            <HelperText>\n              <HelperTextItem>\n                Must start with a letter and end with a letter or number. Valid\n                characters include lowercase letters from a to z, numbers from 0\n                to 9, and hyphens ( - ).\n              </HelperTextItem>\n            </HelperText>\n          </FormHelperText>\n        </FormGroup>\n        <FormGroup\n          label=\"AWS account number\"\n          isRequired={cloudAccountIds.length > 1}\n          fieldId=\"cloud_account_id\"\n        >\n          <SelectSingle\n            id=\"cloud_account_id\"\n            value={formValues.cloud_account_id}\n            handleSelect={onChangeAWSAccountNumber}\n            placeholderText=\"Select an AWS Account\"\n            menuAppendTo=\"parent\"\n            isDisabled={cloudAccountIds.length <= 1}\n          >\n            {cloudAccountIds.map((cloudAccountId) => {\n              return (\n                <SelectOption key={cloudAccountId} value={cloudAccountId}>\n                  {cloudAccountId}\n                </SelectOption>\n              );\n            })}\n          </SelectSingle>\n          <FormHelperText>\n            <HelperText>\n              <HelperTextItem>{getAWSHelperText()}</HelperTextItem>\n            </HelperText>\n          </FormHelperText>\n        </FormGroup>\n        <FormGroup label=\"Cloud region\" isRequired fieldId=\"region\">\n          <SelectSingle\n            id=\"region\"\n            isDisabled={isFetchingRegions}\n            value={formValues.region}\n            handleSelect={onCloudRegionSelect}\n            menuAppendTo={() => document.body}\n          >\n            <SelectOption value=\"\" isPlaceholder isDisabled={true}>\n              Choose a region\n            </SelectOption>\n            {enabledCloudRegions.map((region) => {\n              return (\n                <SelectOption key={region.id} value={region.id}>\n                  {getRegionDisplayName(region)}\n                </SelectOption>\n              );\n            })}\n          </SelectSingle>\n        </FormGroup>\n      </Form>\n    </Modal>\n  );\n}\n\nexport default CreateInstanceModal;\n","/* eslint-disable react/prop-types */\nimport {\n  Alert,\n  AlertVariant,\n  Button,\n  Form,\n  FormGroup,\n  HelperText,\n  HelperTextItem,\n  Modal,\n  ModalVariant,\n  TextInput,\n} from '@patternfly/react-core';\nimport React, { useState } from 'react';\n\nimport useAnalytics from '../../hooks/useAnalytics';\n\nfunction DeleteInstanceModal({ isOpen, instance, onRequestDelete, onClose }) {\n  const [inputValue, setInputValue] = useState('');\n  const [isRequestingDelete, setIsRequestingDelete] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n  const { analyticsTrack } = useAnalytics();\n\n  async function onRequestDeleteHandler() {\n    setIsRequestingDelete(true);\n    setErrorMessage('');\n    analyticsTrack('delete-instance-form-submitted');\n    const result = await onRequestDelete(instance.id);\n    setIsRequestingDelete(false);\n    if (result.isAxiosError) {\n      setErrorMessage(\n        result.message ||\n          'An unanticipated error occurred. Please try again. If this error persists, please contact support.'\n      );\n    } else {\n      setInputValue('');\n      onClose();\n    }\n  }\n\n  function deleteInstanceOnSubmit(e) {\n    e.preventDefault();\n    if (inputMatchesInstanceName()) {\n      onRequestDeleteHandler();\n    }\n  }\n\n  function inputMatchesInstanceName() {\n    return instance.name === inputValue;\n  }\n\n  if (!instance) return null;\n\n  return (\n    <Modal\n      variant={ModalVariant.small}\n      title=\"Delete instance?\"\n      isOpen={isOpen}\n      onClose={onClose}\n      actions={[\n        <Button\n          key=\"createInstance\"\n          variant=\"danger\"\n          onClick={onRequestDeleteHandler}\n          isLoading={isRequestingDelete}\n          isDisabled={isRequestingDelete || !inputMatchesInstanceName()}\n        >\n          Delete instance\n        </Button>,\n        <Button\n          key=\"cancel\"\n          variant=\"link\"\n          onClick={onClose}\n          isDisabled={isRequestingDelete}\n        >\n          Cancel\n        </Button>,\n      ]}\n    >\n      <div className=\"pf-v5-u-pb-md\">\n        <div>\n          This will permanently delete{' '}\n          <span className=\"pf-v5-u-font-weight-bold\">{instance.name}</span>.\n        </div>\n        <div>This action cannot be undone.</div>\n      </div>\n      <Form onSubmit={deleteInstanceOnSubmit}>\n        <FormGroup\n          label=\"Confirmation\"\n          isRequired\n          fieldId=\"confirmationInstanceName\"\n        >\n          <TextInput\n            isRequired\n            type=\"text\"\n            id=\"confirmationInstanceName\"\n            name=\"confirmationInstanceName\"\n            value={inputValue}\n            onChange={(_event, val) => setInputValue(val)}\n          />\n        </FormGroup>\n        <HelperText>\n          <HelperTextItem>\n            Type{' '}\n            <span className=\"pf-v5-u-font-weight-bold\">{instance.name}</span> to\n            confirm.\n          </HelperTextItem>\n        </HelperText>\n        {errorMessage.length > 0 && (\n          <Alert isInline variant={AlertVariant.danger} title={errorMessage} />\n        )}\n      </Form>\n    </Modal>\n  );\n}\n\nexport default DeleteInstanceModal;\n","/* eslint-disable react/prop-types */\nimport {\n  Divider,\n  Drawer,\n  DrawerActions,\n  DrawerCloseButton,\n  DrawerContent,\n  DrawerContentBody,\n  DrawerHead,\n  DrawerPanelContent,\n  Text,\n  TextContent,\n  TextVariants,\n} from '@patternfly/react-core';\nimport React from 'react';\n\nimport InstanceDetailsList from '../../components/InstanceDetailsList';\n\nfunction InstanceDetailsDrawer({ isExpanded, onClose, instance, children }) {\n  return (\n    <Drawer isExpanded={isExpanded}>\n      <DrawerContent\n        panelContent={\n          <DrawerPanelContent>\n            <DrawerHead>\n              <div>\n                <TextContent>\n                  <Text component={TextVariants.small}>Name</Text>\n                </TextContent>\n                <TextContent>\n                  <Text component={TextVariants.h2}>{instance?.name}</Text>\n                </TextContent>\n              </div>\n              <DrawerActions>\n                <DrawerCloseButton onClick={onClose} />\n              </DrawerActions>\n            </DrawerHead>\n            <Divider component=\"div\" />\n            <DrawerContentBody>\n              {instance && <InstanceDetailsList instance={instance} />}\n            </DrawerContentBody>\n          </DrawerPanelContent>\n        }\n      >\n        {children}\n      </DrawerContent>\n    </Drawer>\n  );\n}\n\nexport default InstanceDetailsDrawer;\n","export const statuses = {\n  accepted: 'Request accepted',\n  preparing: 'Creation pending',\n  provisioning: 'Creation in progress',\n  ready: 'Ready',\n  failed: 'Failed',\n  deprovision: 'Deprovisioning',\n  deleting: 'Deleting',\n};\n\nexport const statusOptions = Object.keys(statuses).map((statusValue) => {\n  return {\n    value: statusValue,\n    label: statuses[statusValue],\n  };\n});\n\nexport function statusValueToLabel(statusValue) {\n  return statuses[statusValue];\n}\n\nexport function statusLabelToValue(statusLabel) {\n  const statusOption = statusOptions.find(\n    (statusOption) => statusOption.label === statusLabel\n  );\n  return statusOption?.value;\n}\n","/* eslint-disable react/prop-types */\nimport React from 'react';\nimport {\n  CheckCircleIcon,\n  ExclamationCircleIcon,\n  PendingIcon,\n} from '@patternfly/react-icons';\nimport { Flex, FlexItem, Spinner } from '@patternfly/react-core';\n\nimport { statuses } from '../utils/status';\n\nconst statusMessages = {\n  accepted: {\n    message: statuses.accepted,\n    component: <PendingIcon />,\n  },\n  preparing: {\n    message: statuses.preparing,\n    component: <PendingIcon />,\n  },\n  provisioning: {\n    message: statuses.provisioning,\n    component: <Spinner size=\"md\" />,\n  },\n  ready: {\n    message: statuses.ready,\n    component: <CheckCircleIcon className=\"pf-v5-u-success-color-100\" />,\n  },\n  failed: {\n    message: statuses.failed,\n    component: <ExclamationCircleIcon className=\"pf-v5-u-danger-color-100\" />,\n  },\n  deprovision: {\n    message: statuses.deprovision,\n    component: <Spinner size=\"md\" />,\n  },\n  deleting: {\n    message: statuses.deleting,\n    component: <Spinner size=\"md\" />,\n  },\n};\n\nfunction Status({ status }) {\n  const { message, component } = statusMessages[status] || {\n    message: 'N/A',\n    component: null,\n  };\n\n  return (\n    <Flex>\n      <FlexItem>{component}</FlexItem>\n      <FlexItem>{message}</FlexItem>\n    </Flex>\n  );\n}\n\nexport default Status;\n","import React, { useMemo, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Button,\n  InputGroup,\n  InputGroupItem,\n  TextInput,\n  ToolbarFilter,\n  ToolbarGroup,\n  ToolbarItem,\n  ToolbarToggleGroup,\n} from '@patternfly/react-core';\nimport {\n  Select,\n  SelectOption,\n  SelectVariant,\n} from '@patternfly/react-core/deprecated';\nimport { FilterIcon, SearchIcon } from '@patternfly/react-icons';\n\nimport { statusOptions } from '../../utils/status';\nimport SelectSingle from '../../components/SelectSingle';\nimport { useCloudRegions } from '../../hooks/apis/useCloudRegions';\nimport { AWS_PROVIDER } from '../../utils/cloudProvider';\nimport { getRegionDisplayName } from '../../utils/region';\n\nfunction InstancesToolbarSearchFilter({ filters, setFilters }) {\n  const [selectedFilter, setSelectedFilter] = useState('Name');\n  // local state for input values\n  const [inputName, setInputName] = useState('');\n  const [inputOwner, setInputOwner] = useState('');\n  // local state for Select isExpanded values\n  // @TODO: We can refactor the SelectSingle component to be more reusable for the usecase in this component as well. Then we don't need to keep this state here.\n  const [isRegionExpanded, setIsRegionExpanded] = useState(false);\n  const [isStatusExpanded, setIsStatusExpanded] = useState(false);\n  const { data: cloudRegionList } = useCloudRegions({ provider: AWS_PROVIDER });\n  const cloudRegions = useMemo(\n    () => cloudRegionList?.items || [],\n    [cloudRegionList]\n  );\n\n  // TODO: Extract into separate utils file to be reused in other cases\n  function onDeleteChip(type = '', id = '') {\n    setFilters((prevFilters) => {\n      const newFilters = { ...prevFilters };\n      const newValue = newFilters[type.toLowerCase()].filter((s) => s !== id);\n      if (newValue?.length === 0) {\n        delete newFilters[type.toLowerCase()];\n      } else {\n        newFilters[type.toLowerCase()] = newValue;\n      }\n      return newFilters;\n    });\n  }\n\n  // TODO: Extract into separate utils file to be reused in other cases\n  function onDeleteChipGroup(type) {\n    setFilters((prevFilters) => {\n      const newFilters = { ...prevFilters };\n      delete newFilters[type.toLowerCase()];\n      return newFilters;\n    });\n  }\n\n  // TODO: Extract into separate utils file to be reused in other cases\n  function onSelect(type, event, selection) {\n    const checked = event.target.checked;\n    setFilters((prevFilters) => {\n      const newFilters = { ...prevFilters };\n      const prevSelections = prevFilters[type] || [];\n      const newValue = checked\n        ? [...prevSelections, selection]\n        : prevSelections.filter((value) => value !== selection);\n      if (newValue.length === 0) {\n        delete newFilters[type];\n      } else {\n        newFilters[type] = newValue;\n      }\n      return newFilters;\n    });\n  }\n\n  function onRegionSelect(event, selection) {\n    onSelect('region', event, selection);\n  }\n\n  function onStatusSelect(event, selection) {\n    onSelect('status', event, selection);\n  }\n\n  return (\n    <ToolbarToggleGroup toggleIcon={<FilterIcon />} breakpoint=\"xl\">\n      <ToolbarGroup variant=\"filter-group\">\n        <ToolbarItem>\n          <SelectSingle\n            id=\"region\"\n            value={selectedFilter}\n            handleSelect={(_, selection) => {\n              setSelectedFilter(selection);\n            }}\n          >\n            <SelectOption value=\"Name\">Name</SelectOption>\n            <SelectOption value=\"Region\">Region</SelectOption>\n            <SelectOption value=\"Owner\">Owner</SelectOption>\n            <SelectOption value=\"Status\">Status</SelectOption>\n          </SelectSingle>\n        </ToolbarItem>\n        <ToolbarFilter\n          chips={filters.name}\n          deleteChip={onDeleteChip}\n          deleteChipGroup={onDeleteChipGroup}\n          categoryName=\"Name\"\n          className={selectedFilter !== 'Name' && 'pf-v5-u-hidden'}\n        >\n          <ToolbarItem>\n            <InputGroup>\n              <InputGroupItem isFill>\n                <TextInput\n                  id=\"filterName\"\n                  type=\"text\"\n                  aria-label=\"Name\"\n                  placeholder=\"Filter by name\"\n                  value={inputName}\n                  onChange={(_event, value) => setInputName(value)}\n                />\n              </InputGroupItem>\n              <InputGroupItem>\n                <Button\n                  variant=\"control\"\n                  aria-label=\"Search Name\"\n                  onClick={() => {\n                    if (!inputName) return;\n                    setFilters((prevFilters) => {\n                      const newFilters = { ...prevFilters };\n                      newFilters.name = [inputName];\n                      return newFilters;\n                    });\n                  }}\n                >\n                  <SearchIcon />\n                </Button>\n              </InputGroupItem>\n            </InputGroup>\n          </ToolbarItem>\n        </ToolbarFilter>\n        <ToolbarFilter\n          chips={filters.region}\n          deleteChip={onDeleteChip}\n          deleteChipGroup={onDeleteChipGroup}\n          categoryName=\"Region\"\n          className={selectedFilter !== 'Region' && 'pf-v5-u-hidden'}\n        >\n          <ToolbarItem>\n            <Select\n              variant={SelectVariant.checkbox}\n              aria-label=\"Region\"\n              onToggle={(_event, val) => setIsRegionExpanded(val)}\n              onSelect={onRegionSelect}\n              selections={filters.region}\n              isOpen={isRegionExpanded}\n              placeholderText=\"Filter by region\"\n            >\n              {cloudRegions.map((regionOption) => {\n                return (\n                  <SelectOption key={regionOption.id} value={regionOption.id}>\n                    {getRegionDisplayName(regionOption)}\n                  </SelectOption>\n                );\n              })}\n            </Select>\n          </ToolbarItem>\n        </ToolbarFilter>\n        <ToolbarFilter\n          chips={filters.owner}\n          deleteChip={onDeleteChip}\n          deleteChipGroup={onDeleteChipGroup}\n          categoryName=\"Owner\"\n          className={selectedFilter !== 'Owner' && 'pf-v5-u-hidden'}\n        >\n          <ToolbarItem>\n            <InputGroup>\n              <InputGroupItem isFill>\n                <TextInput\n                  id=\"filterOwner\"\n                  type=\"text\"\n                  aria-label=\"Owner\"\n                  placeholder=\"Filter by owner\"\n                  value={inputOwner}\n                  onChange={(_event, value) => setInputOwner(value)}\n                />\n              </InputGroupItem>\n              <InputGroupItem>\n                <Button\n                  variant=\"control\"\n                  aria-label=\"Search Owner\"\n                  onClick={() => {\n                    if (!inputOwner) return;\n                    setFilters((prevFilters) => {\n                      const newFilters = { ...prevFilters };\n                      newFilters.owner = [inputOwner];\n                      return newFilters;\n                    });\n                  }}\n                >\n                  <SearchIcon />\n                </Button>\n              </InputGroupItem>\n            </InputGroup>\n          </ToolbarItem>\n        </ToolbarFilter>\n        <ToolbarFilter\n          chips={filters.status}\n          deleteChip={onDeleteChip}\n          deleteChipGroup={onDeleteChipGroup}\n          categoryName=\"Status\"\n          className={selectedFilter !== 'Status' && 'pf-v5-u-hidden'}\n        >\n          <ToolbarItem>\n            <Select\n              variant={SelectVariant.checkbox}\n              aria-label=\"Status\"\n              onToggle={(_event, val) => setIsStatusExpanded(val)}\n              onSelect={onStatusSelect}\n              selections={filters.status}\n              isOpen={isStatusExpanded}\n              placeholderText=\"Filter by status\"\n            >\n              {statusOptions.map((statusOption) => {\n                return (\n                  <SelectOption\n                    key={statusOption.label}\n                    value={statusOption.label}\n                  >\n                    {statusOption.label}\n                  </SelectOption>\n                );\n              })}\n            </Select>\n          </ToolbarItem>\n        </ToolbarFilter>\n      </ToolbarGroup>\n    </ToolbarToggleGroup>\n  );\n}\n\nInstancesToolbarSearchFilter.propTypes = {\n  filters: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    region: PropTypes.string.isRequired,\n    owner: PropTypes.string.isRequired,\n    status: PropTypes.string.isRequired,\n  }),\n  setFilters: PropTypes.func.isRequired,\n};\n\nexport default InstancesToolbarSearchFilter;\n","import { regionLabelToValue } from './region';\nimport { cloudProviderLabelToValue } from './cloudProvider';\nimport { statusLabelToValue } from './status';\n\nexport function filtersToSearchQuery(filters, regionList) {\n  const searchCategories = Object.keys(filters);\n  const queries =\n    searchCategories\n      .filter((searchCategory) => {\n        const searchValues = filters[searchCategory];\n        return searchValues.length;\n      })\n      .map((searchCategory) => {\n        const searchValues = filters[searchCategory];\n        const searchCategoryResult = searchValues\n          .map((searchValue) => {\n            // Use the value the API needs rather than the human readable UI value\n            let modifiedSearchValue = searchValue;\n            if (searchCategory === 'cloud_provider') {\n              modifiedSearchValue = cloudProviderLabelToValue(searchValue);\n            } else if (searchCategory === 'region') {\n              modifiedSearchValue = regionLabelToValue(searchValue, regionList);\n            } else if (searchCategory === 'status') {\n              modifiedSearchValue = statusLabelToValue(searchValue);\n            }\n            return `${searchCategory} = ${modifiedSearchValue}`;\n          })\n          .join(' or ');\n        return `(${searchCategoryResult})`;\n      })\n      .join(' and ') || '';\n  return queries;\n}\n","import React, { useEffect, useMemo, useState } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport {\n  Bullseye,\n  Button,\n  Card,\n  EmptyState,\n  EmptyStateActions,\n  EmptyStateBody,\n  EmptyStateFooter,\n  EmptyStateHeader,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Pagination,\n  Spinner,\n  Toolbar,\n  ToolbarContent,\n  ToolbarItem,\n} from '@patternfly/react-core';\nimport {\n  ActionsColumn,\n  Table /* data-codemods */,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from '@patternfly/react-table';\nimport { CubesIcon, SearchIcon } from '@patternfly/react-icons';\n\nimport usePagination from '../../hooks/usePagination';\nimport useInstances from '../../hooks/apis/useInstances';\nimport useCreateInstance from '../../hooks/apis/useCreateInstance';\nimport useDeleteInstance from '../../hooks/apis/useDeleteInstance';\nimport useCloudAccounts from '../../hooks/apis/useCloudAccounts';\nimport useAnalytics from '../../hooks/useAnalytics';\n\nimport CreateInstanceModal from './CreateInstanceModal';\nimport DeleteInstanceModal from './DeleteInstanceModal';\nimport InstanceDetailsDrawer from './InstanceDetailsDrawer';\nimport { getDateTimeDifference } from '../../utils/date';\nimport Status from '../../components/Status';\nimport InstancesToolbarSearchFilter from './InstancesToolbarSearchFilter';\nimport useTableSort from '../../hooks/useTableSort';\nimport {\n  AWS_PROVIDER,\n  cloudProviderValueToLabel,\n} from '../../utils/cloudProvider';\nimport { filtersToSearchQuery } from '../../utils/searchQuery';\nimport { linkBasename, mergeToBasename } from '../../utils/paths';\nimport RegionLabel from '../../components/RegionLabel';\nimport { useCloudRegions } from '../../hooks/apis/useCloudRegions';\n\nconst sortFields = [\n  'name',\n  'cloud_provider',\n  'region',\n  'owner',\n  'status',\n  'created_at',\n];\nconst defaultSortOption = {\n  field: 'name',\n  direction: 'asc',\n};\n\n/**\n * A smart component that handles all the api calls and data needed by the dumb components.\n * Smart components are usually classes.\n *\n * https://reactjs.org/docs/components-and-props.html\n * https://medium.com/@thejasonfile/dumb-components-and-smart-components-e7b33a698d43\n */\nfunction InstancesPage() {\n  const navigate = useNavigate();\n\n  const { analyticsTrack } = useAnalytics();\n  const { page, perPage, onSetPage, onPerPageSelect } = usePagination();\n  const { sortOption, getSortParams } = useTableSort({\n    sortFields,\n    defaultSortOption,\n  });\n  const [filters, setFilters] = useState({});\n\n  const { data: cloudAccountsData } = useCloudAccounts();\n  const cloudAccountIds =\n    cloudAccountsData?.cloudAccounts?.map(\n      (cloudAccount) => cloudAccount.cloudAccountId\n    ) || [];\n\n  const { data: regionList, isFetching: isFetchingRegions } = useCloudRegions({\n    provider: AWS_PROVIDER,\n  });\n  const regions = useMemo(() => regionList?.items || [], [regionList]);\n\n  const { data, isFetching } = useInstances({\n    query: {\n      page,\n      size: perPage,\n      orderBy: `${sortOption.field} ${sortOption.direction}`,\n      search: filtersToSearchQuery(filters, regions),\n    },\n    // Refetch the data every 10 seconds\n    refetchInterval: 10000,\n  });\n\n  const createInstance = useCreateInstance();\n  const deleteInstance = useDeleteInstance();\n  const [creatingInstance, setCreatingInstance] = useState(null);\n  const [deletingInstance, setDeletingInstance] = useState(null);\n  const [viewingInstance, setViewingInstance] = useState(null);\n\n  const instances = data?.items || [];\n  const isTableLoading = (isFetching || isFetchingRegions) && !data;\n  const totalInstances = data?.total ?? 0;\n\n  let content = null;\n\n  useEffect(() => {\n    insights?.chrome?.appAction?.('instances-page');\n  }, []);\n\n  function onRequestCreate(values) {\n    const response = createInstance.mutateAsync({\n      region: values.region,\n      cloud_provider: values.cloud_provider,\n      name: values.name,\n      multi_az: values.availabilityZones === 'multi',\n      cloud_account_id: values.cloud_account_id,\n    });\n    return response.catch((error) => {\n      return error;\n    });\n  }\n\n  function onCreateInstanceHandler() {\n    analyticsTrack('start-create-instance-form');\n    setCreatingInstance({});\n  }\n\n  function closeCreateInstanceModal() {\n    setCreatingInstance(null);\n  }\n\n  function onRequestDelete(instanceID) {\n    const response = deleteInstance.mutateAsync(instanceID);\n    return response.catch((error) => {\n      return error;\n    });\n  }\n\n  function closeDeleteInstanceModal() {\n    setDeletingInstance(null);\n  }\n\n  function closeInstanceDetailsDrawer() {\n    setViewingInstance(null);\n  }\n\n  function onClearFilters() {\n    setFilters({});\n  }\n\n  if (instances.length === 0 && Object.keys(filters).length === 0) {\n    content = (\n      <EmptyState>\n        <EmptyStateHeader\n          titleText=\"No ACS instances.\"\n          icon={<EmptyStateIcon icon={CubesIcon} />}\n          headingLevel=\"h4\"\n        />\n        <EmptyStateBody>Create one to get started.</EmptyStateBody>\n        <EmptyStateFooter>\n          <EmptyStateActions>\n            <Button\n              variant=\"primary\"\n              onClick={() => onCreateInstanceHandler({})}\n            >\n              Create ACS instance\n            </Button>\n          </EmptyStateActions>\n        </EmptyStateFooter>\n      </EmptyState>\n    );\n  } else {\n    content = (\n      <>\n        <Toolbar clearAllFilters={onClearFilters}>\n          <ToolbarContent>\n            <InstancesToolbarSearchFilter\n              filters={filters}\n              setFilters={setFilters}\n            />\n            <ToolbarItem>\n              <Button\n                variant=\"primary\"\n                onClick={() => onCreateInstanceHandler({})}\n              >\n                Create ACS instance\n              </Button>\n            </ToolbarItem>\n            {instances.length !== 0 && (\n              <ToolbarItem\n                variant=\"pagination\"\n                align={{ default: 'alignRight' }}\n              >\n                <Pagination\n                  itemCount={totalInstances}\n                  perPage={perPage}\n                  page={page}\n                  onSetPage={onSetPage}\n                  widgetId=\"acs-instances-top-pagination\"\n                  onPerPageSelect={onPerPageSelect}\n                  isCompact\n                />\n              </ToolbarItem>\n            )}\n          </ToolbarContent>\n        </Toolbar>\n        <Table aria-label=\"ACS instances table\">\n          <Thead>\n            <Tr>\n              <Th sort={getSortParams('name')}>Name</Th>\n              <Th sort={getSortParams('cloud_provider')}>Cloud provider</Th>\n              <Th sort={getSortParams('region')}>Region</Th>\n              <Th sort={getSortParams('owner')}>Owner</Th>\n              <Th sort={getSortParams('status')}>Status</Th>\n              <Th sort={getSortParams('created_at')}>Time created</Th>\n              <Th />\n            </Tr>\n          </Thead>\n          <Tbody>\n            {isTableLoading && (\n              <Tr>\n                <Td colSpan={8}>\n                  <Bullseye>\n                    <Spinner />\n                  </Bullseye>\n                </Td>\n              </Tr>\n            )}\n            {!isTableLoading && instances.length === 0 && (\n              <Tr>\n                <Td colSpan={8}>\n                  <Bullseye>\n                    <EmptyState variant={EmptyStateVariant.sm}>\n                      <EmptyStateHeader\n                        titleText=\"No results found\"\n                        icon={<EmptyStateIcon icon={SearchIcon} />}\n                        headingLevel=\"h2\"\n                      />\n                      <EmptyStateBody>\n                        Clear all filters and try again.\n                      </EmptyStateBody>\n                      <EmptyStateFooter>\n                        <Button variant=\"link\" onClick={onClearFilters}>\n                          Clear all filters\n                        </Button>\n                      </EmptyStateFooter>\n                    </EmptyState>\n                  </Bullseye>\n                </Td>\n              </Tr>\n            )}\n            {!isTableLoading &&\n              instances.length !== 0 &&\n              instances.map((instance) => {\n                const instanceDetailsURL = mergeToBasename(\n                  `instances/instance/${instance.id}`,\n                  linkBasename\n                );\n                return (\n                  <Tr\n                    key={instance.name}\n                    onRowClick={(event) => {\n                      if (\n                        event.target.getAttribute('type') !== 'button' &&\n                        instance.status === 'ready'\n                      ) {\n                        setViewingInstance(instance);\n                      }\n                    }}\n                    isRowSelected={viewingInstance?.name === instance?.name}\n                  >\n                    <Td dataLabel=\"Name\">\n                      <Button\n                        variant=\"link\"\n                        isInline\n                        isDisabled={instance.status !== 'ready'}\n                        component={(props) => (\n                          <Link {...props} to={instanceDetailsURL} />\n                        )}\n                      >\n                        {instance.name}\n                      </Button>\n                    </Td>\n                    <Td dataLabel=\"Cloud provider\">\n                      {cloudProviderValueToLabel(instance.cloud_provider)}\n                    </Td>\n                    <Td dataLabel=\"Region\">\n                      <RegionLabel id={instance.region} />\n                    </Td>\n                    <Td dataLabel=\"Owner\">{instance.owner}</Td>\n                    <Td dataLabel=\"Status\">\n                      <Status status={instance.status} />\n                    </Td>\n                    <Td dataLabel=\"Time created\">\n                      {getDateTimeDifference(instance.created_at)}\n                    </Td>\n                    <Td isActionCell>\n                      <ActionsColumn\n                        items={[\n                          {\n                            title: 'Details',\n                            onClick: (event) => {\n                              event.preventDefault();\n                              navigate(instanceDetailsURL);\n                            },\n                          },\n                          {\n                            title: 'Delete',\n                            onClick: (event) => {\n                              event.preventDefault();\n                              setDeletingInstance(instance);\n                            },\n                          },\n                        ]}\n                      />\n                    </Td>\n                  </Tr>\n                );\n              })}\n          </Tbody>\n        </Table>\n        {instances.length !== 0 && (\n          <Toolbar>\n            <ToolbarContent>\n              <ToolbarItem\n                variant=\"pagination\"\n                align={{ default: 'alignRight' }}\n              >\n                <Pagination\n                  itemCount={totalInstances}\n                  perPage={perPage}\n                  page={page}\n                  onSetPage={onSetPage}\n                  widgetId=\"acs-instances-bottom-pagination\"\n                  onPerPageSelect={onPerPageSelect}\n                />\n              </ToolbarItem>\n            </ToolbarContent>\n          </Toolbar>\n        )}\n      </>\n    );\n  }\n\n  return (\n    <InstanceDetailsDrawer\n      isExpanded={!!viewingInstance}\n      instance={viewingInstance}\n      onClose={closeInstanceDetailsDrawer}\n    >\n      <PageHeader>\n        <PageHeaderTitle title=\"ACS Instances\" />\n      </PageHeader>\n      <Main>\n        <Card>{content}</Card>\n        <CreateInstanceModal\n          isOpen={!!creatingInstance}\n          onClose={closeCreateInstanceModal}\n          onRequestCreate={onRequestCreate}\n          cloudAccountIds={cloudAccountIds}\n        />\n        <DeleteInstanceModal\n          instance={deletingInstance}\n          isOpen={!!deletingInstance}\n          onClose={closeDeleteInstanceModal}\n          onRequestDelete={onRequestDelete}\n        />\n      </Main>\n    </InstanceDetailsDrawer>\n  );\n}\n\nexport default InstancesPage;\n","import { useState } from 'react';\n\nfunction usePagination() {\n  const [page, setPage] = useState(1);\n  const [perPage, setPerPage] = useState(20);\n\n  function onSetPage(_, newPage) {\n    setPage(newPage);\n  }\n\n  function onPerPageSelect(_, newPerPage) {\n    setPerPage(newPerPage);\n  }\n\n  return {\n    page,\n    perPage,\n    onSetPage,\n    onPerPageSelect,\n  };\n}\n\nexport default usePagination;\n","import { useEffect, useState } from 'react';\n\nfunction useTableSort({ sortFields, defaultSortOption }) {\n  const [sortOption, setSortOption] = useState();\n\n  const activeSortField = sortOption?.field || defaultSortOption.field;\n  const activeSortDirection =\n    sortOption?.direction || defaultSortOption.direction;\n\n  // we'll use this to map the sort fields to an id PatternFly can use internally\n  const [fieldToIdMap, setFieldToIdMap] = useState({});\n\n  // we'll construct a map of sort fields to ids that will make it easier to work with\n  // PatternFly\n  useEffect(() => {\n    const newFieldToIdMap = sortFields.reduce((acc, curr, index) => {\n      acc[curr] = index;\n      return acc;\n    }, {});\n    setFieldToIdMap(newFieldToIdMap);\n  }, [sortFields]);\n\n  function getSortParams(field) {\n    const fieldId = fieldToIdMap[field];\n    const activeSortId = activeSortField\n      ? fieldToIdMap[activeSortField]\n      : undefined;\n\n    return {\n      sortBy: {\n        index: activeSortId,\n        direction: activeSortDirection,\n        defaultDirection: 'desc',\n      },\n      onSort: (_event, _index, direction) => {\n        // modify the URL based on the new sort\n        const newSortOption = {\n          field,\n          direction,\n        };\n        setSortOption(newSortOption);\n      },\n      columnIndex: fieldId,\n    };\n  }\n\n  return {\n    sortOption: {\n      field: activeSortField,\n      direction: activeSortDirection,\n    },\n    getSortParams,\n  };\n}\n\nexport default useTableSort;\n","import { useMutation, useQueryClient } from 'react-query';\nimport useApi from './useApi';\n\nexport default function useCreateInstance() {\n  const queryClient = useQueryClient();\n  const apiRequest = useApi();\n\n  const postInstance = async (postData) => {\n    const { data } = await apiRequest.post(\n      '/api/rhacs/v1/centrals?async=true',\n      postData\n    );\n    return data;\n  };\n\n  return useMutation(postInstance, {\n    onSuccess: () => {\n      // Invalidate and refetch\n      queryClient.invalidateQueries('instances');\n    },\n  });\n}\n","import { useMutation, useQueryClient } from 'react-query';\nimport useApi from './useApi';\n\nexport default function useDeleteInstance() {\n  const queryClient = useQueryClient();\n  const apiRequest = useApi();\n  const deleteInstance = async (instanceID) => {\n    const { data } = await apiRequest.delete(\n      `/api/rhacs/v1/centrals/${instanceID}?async=true`\n    );\n    return data;\n  };\n  return useMutation(deleteInstance, {\n    onSuccess: () => {\n      // Invalidate and refetch\n      queryClient.invalidateQueries('instances');\n    },\n  });\n}\n","export const AWS_PROVIDER = 'aws';\nexport const AWS_DEFAULT_REGION = 'us-east-1';\n\nconst cloudProviders = {\n  [AWS_PROVIDER]: 'Amazon Web Services',\n};\n\nconst cloudProvidersShortForm = {\n  [AWS_PROVIDER]: 'AWS',\n};\n\nexport const cloudProviderOptions = Object.keys(cloudProviders).map(\n  (cloudProviderValue) => {\n    return {\n      value: cloudProviderValue,\n      label: cloudProviders[cloudProviderValue],\n    };\n  }\n);\n\nexport function cloudProviderValueToLabel(cloudProviderValue) {\n  return cloudProvidersShortForm[cloudProviderValue]\n    ? `Hosted by Red Hat (on ${cloudProvidersShortForm[cloudProviderValue]})`\n    : 'Hosted by Red Hat';\n}\n\nexport function cloudProviderLabelToValue(cloudProviderLabel) {\n  const cloudProviderOption = cloudProviderOptions.find(\n    (cloudProviderOption) => cloudProviderOption.label === cloudProviderLabel\n  );\n  return cloudProviderOption?.value;\n}\n","import { format, formatDistance, parseISO } from 'date-fns';\n\nconst dateTimeFormat = 'MM/dd/yyyy | h:mm:ss a';\n\nexport function getDateTimeDifference(timestamp) {\n  return formatDistance(parseISO(timestamp), new Date(), {\n    addSuffix: true,\n  });\n}\n\nexport function getDateTime(timestamp) {\n  return format(parseISO(timestamp), dateTimeFormat);\n}\n","import qs from 'qs';\n\nexport function getQueryObject(search) {\n  return qs.parse(search, { ignoreQueryPrefix: true });\n}\n\nexport function getQueryString(searchObject) {\n  return qs.stringify(searchObject, { encode: false });\n}\n","export function regionLabelToValue(regionLabel, regionList) {\n  const regionOption = regionList?.find((region) => region.id === regionLabel);\n  return regionOption?.id;\n}\n\nexport function getRegionDisplayName(region) {\n  if (!region) {\n    return '';\n  }\n  return region.display_name || region.id;\n}\n"],"names":["instance","isHorizontal","cloud_provider","id","region","hoverTip","clickTip","variant","owner","created_at","updated_at","centralDataURL","centralUIURL","RegionLabel","regionList","provider","useMemo","items","find","r","API_PROD_URL","API_STAGE_URL","API_INTEGRATION_URL","useApi","client","isProd","isBeta","apiUrl","interceptors","request","use","cfg","insights","chrome","auth","getUser","getToken","token","BASE_URL","baseURL","updatedCfg","url","headers","Authorization","customHost","useCloudRegions","query","options","apiRequest","useQuery","queryKey","instanceType","queryString","instance_type","get","getCloudRegions","staleTime","Infinity","getInstances","getCloudAccounts","analytics","useChrome","analyticsTrack","event","localStorage","getItem","track","toggleIcon","value","handleSelect","isDisabled","children","direction","isCreatable","placeholderText","menuAppendTo","undefined","useState","isOpen","setIsOpen","isTypeahead","typeahead","single","Select","onSelect","_event","selection","onToggle","val","selections","toggleId","defaultFormValues","name","availabilityZones","cloud_account_id","onClose","onRequestCreate","cloudAccountIds","errorMessage","setErrorMessage","formValues","setFormValues","isRequestingCreate","setIsRequestingCreate","useEffect","length","prevValues","cloudRegionList","isFetchingRegions","cloudRegions","enabledCloudRegions","filter","enabled","onCloseHandler","Modal","small","title","actions","Button","key","onClick","result","Error","response","data","reason","isLoading","className","Alert","Form","FormGroup","label","isRequired","fieldId","TextInput","type","onChange","prevFormValues","onNameChange","FormHelperText","HelperText","HelperTextItem","map","cloudAccountId","SelectOption","document","body","isPlaceholder","onRequestDelete","inputValue","setInputValue","isRequestingDelete","setIsRequestingDelete","onRequestDeleteHandler","isAxiosError","message","inputMatchesInstanceName","onSubmit","e","preventDefault","isInline","danger","isExpanded","Drawer","DrawerContent","panelContent","DrawerPanelContent","DrawerHead","TextContent","Text","component","h2","DrawerActions","DrawerCloseButton","Divider","DrawerContentBody","InstanceDetailsList","statuses","accepted","preparing","provisioning","ready","failed","deprovision","deleting","statusOptions","Object","keys","statusValue","statusMessages","Spinner","size","status","Flex","FlexItem","InstancesToolbarSearchFilter","filters","setFilters","selectedFilter","setSelectedFilter","inputName","setInputName","inputOwner","setInputOwner","isRegionExpanded","setIsRegionExpanded","isStatusExpanded","setIsStatusExpanded","onDeleteChip","prevFilters","newFilters","newValue","toLowerCase","s","onDeleteChipGroup","checked","target","prevSelections","ToolbarToggleGroup","breakpoint","ToolbarGroup","ToolbarItem","_","ToolbarFilter","chips","deleteChip","deleteChipGroup","categoryName","InputGroup","InputGroupItem","isFill","placeholder","checkbox","regionOption","statusOption","propTypes","filtersToSearchQuery","searchCategory","searchCategoryResult","searchValue","statusLabel","modifiedSearchValue","cloudProvider","join","sortFields","defaultSortOption","field","content","navigate","useNavigate","page","setPage","perPage","setPerPage","onSetPage","newPage","onPerPageSelect","newPerPage","sortOption","setSortOption","activeSortField","activeSortDirection","fieldToIdMap","setFieldToIdMap","newFieldToIdMap","reduce","acc","curr","index","getSortParams","sortBy","defaultDirection","onSort","_index","columnIndex","cloudAccountsData","cloudAccounts","cloudAccount","regions","refetchInterval","useInstances","orderBy","search","isFetching","createInstance","queryClient","useQueryClient","useMutation","postData","post","onSuccess","invalidateQueries","useCreateInstance","deleteInstance","instanceID","delete","useDeleteInstance","creatingInstance","setCreatingInstance","deletingInstance","setDeletingInstance","viewingInstance","setViewingInstance","instances","isTableLoading","totalInstances","total","onCreateInstanceHandler","onClearFilters","appAction","EmptyState","EmptyStateHeader","titleText","icon","EmptyStateIcon","headingLevel","EmptyStateBody","EmptyStateFooter","EmptyStateActions","Toolbar","clearAllFilters","ToolbarContent","align","default","Pagination","itemCount","widgetId","isCompact","Table","Thead","Tr","Th","sort","Tbody","Td","colSpan","Bullseye","sm","instanceDetailsURL","onRowClick","getAttribute","isRowSelected","dataLabel","props","Link","to","isActionCell","ActionsColumn","PageHeader","PageHeaderTitle","Main","Card","values","mutateAsync","multi_az","catch","error","AWS_PROVIDER","AWS_DEFAULT_REGION","cloudProviders","cloudProvidersShortForm","cloudProviderOptions","cloudProviderValue","cloudProviderValueToLabel","cloudProviderLabelToValue","cloudProviderLabel","cloudProviderOption","dateTimeFormat","getDateTimeDifference","timestamp","Date","addSuffix","getDateTime","getQueryString","searchObject","encode","regionLabelToValue","regionLabel","getRegionDisplayName","display_name"],"sourceRoot":""}