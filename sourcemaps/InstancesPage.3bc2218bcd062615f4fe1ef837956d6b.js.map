{"version":3,"file":"js/InstancesPage.1662570643467.c79f449ed95bfbf7b9a5.js","mappings":"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","sources":["webpack:///./src/components/InstanceDetailsList.js","webpack:///./src/components/BreadcrumbItemLink.js","webpack:///./src/hooks/apis/useInstance.js","webpack:///./src/routes/InstanceDetailsPage/InstanceDetailsPage.js","webpack:///./src/hooks/apis/useInstances.js","webpack:///./src/utils/queryString.js","webpack:///./src/hooks/apis/useCreateInstance.js","webpack:///./src/hooks/apis/useDeleteInstance.js","webpack:///./src/components/SelectSingle.js","webpack:///./src/routes/InstancesPage/CreateInstanceModal.js","webpack:///./src/routes/InstancesPage/DeleteInstanceModal.js","webpack:///./src/routes/InstancesPage/InstanceDetailsDrawer.js","webpack:///./src/utils/status.js","webpack:///./src/components/Status.js","webpack:///./src/routes/InstancesPage/InstancesToolbarSearchFilter.js","webpack:///./src/utils/searchQuery.js","webpack:///./src/routes/InstancesPage/InstancesPage.js","webpack:///./src/hooks/usePagination.js","webpack:///./src/hooks/useTableSort.js","webpack:///./src/services/apiRequest.js","webpack:///./src/utils/cloudProvider.js","webpack:///./src/utils/date.js","webpack:///./src/utils/region.js"],"sourcesContent":["/* eslint-disable react/prop-types */\nimport React from 'react';\nimport {\n  DescriptionList,\n  DescriptionListDescription,\n  DescriptionListGroup,\n  DescriptionListTerm,\n} from '@patternfly/react-core';\n\nimport { getDateTime } from '../utils/date';\nimport { cloudProviderValueToLabel } from '../utils/cloudProvider';\nimport { regionValueToLabel } from '../utils/region';\n\nfunction InstanceDetailsList({ instance }) {\n  return (\n    <DescriptionList isHorizontal>\n      <DescriptionListGroup>\n        <DescriptionListTerm>Cloud provider</DescriptionListTerm>\n        <DescriptionListDescription>\n          {cloudProviderValueToLabel(instance.cloud_provider)}\n        </DescriptionListDescription>\n      </DescriptionListGroup>\n      <DescriptionListGroup>\n        <DescriptionListTerm>Region</DescriptionListTerm>\n        <DescriptionListDescription>\n          {regionValueToLabel(instance.region)}\n        </DescriptionListDescription>\n      </DescriptionListGroup>\n      <DescriptionListGroup>\n        <DescriptionListTerm>ID</DescriptionListTerm>\n        <DescriptionListDescription>{instance.id}</DescriptionListDescription>\n      </DescriptionListGroup>\n      <DescriptionListGroup>\n        <DescriptionListTerm>Owner</DescriptionListTerm>\n        <DescriptionListDescription>\n          {instance.owner}\n        </DescriptionListDescription>\n      </DescriptionListGroup>\n      <DescriptionListGroup>\n        <DescriptionListTerm>Time created</DescriptionListTerm>\n        <DescriptionListDescription>\n          {getDateTime(instance.created_at)}\n        </DescriptionListDescription>\n      </DescriptionListGroup>\n      <DescriptionListGroup>\n        <DescriptionListTerm>Time updated</DescriptionListTerm>\n        <DescriptionListDescription>\n          {getDateTime(instance.updated_at)}\n        </DescriptionListDescription>\n      </DescriptionListGroup>\n      <DescriptionListGroup>\n        <DescriptionListTerm>Sensor Host URL</DescriptionListTerm>\n        <DescriptionListDescription>\n          {instance.centralDataURL}\n        </DescriptionListDescription>\n      </DescriptionListGroup>\n      <DescriptionListGroup>\n        <DescriptionListTerm>Central UI</DescriptionListTerm>\n        <DescriptionListDescription>\n          {instance.centralUIURL}\n        </DescriptionListDescription>\n      </DescriptionListGroup>\n    </DescriptionList>\n  );\n}\n\nexport default InstanceDetailsList;\n","/* eslint-disable react/jsx-props-no-spreading */\n/* eslint-disable react/prop-types */\nimport React from 'react';\nimport { BreadcrumbItem } from '@patternfly/react-core';\nimport { Link } from 'react-router-dom';\n\nfunction BreadcrumbItemLink({ children, to, ...rest }) {\n  function render({ className, ariaCurrent }) {\n    return (\n      <Link className={className} aria-current={ariaCurrent} to={to}>\n        {children}\n      </Link>\n    );\n  }\n  return <BreadcrumbItem {...rest} render={render} />;\n}\n\nexport default BreadcrumbItemLink;\n","import { useQuery } from 'react-query';\n\nimport apiRequest from '../../services/apiRequest';\n\nconst getInstanceById = async (instanceId) => {\n  const { data } = await apiRequest.get(`/api/rhacs/v1/centrals/${instanceId}`);\n  return data;\n};\n\nexport default function useInstance(instanceId) {\n  return useQuery(['instance', instanceId], () => getInstanceById(instanceId));\n}\n","import React from 'react';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { useParams } from 'react-router-dom';\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  Bullseye,\n  Button,\n  ButtonVariant,\n  Card,\n  CardHeader,\n  CardTitle,\n  CardBody,\n  CardHeaderMain,\n  Flex,\n  FlexItem,\n  Grid,\n  GridItem,\n  List,\n  ListItem,\n  PageSection,\n  PageSectionVariants,\n  Spinner,\n  Title,\n} from '@patternfly/react-core';\nimport BreadcrumbItemLink from '../../components/BreadcrumbItemLink';\nimport useInstance from '../../hooks/apis/useInstance';\nimport InstanceDetailsList from '../../components/InstanceDetailsList';\n\nfunction InstanceDetailsPage() {\n  const { instanceId } = useParams();\n  const { data: instance, isFetching } = useInstance(instanceId);\n\n  if (isFetching) {\n    return (\n      <Bullseye>\n        <Spinner />\n      </Bullseye>\n    );\n  }\n\n  return (\n    <div>\n      <PageHeader>\n        <Flex direction={{ default: 'column' }}>\n          <FlexItem>\n            <Breadcrumb>\n              <BreadcrumbItemLink to=\"/instances\">\n                ACS instances\n              </BreadcrumbItemLink>\n              <BreadcrumbItem isActive>{instance.name}</BreadcrumbItem>\n            </Breadcrumb>\n          </FlexItem>\n          <FlexItem>\n            <PageHeaderTitle title={instance.name} />\n          </FlexItem>\n        </Flex>\n      </PageHeader>\n      <Main className=\"pf-u-p-0 pf-m-fill pf-m-overflow-scroll\">\n        <PageSection>\n          <Flex alignItems={{ default: 'alignItemsStretch' }}>\n            <FlexItem\n              flex={{ default: 'flex_1' }}\n              alignSelf={{ default: 'alignSelfStretch' }}\n            >\n              <Card className=\"pf-u-h-100\">\n                <CardHeader>\n                  <CardHeaderMain>\n                    <CardTitle>ACS Instance Access</CardTitle>\n                  </CardHeaderMain>\n                </CardHeader>\n                <CardBody>\n                  <Flex direction={{ default: 'column' }}>\n                    <FlexItem>\n                      Get started by signing in to your ACS instance.\n                    </FlexItem>\n                    <FlexItem>\n                      <Button\n                        variant={ButtonVariant.primary}\n                        component=\"a\"\n                        href={instance.centralUIURL}\n                        target=\"_blank\"\n                      >\n                        Open ACS Console\n                      </Button>\n                    </FlexItem>\n                  </Flex>\n                </CardBody>\n              </Card>\n            </FlexItem>\n            <FlexItem flex={{ default: 'flex_1' }}>\n              <Card>\n                <CardHeader>\n                  <CardHeaderMain>\n                    <CardTitle>Instance Details</CardTitle>\n                  </CardHeaderMain>\n                </CardHeader>\n                <CardBody>\n                  <InstanceDetailsList instance={instance} />\n                </CardBody>\n              </Card>\n            </FlexItem>\n          </Flex>\n        </PageSection>\n        <PageSection\n          variant={PageSectionVariants.light}\n          isFilled\n          hasOverflowScroll\n          isWidthLimited\n        >\n          <Title headingLevel=\"h2\">\n            Use Red Hat ACS to secure your clusters\n          </Title>\n          <Grid hasGutter>\n            <GridItem md={7}>\n              <Card className=\"marketing-video\">\n                <iframe\n                  src=\"https://www.youtube.com/embed/wMJMFIeVsw8\"\n                  title=\"Advanced Cluster Security in 2 Minutes\"\n                  frameBorder=\"0\"\n                  allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n                  allowFullScreen\n                ></iframe>\n              </Card>\n            </GridItem>\n            <GridItem md={5} hasGutter>\n              <List isPlain>\n                <ListItem>\n                  <Button\n                    variant=\"link\"\n                    isInline\n                    component=\"a\"\n                    href=\"https://www.redhat.com/sysadmin/kubernetes-RHACS-red-hat-advanced-cluster-security\"\n                    target=\"_blank\"\n                  >\n                    Getting Started Guide\n                  </Button>\n                </ListItem>\n                <ListItem>\n                  <Button\n                    variant=\"link\"\n                    isInline\n                    component=\"a\"\n                    href=\"https://docs.openshift.com/acs/3.71/welcome/index.html\"\n                    target=\"_blank\"\n                  >\n                    Product Configuration\n                  </Button>\n                </ListItem>\n              </List>\n            </GridItem>\n          </Grid>\n        </PageSection>\n      </Main>\n    </div>\n  );\n}\n\nexport default InstanceDetailsPage;\n","import { useQuery } from 'react-query';\n\nimport apiRequest from '../../services/apiRequest';\nimport { getQueryString } from '../../utils/queryString';\n\nconst getInstances = async ({ query }) => {\n  const queryString = getQueryString(query);\n  const { data } = await apiRequest.get(\n    `/api/rhacs/v1/centrals?${queryString}`\n  );\n  return data;\n};\n\nexport default function useInstances(options) {\n  const { refetchInterval } = options;\n  return useQuery(['instances', options], () => getInstances(options), {\n    refetchInterval,\n  });\n}\n","import qs from 'qs';\n\nexport function getQueryObject(search) {\n  return qs.parse(search, { ignoreQueryPrefix: true });\n}\n\nexport function getQueryString(searchObject) {\n  return qs.stringify(searchObject, { encode: false });\n}\n","import { useMutation, useQueryClient } from 'react-query';\n\nimport apiRequest from '../../services/apiRequest';\n\nconst postInstance = async (postData) => {\n  const { data } = await apiRequest.post(\n    '/api/rhacs/v1/centrals?async=true',\n    postData\n  );\n  return data;\n};\n\nexport default function useCreateInstance() {\n  const queryClient = useQueryClient();\n  return useMutation(postInstance, {\n    onSuccess: () => {\n      // Invalidate and refetch\n      queryClient.invalidateQueries('instances');\n    },\n  });\n}\n","import { useMutation, useQueryClient } from 'react-query';\n\nimport apiRequest from '../../services/apiRequest';\n\nconst deleteInstance = async (instanceID) => {\n  const { data } = await apiRequest.delete(\n    `/api/rhacs/v1/centrals/${instanceID}?async=true`\n  );\n  return data;\n};\n\nexport default function useDeleteInstance() {\n  const queryClient = useQueryClient();\n  return useMutation(deleteInstance, {\n    onSuccess: () => {\n      // Invalidate and refetch\n      queryClient.invalidateQueries('instances');\n    },\n  });\n}\n","/* eslint-disable react/prop-types */\nimport React, { useState } from 'react';\nimport { Select, SelectVariant } from '@patternfly/react-core';\n\nfunction SelectSingle({\n  toggleIcon,\n  id,\n  value,\n  handleSelect,\n  isDisabled = false,\n  children,\n  direction = 'down',\n  isCreatable = false,\n  variant = null,\n  placeholderText = '',\n}) {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const isTypeahead =\n    variant === 'typeahead' ? SelectVariant.typeahead : SelectVariant.single;\n\n  function onSelect(_event, selection) {\n    // The mouse event is not useful.\n    setIsOpen(false);\n    handleSelect(id, selection);\n  }\n\n  return (\n    <Select\n      variant={isTypeahead}\n      toggleIcon={toggleIcon}\n      id={id}\n      isDisabled={isDisabled}\n      isOpen={isOpen}\n      onSelect={onSelect}\n      onToggle={setIsOpen}\n      selections={value}\n      direction={direction}\n      isCreatable={isCreatable}\n      placeholderText={placeholderText}\n      toggleId={id}\n    >\n      {children}\n    </Select>\n  );\n}\n\nexport default SelectSingle;\n","/* eslint-disable react/prop-types */\nimport {\n  Alert,\n  Button,\n  Form,\n  FormGroup,\n  Modal,\n  ModalVariant,\n  SelectOption,\n  TextInput,\n  Tile,\n  ToggleGroup,\n  ToggleGroupItem,\n} from '@patternfly/react-core';\nimport React, { useState } from 'react';\n\nimport { regionOptions } from '../../utils/region';\nimport SelectSingle from '../../components/SelectSingle';\n\nconst defaultFormValues = {\n  name: '',\n  cloud_provider: 'aws',\n  region: 'us-east-1',\n  availabilityZones: 'multi',\n};\n\nfunction CreateInstanceModal({ isOpen, onClose, onRequestCreate }) {\n  const [errorMessage, setErrorMessage] = useState(null);\n  const [formValues, setFormValues] = useState(defaultFormValues);\n  const [isRequestingCreate, setIsRequestingCreate] = useState(false);\n\n  function onChangeAvailabilityZones(isSelected, event) {\n    const { id } = event.currentTarget;\n    setFormValues((prevFormValues) => ({\n      ...prevFormValues,\n      availabilityZones: id,\n    }));\n  }\n\n  function onCloudRegionSelect(id, selection) {\n    setFormValues((prevFormValues) => ({\n      ...prevFormValues,\n      region: selection,\n    }));\n  }\n\n  function onInputChange(value) {\n    setFormValues((prevFormValues) => ({\n      ...prevFormValues,\n      name: value,\n    }));\n  }\n\n  async function onRequestCreateHandler() {\n    setIsRequestingCreate(true);\n    const result = await onRequestCreate(formValues);\n    setIsRequestingCreate(false);\n    if (result instanceof Error) {\n      const errorMessage = result.response.data.reason;\n      setErrorMessage(errorMessage);\n    } else {\n      setFormValues(defaultFormValues);\n      onClose();\n    }\n  }\n\n  return (\n    <Modal\n      variant={ModalVariant.small}\n      title=\"Create ACS instance\"\n      isOpen={isOpen}\n      onClose={onClose}\n      actions={[\n        <Button\n          key=\"createInstance\"\n          variant=\"primary\"\n          onClick={onRequestCreateHandler}\n          isLoading={isRequestingCreate}\n          isDisabled={isRequestingCreate || !formValues?.name}\n        >\n          Create instance\n        </Button>,\n        <Button\n          key=\"cancel\"\n          variant=\"link\"\n          onClick={onClose}\n          isDisabled={isRequestingCreate}\n        >\n          Cancel\n        </Button>,\n      ]}\n    >\n      {errorMessage && (\n        <div className=\"pf-u-mb-md\">\n          <Alert variant=\"danger\" title={errorMessage} />\n        </div>\n      )}\n      <Form>\n        <FormGroup\n          label=\"Name\"\n          isRequired\n          fieldId=\"name\"\n          helperText=\"Must start with a letter and end with a letter or number. Valid characters include lowercase letters from a to z, numbers from 0 to 9, and hyphens ( - ).\"\n        >\n          <TextInput\n            isRequired\n            type=\"text\"\n            id=\"name\"\n            name=\"name\"\n            value={formValues.name}\n            onChange={onInputChange}\n          />\n        </FormGroup>\n        <FormGroup label=\"Cloud provider\" isRequired fieldId=\"cloud_provider\">\n          <Tile\n            title=\"Amazon Web Services\"\n            isSelected={formValues.cloud_provider === 'aws'}\n          />\n        </FormGroup>\n        <FormGroup label=\"Cloud region\" isRequired fieldId=\"region\">\n          <SelectSingle\n            id=\"region\"\n            value={formValues.region}\n            handleSelect={onCloudRegionSelect}\n          >\n            {regionOptions.map((region) => {\n              return (\n                <SelectOption key={region.value} value={region.value}>\n                  {region.label}\n                </SelectOption>\n              );\n            })}\n          </SelectSingle>\n        </FormGroup>\n        <FormGroup\n          label=\"Availability zones\"\n          isRequired\n          fieldId=\"availabilityZones\"\n        >\n          <ToggleGroup aria-label=\"Availability Zones\">\n            <ToggleGroupItem\n              text=\"Single\"\n              buttonId=\"single\"\n              isSelected={formValues.availabilityZones === 'single'}\n              onChange={onChangeAvailabilityZones}\n              isDisabled\n            />\n            <ToggleGroupItem\n              text=\"Multi\"\n              buttonId=\"multi\"\n              isSelected={formValues.availabilityZones === 'multi'}\n              onChange={onChangeAvailabilityZones}\n            />\n          </ToggleGroup>\n        </FormGroup>\n      </Form>\n    </Modal>\n  );\n}\n\nexport default CreateInstanceModal;\n","/* eslint-disable react/prop-types */\nimport {\n  Button,\n  Form,\n  FormGroup,\n  HelperText,\n  HelperTextItem,\n  Modal,\n  ModalVariant,\n  TextInput,\n} from '@patternfly/react-core';\nimport React, { useState } from 'react';\n\nfunction DeleteInstanceModal({ isOpen, instance, onRequestDelete, onClose }) {\n  const [inputValue, setInputValue] = useState('');\n  const [isRequestingDelete, setIsRequestingDelete] = useState(false);\n\n  async function onRequestDeleteHandler() {\n    setIsRequestingDelete(true);\n    const result = await onRequestDelete(instance.id);\n    setIsRequestingDelete(false);\n    if (result.error) {\n      // Do something\n    } else {\n      setInputValue('');\n      onClose();\n    }\n  }\n\n  if (!instance) return null;\n\n  return (\n    <Modal\n      variant={ModalVariant.small}\n      title=\"Delete instance?\"\n      isOpen={isOpen}\n      onClose={onClose}\n      actions={[\n        <Button\n          key=\"createInstance\"\n          variant=\"danger\"\n          onClick={onRequestDeleteHandler}\n          isLoading={isRequestingDelete}\n          isDisabled={isRequestingDelete || instance.name !== inputValue}\n        >\n          Delete instance\n        </Button>,\n        <Button\n          key=\"cancel\"\n          variant=\"link\"\n          onClick={onClose}\n          isDisabled={isRequestingDelete}\n        >\n          Cancel\n        </Button>,\n      ]}\n    >\n      <div className=\"pf-u-pb-md\">\n        <div>\n          This will permanently delete{' '}\n          <span className=\"pf-u-font-weight-bold\">{instance.name}</span>.\n        </div>\n        <div>This action cannot be undone.</div>\n      </div>\n      <Form>\n        <FormGroup\n          label=\"Confirmation\"\n          isRequired\n          fieldId=\"confirmationInstanceName\"\n        >\n          <TextInput\n            isRequired\n            type=\"text\"\n            id=\"confirmationInstanceName\"\n            name=\"confirmationInstanceName\"\n            value={inputValue}\n            onChange={setInputValue}\n          />\n        </FormGroup>\n        <HelperText>\n          <HelperTextItem>\n            Type <span className=\"pf-u-font-weight-bold\">{instance.name}</span>{' '}\n            to confirm.\n          </HelperTextItem>\n        </HelperText>\n      </Form>\n    </Modal>\n  );\n}\n\nexport default DeleteInstanceModal;\n","/* eslint-disable react/prop-types */\nimport {\n  Divider,\n  Drawer,\n  DrawerActions,\n  DrawerCloseButton,\n  DrawerContent,\n  DrawerContentBody,\n  DrawerHead,\n  DrawerPanelContent,\n  Text,\n  TextContent,\n  TextVariants,\n} from '@patternfly/react-core';\nimport React from 'react';\n\nimport InstanceDetailsList from '../../components/InstanceDetailsList';\n\nfunction InstanceDetailsDrawer({ isExpanded, onClose, instance, children }) {\n  return (\n    <Drawer isExpanded={isExpanded}>\n      <DrawerContent\n        panelContent={\n          <DrawerPanelContent>\n            <DrawerHead>\n              <div>\n                <TextContent>\n                  <Text component={TextVariants.small}>Name</Text>\n                </TextContent>\n                <TextContent>\n                  <Text component={TextVariants.h2}>{instance?.name}</Text>\n                </TextContent>\n              </div>\n              <DrawerActions>\n                <DrawerCloseButton onClick={onClose} />\n              </DrawerActions>\n            </DrawerHead>\n            <Divider component=\"div\" />\n            <DrawerContentBody>\n              {instance && <InstanceDetailsList instance={instance} />}\n            </DrawerContentBody>\n          </DrawerPanelContent>\n        }\n      >\n        {children}\n      </DrawerContent>\n    </Drawer>\n  );\n}\n\nexport default InstanceDetailsDrawer;\n","export const statuses = {\n  accepted: 'Request accepted',\n  preparing: 'Creation pending',\n  provisioning: 'Creation in progress',\n  ready: 'Ready',\n  failed: 'Failed',\n  deprovision: 'Deprovisioning',\n  deleting: 'Deleting',\n};\n\nexport const statusOptions = Object.keys(statuses).map((statusValue) => {\n  return {\n    value: statusValue,\n    label: statuses[statusValue],\n  };\n});\n\nexport function statusValueToLabel(statusValue) {\n  return statuses[statusValue];\n}\n\nexport function statusLabelToValue(statusLabel) {\n  const statusOption = statusOptions.find(\n    (statusOption) => statusOption.label === statusLabel\n  );\n  return statusOption?.value;\n}\n","/* eslint-disable react/prop-types */\nimport React from 'react';\nimport {\n  CheckCircleIcon,\n  ExclamationCircleIcon,\n  PendingIcon,\n} from '@patternfly/react-icons';\nimport { Flex, FlexItem, Spinner } from '@patternfly/react-core';\n\nimport { statuses } from '../utils/status';\n\nconst statusMessages = {\n  accepted: {\n    message: statuses.accepted,\n    component: <PendingIcon />,\n  },\n  preparing: {\n    message: statuses.preparing,\n    component: <PendingIcon />,\n  },\n  provisioning: {\n    message: statuses.provisioning,\n    component: <Spinner isSVG size=\"md\" />,\n  },\n  ready: {\n    message: statuses.ready,\n    component: <CheckCircleIcon className=\"pf-u-success-color-100\" />,\n  },\n  failed: {\n    message: statuses.failed,\n    component: <ExclamationCircleIcon className=\"pf-u-danger-color-100\" />,\n  },\n  deprovision: {\n    message: statuses.deprovision,\n    component: <Spinner isSVG size=\"md\" />,\n  },\n  deleting: {\n    message: statuses.deleting,\n    component: <Spinner isSVG size=\"md\" />,\n  },\n};\n\nfunction Status({ status }) {\n  const { message, component } = statusMessages[status] || {\n    message: 'N/A',\n    component: null,\n  };\n\n  return (\n    <Flex>\n      <FlexItem>{component}</FlexItem>\n      <FlexItem>{message}</FlexItem>\n    </Flex>\n  );\n}\n\nexport default Status;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  ToolbarToggleGroup,\n  ToolbarGroup,\n  ToolbarFilter,\n  SelectVariant,\n  SelectOption,\n  Select,\n  ToolbarItem,\n  InputGroup,\n  TextInput,\n  Button,\n} from '@patternfly/react-core';\nimport { FilterIcon, SearchIcon } from '@patternfly/react-icons';\n\nimport { regionOptions } from '../../utils/region';\nimport { statusOptions } from '../../utils/status';\nimport SelectSingle from '../../components/SelectSingle';\n\nfunction InstancesToolbarSearchFilter({ filters, setFilters }) {\n  const [selectedFilter, setSelectedFilter] = useState('Name');\n  // local state for input values\n  const [inputName, setInputName] = useState('');\n  const [inputOwner, setInputOwner] = useState('');\n  // local state for Select isExpanded values\n  // @TODO: We can refactor the SelectSingle component to be more reusable for the usecase in this component as well. Then we don't need to keep this state here.\n  const [isRegionExpanded, setIsRegionExpanded] = useState(false);\n  const [isStatusExpanded, setIsStatusExpanded] = useState(false);\n\n  // TODO: Extract into separate utils file to be reused in other cases\n  function onDeleteChip(type = '', id = '') {\n    setFilters((prevFilters) => {\n      const newFilters = { ...prevFilters };\n      const newValue = newFilters[type.toLowerCase()].filter((s) => s !== id);\n      if (newValue?.length === 0) {\n        delete newFilters[type.toLowerCase()];\n      } else {\n        newFilters[type.toLowerCase()] = newValue;\n      }\n      return newFilters;\n    });\n  }\n\n  // TODO: Extract into separate utils file to be reused in other cases\n  function onDeleteChipGroup(type) {\n    setFilters((prevFilters) => {\n      const newFilters = { ...prevFilters };\n      delete newFilters[type.toLowerCase()];\n      return newFilters;\n    });\n  }\n\n  // TODO: Extract into separate utils file to be reused in other cases\n  function onSelect(type, event, selection) {\n    const checked = event.target.checked;\n    setFilters((prevFilters) => {\n      const newFilters = { ...prevFilters };\n      const prevSelections = prevFilters[type] || [];\n      const newValue = checked\n        ? [...prevSelections, selection]\n        : prevSelections.filter((value) => value !== selection);\n      if (newValue.length === 0) {\n        delete newFilters[type];\n      } else {\n        newFilters[type] = newValue;\n      }\n      return newFilters;\n    });\n  }\n\n  function onRegionSelect(event, selection) {\n    onSelect('region', event, selection);\n  }\n\n  function onStatusSelect(event, selection) {\n    onSelect('status', event, selection);\n  }\n\n  return (\n    <ToolbarToggleGroup toggleIcon={<FilterIcon />} breakpoint=\"xl\">\n      <ToolbarGroup variant=\"filter-group\">\n        <ToolbarItem>\n          <SelectSingle\n            id=\"region\"\n            value={selectedFilter}\n            handleSelect={(_, selection) => {\n              setSelectedFilter(selection);\n            }}\n          >\n            <SelectOption value=\"Name\">Name</SelectOption>\n            <SelectOption value=\"Region\">Region</SelectOption>\n            <SelectOption value=\"Owner\">Owner</SelectOption>\n            <SelectOption value=\"Status\">Status</SelectOption>\n          </SelectSingle>\n        </ToolbarItem>\n        <ToolbarFilter\n          chips={filters.name}\n          deleteChip={onDeleteChip}\n          deleteChipGroup={onDeleteChipGroup}\n          categoryName=\"Name\"\n          className={selectedFilter !== 'Name' && 'pf-u-hidden'}\n        >\n          <ToolbarItem>\n            <InputGroup>\n              <TextInput\n                id=\"filterName\"\n                type=\"text\"\n                aria-label=\"Name\"\n                placeholder=\"Filter by name\"\n                value={inputName}\n                onChange={(value) => setInputName(value)}\n              />\n              <Button\n                variant=\"control\"\n                aria-label=\"Search Name\"\n                onClick={() => {\n                  if (!inputName) return;\n                  setFilters((prevFilters) => {\n                    const newFilters = { ...prevFilters };\n                    newFilters.name = [inputName];\n                    console.log(newFilters);\n                    return newFilters;\n                  });\n                }}\n              >\n                <SearchIcon />\n              </Button>\n            </InputGroup>\n          </ToolbarItem>\n        </ToolbarFilter>\n        <ToolbarFilter\n          chips={filters.region}\n          deleteChip={onDeleteChip}\n          deleteChipGroup={onDeleteChipGroup}\n          categoryName=\"Region\"\n          className={selectedFilter !== 'Region' && 'pf-u-hidden'}\n        >\n          <ToolbarItem>\n            <Select\n              variant={SelectVariant.checkbox}\n              aria-label=\"Region\"\n              onToggle={setIsRegionExpanded}\n              onSelect={onRegionSelect}\n              selections={filters.region}\n              isOpen={isRegionExpanded}\n              placeholderText=\"Filter by region\"\n            >\n              {regionOptions.map((regionOption) => {\n                return (\n                  <SelectOption\n                    key={regionOption.label}\n                    value={regionOption.label}\n                  >\n                    {regionOption.label}\n                  </SelectOption>\n                );\n              })}\n            </Select>\n          </ToolbarItem>\n        </ToolbarFilter>\n        <ToolbarFilter\n          chips={filters.owner}\n          deleteChip={onDeleteChip}\n          deleteChipGroup={onDeleteChipGroup}\n          categoryName=\"Owner\"\n          className={selectedFilter !== 'Owner' && 'pf-u-hidden'}\n        >\n          <ToolbarItem>\n            <InputGroup>\n              <TextInput\n                id=\"filterOwner\"\n                type=\"text\"\n                aria-label=\"Owner\"\n                placeholder=\"Filter by owner\"\n                value={inputOwner}\n                onChange={(value) => setInputOwner(value)}\n              />\n              <Button\n                variant=\"control\"\n                aria-label=\"Search Owner\"\n                onClick={() => {\n                  if (!inputOwner) return;\n                  setFilters((prevFilters) => {\n                    const newFilters = { ...prevFilters };\n                    newFilters.owner = [inputOwner];\n                    return newFilters;\n                  });\n                }}\n              >\n                <SearchIcon />\n              </Button>\n            </InputGroup>\n          </ToolbarItem>\n        </ToolbarFilter>\n        <ToolbarFilter\n          chips={filters.status}\n          deleteChip={onDeleteChip}\n          deleteChipGroup={onDeleteChipGroup}\n          categoryName=\"Status\"\n          className={selectedFilter !== 'Status' && 'pf-u-hidden'}\n        >\n          <ToolbarItem>\n            <Select\n              variant={SelectVariant.checkbox}\n              aria-label=\"Status\"\n              onToggle={setIsStatusExpanded}\n              onSelect={onStatusSelect}\n              selections={filters.status}\n              isOpen={isStatusExpanded}\n              placeholderText=\"Filter by status\"\n            >\n              {statusOptions.map((statusOption) => {\n                return (\n                  <SelectOption\n                    key={statusOption.label}\n                    value={statusOption.label}\n                  >\n                    {statusOption.label}\n                  </SelectOption>\n                );\n              })}\n            </Select>\n          </ToolbarItem>\n        </ToolbarFilter>\n      </ToolbarGroup>\n    </ToolbarToggleGroup>\n  );\n}\n\nInstancesToolbarSearchFilter.propTypes = {\n  filters: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    region: PropTypes.string.isRequired,\n    owner: PropTypes.string.isRequired,\n    status: PropTypes.string.isRequired,\n  }),\n  setFilters: PropTypes.func.isRequired,\n};\n\nexport default InstancesToolbarSearchFilter;\n","import { regionLabelToValue } from './region';\nimport { cloudProviderLabelToValue } from './cloudProvider';\nimport { statusLabelToValue } from './status';\n\nexport function filtersToSearchQuery(filters) {\n  const searchCategories = Object.keys(filters);\n  const queries =\n    searchCategories\n      .filter((searchCategory) => {\n        const searchValues = filters[searchCategory];\n        return searchValues.length;\n      })\n      .map((searchCategory) => {\n        const searchValues = filters[searchCategory];\n        const searchCategoryResult = searchValues\n          .map((searchValue) => {\n            // Use the value the API needs rather than the human readable UI value\n            let modifiedSearchValue = searchValue;\n            if (searchCategory === 'cloud_provider') {\n              modifiedSearchValue = cloudProviderLabelToValue(searchValue);\n            } else if (searchCategory === 'region') {\n              modifiedSearchValue = regionLabelToValue(searchValue);\n            } else if (searchCategory === 'status') {\n              modifiedSearchValue = statusLabelToValue(searchValue);\n            }\n            return `${searchCategory} = ${modifiedSearchValue}`;\n          })\n          .join(' or ');\n        return `(${searchCategoryResult})`;\n      })\n      .join(' and ') || '';\n  return queries;\n}\n","import React, { useEffect, useState } from 'react';\nimport { Link, withRouter, useHistory } from 'react-router-dom';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport {\n  PageHeader,\n  PageHeaderTitle,\n} from '@redhat-cloud-services/frontend-components/PageHeader';\nimport {\n  EmptyState,\n  EmptyStateIcon,\n  Title,\n  EmptyStateBody,\n  EmptyStatePrimary,\n  Button,\n  Card,\n  Toolbar,\n  ToolbarContent,\n  ToolbarItem,\n  Pagination,\n  Bullseye,\n  EmptyStateVariant,\n} from '@patternfly/react-core';\nimport {\n  ActionsColumn,\n  TableComposable,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from '@patternfly/react-table';\nimport { CubesIcon, SearchIcon } from '@patternfly/react-icons';\n\nimport usePagination from '../../hooks/usePagination';\nimport useInstances from '../../hooks/apis/useInstances';\nimport useCreateInstance from '../../hooks/apis/useCreateInstance';\nimport useDeleteInstance from '../../hooks/apis/useDeleteInstance';\n\nimport CreateInstanceModal from './CreateInstanceModal';\nimport DeleteInstanceModal from './DeleteInstanceModal';\nimport InstanceDetailsDrawer from './InstanceDetailsDrawer';\nimport { getDateTimeDifference } from '../../utils/date';\nimport Status from '../../components/Status';\nimport InstancesToolbarSearchFilter from './InstancesToolbarSearchFilter';\nimport useTableSort from '../../hooks/useTableSort';\nimport { regionValueToLabel } from '../../utils/region';\nimport { cloudProviderValueToLabel } from '../../utils/cloudProvider';\nimport { filtersToSearchQuery } from '../../utils/searchQuery';\n\nconst sortFields = [\n  'name',\n  'cloud_provider',\n  'region',\n  'owner',\n  'status',\n  'created_at',\n];\nconst defaultSortOption = {\n  field: 'name',\n  direction: 'asc',\n};\n\n/**\n * A smart component that handles all the api calls and data needed by the dumb components.\n * Smart components are usually classes.\n *\n * https://reactjs.org/docs/components-and-props.html\n * https://medium.com/@thejasonfile/dumb-components-and-smart-components-e7b33a698d43\n */\nfunction InstancesPage() {\n  const history = useHistory();\n\n  const { page, perPage, onSetPage, onPerPageSelect } = usePagination();\n  const { sortOption, getSortParams } = useTableSort({\n    sortFields,\n    defaultSortOption,\n  });\n  const [filters, setFilters] = useState({});\n\n  const { data, isFetching } = useInstances({\n    query: {\n      page,\n      size: perPage,\n      orderBy: `${sortOption.field} ${sortOption.direction}`,\n      search: filtersToSearchQuery(filters),\n    },\n    // Refetch the data every 10 seconds\n    refetchInterval: 10000,\n  });\n  const createInstance = useCreateInstance();\n  const deleteInstance = useDeleteInstance();\n  const [creatingInstance, setCreatingInstance] = useState(null);\n  const [deletingInstance, setDeletingInstance] = useState(null);\n  const [viewingInstance, setViewingInstance] = useState(null);\n\n  const instances = data?.items || [];\n\n  useEffect(() => {\n    insights?.chrome?.appAction?.('instances-page');\n  }, []);\n\n  function onRequestCreate(values) {\n    const response = createInstance.mutateAsync({\n      region: values.region,\n      cloud_provider: values.cloud_provider,\n      name: values.name,\n      multi_az: values.availabilityZones === 'multi',\n    });\n    return response.catch((error) => {\n      return error;\n    });\n  }\n\n  function closeCreateInstanceModal() {\n    setCreatingInstance(null);\n  }\n\n  function onRequestDelete(instanceID) {\n    const response = deleteInstance.mutateAsync(instanceID);\n    return response.catch((error) => {\n      return error;\n    });\n  }\n\n  function closeDeleteInstanceModal() {\n    setDeletingInstance(null);\n  }\n\n  function closeInstanceDetailsDrawer() {\n    setViewingInstance(null);\n  }\n\n  function onClearFilters() {\n    setFilters({});\n  }\n\n  let content = null;\n\n  if (\n    !isFetching &&\n    instances.length === 0 &&\n    Object.keys(filters).length === 0\n  ) {\n    content = (\n      <EmptyState>\n        <EmptyStateIcon icon={CubesIcon} />\n        <Title size=\"lg\" headingLevel=\"h4\">\n          No ACS instances.\n        </Title>\n        <EmptyStateBody>Create one to get started.</EmptyStateBody>\n        <EmptyStatePrimary>\n          <Button variant=\"primary\" onClick={() => setCreatingInstance({})}>\n            Create ACS instance\n          </Button>\n        </EmptyStatePrimary>\n      </EmptyState>\n    );\n  } else {\n    content = (\n      <>\n        <Toolbar clearAllFilters={onClearFilters}>\n          <ToolbarContent>\n            <InstancesToolbarSearchFilter\n              filters={filters}\n              setFilters={setFilters}\n            />\n            <ToolbarItem>\n              <Button variant=\"primary\" onClick={() => setCreatingInstance({})}>\n                Create ACS instance\n              </Button>\n            </ToolbarItem>\n            {instances.length !== 0 && (\n              <ToolbarItem\n                variant=\"pagination\"\n                align={{ default: 'alignRight' }}\n              >\n                <Pagination\n                  itemCount={instances.length}\n                  perPage={perPage}\n                  page={page}\n                  onSetPage={onSetPage}\n                  widgetId=\"acs-instances-top-pagination\"\n                  onPerPageSelect={onPerPageSelect}\n                  isCompact\n                />\n              </ToolbarItem>\n            )}\n          </ToolbarContent>\n        </Toolbar>\n        <TableComposable aria-label=\"ACS instances table\">\n          <Thead>\n            <Tr>\n              <Th sort={getSortParams('name')}>Name</Th>\n              <Th sort={getSortParams('cloud_provider')}>Cloud provider</Th>\n              <Th sort={getSortParams('region')}>Region</Th>\n              <Th sort={getSortParams('owner')}>Owner</Th>\n              <Th sort={getSortParams('status')}>Status</Th>\n              <Th sort={getSortParams('created_at')}>Time created</Th>\n              <Th />\n            </Tr>\n          </Thead>\n          <Tbody>\n            {!isFetching && instances.length === 0 ? (\n              <Tr>\n                <Td colSpan={8}>\n                  <Bullseye>\n                    <EmptyState variant={EmptyStateVariant.small}>\n                      <EmptyStateIcon icon={SearchIcon} />\n                      <Title headingLevel=\"h2\" size=\"lg\">\n                        No results found\n                      </Title>\n                      <EmptyStateBody>\n                        Clear all filters and try again.\n                      </EmptyStateBody>\n                      <Button variant=\"link\" onClick={onClearFilters}>\n                        Clear all filters\n                      </Button>\n                    </EmptyState>\n                  </Bullseye>\n                </Td>\n              </Tr>\n            ) : (\n              instances.map((instance) => {\n                const instanceDetailsURL = `/instances/instance/${instance.id}`;\n                return (\n                  <Tr\n                    key={instance.name}\n                    onRowClick={(event) => {\n                      if (\n                        event.target.getAttribute('type') !== 'button' &&\n                        instance.status === 'ready'\n                      ) {\n                        setViewingInstance(instance);\n                      }\n                    }}\n                    isRowSelected={viewingInstance?.name === instance?.name}\n                  >\n                    <Td dataLabel=\"Name\">\n                      <Button\n                        variant=\"link\"\n                        isInline\n                        isDisabled={instance.status !== 'ready'}\n                        component={(props) => (\n                          <Link {...props} to={instanceDetailsURL} />\n                        )}\n                      >\n                        {instance.name}\n                      </Button>\n                    </Td>\n                    <Td dataLabel=\"Cloud provider\">\n                      {cloudProviderValueToLabel(instance.cloud_provider)}\n                    </Td>\n                    <Td dataLabel=\"Region\">\n                      {regionValueToLabel(instance.region)}\n                    </Td>\n                    <Td dataLabel=\"Owner\">{instance.owner}</Td>\n                    <Td dataLabel=\"Status\">\n                      <Status status={instance.status} />\n                    </Td>\n                    <Td dataLabel=\"Time created\">\n                      {getDateTimeDifference(instance.created_at)}\n                    </Td>\n                    <Td isActionCell>\n                      {instance.status === 'ready' && (\n                        <ActionsColumn\n                          items={[\n                            {\n                              title: 'Details',\n                              onClick: (event) => {\n                                event.preventDefault();\n                                history.push(instanceDetailsURL);\n                              },\n                            },\n                            {\n                              title: 'Delete',\n                              onClick: (event) => {\n                                event.preventDefault();\n                                setDeletingInstance(instance);\n                              },\n                            },\n                          ]}\n                        />\n                      )}\n                    </Td>\n                  </Tr>\n                );\n              })\n            )}\n          </Tbody>\n        </TableComposable>\n        {instances.length !== 0 && (\n          <Toolbar>\n            <ToolbarContent>\n              <ToolbarItem\n                variant=\"pagination\"\n                align={{ default: 'alignRight' }}\n              >\n                <Pagination\n                  itemCount={instances.length}\n                  perPage={perPage}\n                  page={page}\n                  onSetPage={onSetPage}\n                  widgetId=\"acs-instances-top-pagination\"\n                  onPerPageSelect={onPerPageSelect}\n                />\n              </ToolbarItem>\n            </ToolbarContent>\n          </Toolbar>\n        )}\n      </>\n    );\n  }\n\n  return (\n    <InstanceDetailsDrawer\n      isExpanded={!!viewingInstance}\n      instance={viewingInstance}\n      onClose={closeInstanceDetailsDrawer}\n    >\n      <PageHeader>\n        <PageHeaderTitle title=\"ACS Instances\" />\n      </PageHeader>\n      <Main>\n        <Card>{content}</Card>\n        <CreateInstanceModal\n          isOpen={!!creatingInstance}\n          onClose={closeCreateInstanceModal}\n          onRequestCreate={onRequestCreate}\n        />\n        <DeleteInstanceModal\n          instance={deletingInstance}\n          isOpen={!!deletingInstance}\n          onClose={closeDeleteInstanceModal}\n          onRequestDelete={onRequestDelete}\n        />\n      </Main>\n    </InstanceDetailsDrawer>\n  );\n}\n\nexport default withRouter(InstancesPage);\n","import { useState } from 'react';\n\nfunction usePagination() {\n  const [page, setPage] = useState(1);\n  const [perPage, setPerPage] = useState(20);\n\n  function onSetPage(_, newPage) {\n    setPage(newPage);\n  }\n\n  function onPerPageSelect(_, newPerPage) {\n    setPerPage(newPerPage);\n  }\n\n  return {\n    page,\n    perPage,\n    onSetPage,\n    onPerPageSelect,\n  };\n}\n\nexport default usePagination;\n","import { useEffect, useState } from 'react';\n\nfunction useTableSort({ sortFields, defaultSortOption }) {\n  const [sortOption, setSortOption] = useState();\n\n  const activeSortField = sortOption?.field || defaultSortOption.field;\n  const activeSortDirection =\n    sortOption?.direction || defaultSortOption.direction;\n\n  // we'll use this to map the sort fields to an id PatternFly can use internally\n  const [fieldToIdMap, setFieldToIdMap] = useState({});\n\n  // we'll construct a map of sort fields to ids that will make it easier to work with\n  // PatternFly\n  useEffect(() => {\n    const newFieldToIdMap = sortFields.reduce((acc, curr, index) => {\n      acc[curr] = index;\n      return acc;\n    }, {});\n    setFieldToIdMap(newFieldToIdMap);\n  }, [sortFields]);\n\n  function getSortParams(field) {\n    const fieldId = fieldToIdMap[field];\n    const activeSortId = activeSortField\n      ? fieldToIdMap[activeSortField]\n      : undefined;\n\n    return {\n      sortBy: {\n        index: activeSortId,\n        direction: activeSortDirection,\n        defaultDirection: 'desc',\n      },\n      onSort: (_event, _index, direction) => {\n        // modify the URL based on the new sort\n        const newSortOption = {\n          field,\n          direction,\n        };\n        setSortOption(newSortOption);\n      },\n      columnIndex: fieldId,\n    };\n  }\n\n  return {\n    sortOption: {\n      field: activeSortField,\n      direction: activeSortDirection,\n    },\n    getSortParams,\n  };\n}\n\nexport default useTableSort;\n","import axios from 'axios';\n\nconst API_URL = process.env.PROD\n  ? 'https://api.openshift.com'\n  : 'https://api.stage.openshift.com';\n\nexport const authInterceptor = (client) => {\n  client.interceptors.request.use(async (cfg) => {\n    await insights.chrome.auth.getUser();\n    const token = await insights.chrome.auth.getToken();\n    const BASE_URL = cfg.baseURL || API_URL;\n    const updatedCfg = { ...cfg, url: `${BASE_URL}${cfg.url}` };\n    if (token) {\n      updatedCfg.headers = {\n        ...updatedCfg.headers,\n        Authorization: `Bearer ${token}`,\n      };\n    }\n    delete updatedCfg.customHost;\n    return updatedCfg;\n  });\n  return client;\n};\n\nconst apiRequest = authInterceptor(axios.create());\n\nexport default apiRequest;\n","const cloudProviders = {\n  aws: 'Amazon Web Services',\n};\n\nexport const cloudProviderOptions = Object.keys(cloudProviders).map(\n  (cloudProviderValue) => {\n    return {\n      value: cloudProviderValue,\n      label: cloudProviders[cloudProviderValue],\n    };\n  }\n);\n\nexport function cloudProviderValueToLabel(cloudProviderValue) {\n  return cloudProviders[cloudProviderValue];\n}\n\nexport function cloudProviderLabelToValue(cloudProviderLabel) {\n  const cloudProviderOption = cloudProviderOptions.find(\n    (cloudProviderOption) => cloudProviderOption.label === cloudProviderLabel\n  );\n  return cloudProviderOption?.value;\n}\n","import { parseISO, format, formatDistance } from 'date-fns';\n\nconst dateTimeFormat = 'MM/dd/yyyy | h:mm:ss a';\n\nexport function getDateTimeDifference(timestamp) {\n  return formatDistance(parseISO(timestamp), new Date(), {\n    addSuffix: true,\n  });\n}\n\nexport function getDateTime(timestamp) {\n  return format(parseISO(timestamp), dateTimeFormat);\n}\n","const regions = {\n  'us-east-1': 'US-East, N. Virginia',\n  'eu-west-1': 'EU-Ireland',\n};\n\nexport const regionOptions = Object.keys(regions).map((regionValue) => {\n  return { value: regionValue, label: regions[regionValue] };\n});\n\nexport function regionValueToLabel(regionValue) {\n  return regions[regionValue];\n}\n\nexport function regionLabelToValue(regionLabel) {\n  const regionOption = regionOptions.find(\n    (regionOption) => regionOption.label === regionLabel\n  );\n  return regionOption?.value;\n}\n"],"names":["instance","DescriptionList","isHorizontal","DescriptionListGroup","DescriptionListTerm","DescriptionListDescription","cloudProviderValueToLabel","cloud_provider","regionValueToLabel","region","id","owner","getDateTime","created_at","updated_at","centralDataURL","centralUIURL","children","to","rest","BreadcrumbItem","render","className","ariaCurrent","Link","getInstanceById","instanceId","apiRequest","data","useParams","useQuery","isFetching","Bullseye","Spinner","PageHeader","Flex","direction","default","FlexItem","Breadcrumb","isActive","name","PageHeaderTitle","title","Main","PageSection","alignItems","flex","alignSelf","Card","CardHeader","CardHeaderMain","CardTitle","CardBody","Button","variant","ButtonVariant","component","href","target","InstanceDetailsList","PageSectionVariants","isFilled","hasOverflowScroll","isWidthLimited","Title","headingLevel","Grid","hasGutter","GridItem","md","src","frameBorder","allow","allowFullScreen","List","isPlain","ListItem","isInline","getInstances","searchObject","query","queryString","qs","encode","postInstance","postData","deleteInstance","instanceID","useDeleteInstance","queryClient","useQueryClient","useMutation","onSuccess","invalidateQueries","toggleIcon","value","handleSelect","isDisabled","isCreatable","placeholderText","useState","isOpen","setIsOpen","isTypeahead","SelectVariant","Select","onSelect","_event","selection","onToggle","selections","toggleId","defaultFormValues","availabilityZones","onClose","onRequestCreate","errorMessage","setErrorMessage","formValues","setFormValues","isRequestingCreate","setIsRequestingCreate","onChangeAvailabilityZones","isSelected","event","currentTarget","prevFormValues","result","Error","response","reason","Modal","ModalVariant","actions","key","onClick","isLoading","Alert","Form","FormGroup","label","isRequired","fieldId","helperText","TextInput","type","onChange","Tile","regionOptions","SelectOption","ToggleGroup","ToggleGroupItem","text","buttonId","onRequestDelete","inputValue","setInputValue","isRequestingDelete","setIsRequestingDelete","error","HelperText","HelperTextItem","isExpanded","Drawer","DrawerContent","panelContent","DrawerPanelContent","DrawerHead","TextContent","Text","TextVariants","DrawerActions","DrawerCloseButton","Divider","DrawerContentBody","statuses","accepted","preparing","provisioning","ready","failed","deprovision","deleting","statusOptions","Object","keys","map","statusValue","statusMessages","message","isSVG","size","status","InstancesToolbarSearchFilter","filters","setFilters","selectedFilter","setSelectedFilter","inputName","setInputName","inputOwner","setInputOwner","isRegionExpanded","setIsRegionExpanded","isStatusExpanded","setIsStatusExpanded","onDeleteChip","prevFilters","newFilters","newValue","toLowerCase","filter","s","length","onDeleteChipGroup","checked","prevSelections","ToolbarToggleGroup","breakpoint","ToolbarGroup","ToolbarItem","_","ToolbarFilter","chips","deleteChip","deleteChipGroup","categoryName","InputGroup","placeholder","console","log","regionOption","statusOption","propTypes","PropTypes","filtersToSearchQuery","searchCategory","searchCategoryResult","searchValue","statusLabel","modifiedSearchValue","cloudProviderLabelToValue","regionLabelToValue","find","join","sortFields","defaultSortOption","field","withRouter","options","refetchInterval","history","useHistory","page","setPage","perPage","setPerPage","onSetPage","newPage","onPerPageSelect","newPerPage","usePagination","sortOption","setSortOption","activeSortField","activeSortDirection","fieldToIdMap","setFieldToIdMap","useEffect","newFieldToIdMap","reduce","acc","curr","index","getSortParams","sortBy","undefined","defaultDirection","onSort","_index","columnIndex","useTableSort","orderBy","search","createInstance","creatingInstance","setCreatingInstance","deletingInstance","setDeletingInstance","viewingInstance","setViewingInstance","instances","items","onClearFilters","insights","chrome","appAction","content","Toolbar","clearAllFilters","ToolbarContent","align","Pagination","itemCount","widgetId","isCompact","TableComposable","Thead","Tr","Th","sort","Tbody","instanceDetailsURL","onRowClick","getAttribute","isRowSelected","Td","dataLabel","props","getDateTimeDifference","isActionCell","ActionsColumn","preventDefault","push","colSpan","EmptyState","EmptyStateVariant","EmptyStateIcon","icon","SearchIcon","EmptyStateBody","CubesIcon","EmptyStatePrimary","values","mutateAsync","multi_az","client","axios","interceptors","request","use","cfg","auth","getUser","getToken","token","BASE_URL","baseURL","updatedCfg","url","headers","Authorization","customHost","cloudProviders","aws","cloudProviderOptions","cloudProviderValue","cloudProviderLabel","cloudProviderOption","timestamp","formatDistance","parseISO","Date","addSuffix","format","regions","regionValue","regionLabel"],"sourceRoot":""}